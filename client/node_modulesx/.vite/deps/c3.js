import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS
} from "./chunk-PLDDJCW6.js";

// node_modules/c3/node_modules/d3/dist/package.js
var version;
var init_package = __esm({
  "node_modules/c3/node_modules/d3/dist/package.js"() {
    version = "5.16.0";
  }
});

// node_modules/c3/node_modules/d3-array/src/ascending.js
function ascending_default(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_ascending = __esm({
  "node_modules/c3/node_modules/d3-array/src/ascending.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a2, x5, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x5) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a2, x5, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x5) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f) {
  return function(d, x5) {
    return ascending_default(f(d), x5);
  };
}
var init_bisector = __esm({
  "node_modules/c3/node_modules/d3-array/src/bisector.js"() {
    init_ascending();
  }
});

// node_modules/c3/node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisect_default;
var init_bisect = __esm({
  "node_modules/c3/node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    ascendingBisect = bisector_default(ascending_default);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisect_default = bisectRight;
  }
});

// node_modules/c3/node_modules/d3-array/src/pairs.js
function pairs_default(array4, f) {
  if (f == null) f = pair;
  var i = 0, n = array4.length - 1, p = array4[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array4[++i]);
  return pairs;
}
function pair(a2, b) {
  return [a2, b];
}
var init_pairs = __esm({
  "node_modules/c3/node_modules/d3-array/src/pairs.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/cross.js
function cross_default(values0, values1, reduce) {
  var n0 = values0.length, n1 = values1.length, values = new Array(n0 * n1), i0, i1, i, value0;
  if (reduce == null) reduce = pair;
  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }
  return values;
}
var init_cross = __esm({
  "node_modules/c3/node_modules/d3-array/src/cross.js"() {
    init_pairs();
  }
});

// node_modules/c3/node_modules/d3-array/src/descending.js
function descending_default(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending = __esm({
  "node_modules/c3/node_modules/d3-array/src/descending.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/number.js
function number_default(x5) {
  return x5 === null ? NaN : +x5;
}
var init_number = __esm({
  "node_modules/c3/node_modules/d3-array/src/number.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/variance.js
function variance_default(values, valueof) {
  var n = values.length, m = 0, i = -1, mean = 0, value, delta, sum3 = 0;
  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number_default(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum3 += delta * (value - mean);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = number_default(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum3 += delta * (value - mean);
      }
    }
  }
  if (m > 1) return sum3 / (m - 1);
}
var init_variance = __esm({
  "node_modules/c3/node_modules/d3-array/src/variance.js"() {
    init_number();
  }
});

// node_modules/c3/node_modules/d3-array/src/deviation.js
function deviation_default(array4, f) {
  var v = variance_default(array4, f);
  return v ? Math.sqrt(v) : v;
}
var init_deviation = __esm({
  "node_modules/c3/node_modules/d3-array/src/deviation.js"() {
    init_variance();
  }
});

// node_modules/c3/node_modules/d3-array/src/extent.js
function extent_default(values, valueof) {
  var n = values.length, i = -1, value, min2, max3;
  if (valueof == null) {
    while (++i < n) {
      if ((value = values[i]) != null && value >= value) {
        min2 = max3 = value;
        while (++i < n) {
          if ((value = values[i]) != null) {
            if (min2 > value) min2 = value;
            if (max3 < value) max3 = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min2 = max3 = value;
        while (++i < n) {
          if ((value = valueof(values[i], i, values)) != null) {
            if (min2 > value) min2 = value;
            if (max3 < value) max3 = value;
          }
        }
      }
    }
  }
  return [min2, max3];
}
var init_extent = __esm({
  "node_modules/c3/node_modules/d3-array/src/extent.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/array.js
var array, slice, map;
var init_array = __esm({
  "node_modules/c3/node_modules/d3-array/src/array.js"() {
    array = Array.prototype;
    slice = array.slice;
    map = array.map;
  }
});

// node_modules/c3/node_modules/d3-array/src/constant.js
function constant_default(x5) {
  return function() {
    return x5;
  };
}
var init_constant = __esm({
  "node_modules/c3/node_modules/d3-array/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/identity.js
function identity_default(x5) {
  return x5;
}
var init_identity = __esm({
  "node_modules/c3/node_modules/d3-array/src/identity.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/range.js
function range_default(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start2 + i * step;
  }
  return range2;
}
var init_range = __esm({
  "node_modules/c3/node_modules/d3-array/src/range.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/ticks.js
function ticks_default(start2, stop, count2) {
  var reverse, i = -1, n, ticks, step;
  stop = +stop, start2 = +start2, count2 = +count2;
  if (start2 === stop && count2 > 0) return [start2];
  if (reverse = stop < start2) n = start2, start2 = stop, stop = n;
  if ((step = tickIncrement(start2, stop, count2)) === 0 || !isFinite(step)) return [];
  if (step > 0) {
    start2 = Math.ceil(start2 / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start2 + 1));
    while (++i < n) ticks[i] = (start2 + i) * step;
  } else {
    start2 = Math.floor(start2 * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start2 - stop + 1));
    while (++i < n) ticks[i] = (start2 - i) / step;
  }
  if (reverse) ticks.reverse();
  return ticks;
}
function tickIncrement(start2, stop, count2) {
  var step = (stop - start2) / Math.max(0, count2), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start2, stop, count2) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
var e10, e5, e2;
var init_ticks = __esm({
  "node_modules/c3/node_modules/d3-array/src/ticks.js"() {
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// node_modules/c3/node_modules/d3-array/src/threshold/sturges.js
function sturges_default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
var init_sturges = __esm({
  "node_modules/c3/node_modules/d3-array/src/threshold/sturges.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/histogram.js
function histogram_default() {
  var value = identity_default, domain = extent_default, threshold2 = sturges_default;
  function histogram(data) {
    var i, n = data.length, x5, values = new Array(n);
    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }
    var xz = domain(values), x06 = xz[0], x12 = xz[1], tz = threshold2(values, x06, x12);
    if (!Array.isArray(tz)) {
      tz = tickStep(x06, x12, tz);
      tz = range_default(Math.ceil(x06 / tz) * tz, x12, tz);
    }
    var m = tz.length;
    while (tz[0] <= x06) tz.shift(), --m;
    while (tz[m - 1] > x12) tz.pop(), --m;
    var bins = new Array(m + 1), bin;
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x06;
      bin.x1 = i < m ? tz[i] : x12;
    }
    for (i = 0; i < n; ++i) {
      x5 = values[i];
      if (x06 <= x5 && x5 <= x12) {
        bins[bisect_default(tz, x5, 0, m)].push(data[i]);
      }
    }
    return bins;
  }
  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(_), histogram) : value;
  };
  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant_default([_[0], _[1]]), histogram) : domain;
  };
  histogram.thresholds = function(_) {
    return arguments.length ? (threshold2 = typeof _ === "function" ? _ : Array.isArray(_) ? constant_default(slice.call(_)) : constant_default(_), histogram) : threshold2;
  };
  return histogram;
}
var init_histogram = __esm({
  "node_modules/c3/node_modules/d3-array/src/histogram.js"() {
    init_array();
    init_bisect();
    init_constant();
    init_extent();
    init_identity();
    init_range();
    init_ticks();
    init_sturges();
  }
});

// node_modules/c3/node_modules/d3-array/src/quantile.js
function quantile_default(values, p, valueof) {
  if (valueof == null) valueof = number_default;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
var init_quantile = __esm({
  "node_modules/c3/node_modules/d3-array/src/quantile.js"() {
    init_number();
  }
});

// node_modules/c3/node_modules/d3-array/src/threshold/freedmanDiaconis.js
function freedmanDiaconis_default(values, min2, max3) {
  values = map.call(values, number_default).sort(ascending_default);
  return Math.ceil((max3 - min2) / (2 * (quantile_default(values, 0.75) - quantile_default(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
var init_freedmanDiaconis = __esm({
  "node_modules/c3/node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
    init_array();
    init_ascending();
    init_number();
    init_quantile();
  }
});

// node_modules/c3/node_modules/d3-array/src/threshold/scott.js
function scott_default(values, min2, max3) {
  return Math.ceil((max3 - min2) / (3.5 * deviation_default(values) * Math.pow(values.length, -1 / 3)));
}
var init_scott = __esm({
  "node_modules/c3/node_modules/d3-array/src/threshold/scott.js"() {
    init_deviation();
  }
});

// node_modules/c3/node_modules/d3-array/src/max.js
function max_default(values, valueof) {
  var n = values.length, i = -1, value, max3;
  if (valueof == null) {
    while (++i < n) {
      if ((value = values[i]) != null && value >= value) {
        max3 = value;
        while (++i < n) {
          if ((value = values[i]) != null && value > max3) {
            max3 = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max3 = value;
        while (++i < n) {
          if ((value = valueof(values[i], i, values)) != null && value > max3) {
            max3 = value;
          }
        }
      }
    }
  }
  return max3;
}
var init_max = __esm({
  "node_modules/c3/node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/mean.js
function mean_default(values, valueof) {
  var n = values.length, m = n, i = -1, value, sum3 = 0;
  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number_default(values[i]))) sum3 += value;
      else --m;
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = number_default(valueof(values[i], i, values)))) sum3 += value;
      else --m;
    }
  }
  if (m) return sum3 / m;
}
var init_mean = __esm({
  "node_modules/c3/node_modules/d3-array/src/mean.js"() {
    init_number();
  }
});

// node_modules/c3/node_modules/d3-array/src/median.js
function median_default(values, valueof) {
  var n = values.length, i = -1, value, numbers = [];
  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number_default(values[i]))) {
        numbers.push(value);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(value = number_default(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }
  return quantile_default(numbers.sort(ascending_default), 0.5);
}
var init_median = __esm({
  "node_modules/c3/node_modules/d3-array/src/median.js"() {
    init_ascending();
    init_number();
    init_quantile();
  }
});

// node_modules/c3/node_modules/d3-array/src/merge.js
function merge_default(arrays) {
  var n = arrays.length, m, i = -1, j = 0, merged, array4;
  while (++i < n) j += arrays[i].length;
  merged = new Array(j);
  while (--n >= 0) {
    array4 = arrays[n];
    m = array4.length;
    while (--m >= 0) {
      merged[--j] = array4[m];
    }
  }
  return merged;
}
var init_merge = __esm({
  "node_modules/c3/node_modules/d3-array/src/merge.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/min.js
function min_default(values, valueof) {
  var n = values.length, i = -1, value, min2;
  if (valueof == null) {
    while (++i < n) {
      if ((value = values[i]) != null && value >= value) {
        min2 = value;
        while (++i < n) {
          if ((value = values[i]) != null && min2 > value) {
            min2 = value;
          }
        }
      }
    }
  } else {
    while (++i < n) {
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min2 = value;
        while (++i < n) {
          if ((value = valueof(values[i], i, values)) != null && min2 > value) {
            min2 = value;
          }
        }
      }
    }
  }
  return min2;
}
var init_min = __esm({
  "node_modules/c3/node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/permute.js
function permute_default(array4, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array4[indexes[i]];
  return permutes;
}
var init_permute = __esm({
  "node_modules/c3/node_modules/d3-array/src/permute.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/scan.js
function scan_default(values, compare) {
  if (!(n = values.length)) return;
  var n, i = 0, j = 0, xi, xj = values[j];
  if (compare == null) compare = ascending_default;
  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }
  if (compare(xj, xj) === 0) return j;
}
var init_scan = __esm({
  "node_modules/c3/node_modules/d3-array/src/scan.js"() {
    init_ascending();
  }
});

// node_modules/c3/node_modules/d3-array/src/shuffle.js
function shuffle_default(array4, i0, i1) {
  var m = (i1 == null ? array4.length : i1) - (i0 = i0 == null ? 0 : +i0), t, i;
  while (m) {
    i = Math.random() * m-- | 0;
    t = array4[m + i0];
    array4[m + i0] = array4[i + i0];
    array4[i + i0] = t;
  }
  return array4;
}
var init_shuffle = __esm({
  "node_modules/c3/node_modules/d3-array/src/shuffle.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/sum.js
function sum_default(values, valueof) {
  var n = values.length, i = -1, value, sum3 = 0;
  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum3 += value;
    }
  } else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum3 += value;
    }
  }
  return sum3;
}
var init_sum = __esm({
  "node_modules/c3/node_modules/d3-array/src/sum.js"() {
  }
});

// node_modules/c3/node_modules/d3-array/src/transpose.js
function transpose_default(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min_default(matrix, length), transpose = new Array(m); ++i < m; ) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}
function length(d) {
  return d.length;
}
var init_transpose = __esm({
  "node_modules/c3/node_modules/d3-array/src/transpose.js"() {
    init_min();
  }
});

// node_modules/c3/node_modules/d3-array/src/zip.js
function zip_default() {
  return transpose_default(arguments);
}
var init_zip = __esm({
  "node_modules/c3/node_modules/d3-array/src/zip.js"() {
    init_transpose();
  }
});

// node_modules/c3/node_modules/d3-array/src/index.js
var init_src = __esm({
  "node_modules/c3/node_modules/d3-array/src/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_cross();
    init_descending();
    init_deviation();
    init_extent();
    init_histogram();
    init_freedmanDiaconis();
    init_scott();
    init_sturges();
    init_max();
    init_mean();
    init_median();
    init_merge();
    init_min();
    init_pairs();
    init_permute();
    init_quantile();
    init_range();
    init_scan();
    init_shuffle();
    init_sum();
    init_ticks();
    init_transpose();
    init_variance();
    init_zip();
  }
});

// node_modules/c3/node_modules/d3-axis/src/array.js
var slice2;
var init_array2 = __esm({
  "node_modules/c3/node_modules/d3-axis/src/array.js"() {
    slice2 = Array.prototype.slice;
  }
});

// node_modules/c3/node_modules/d3-axis/src/identity.js
function identity_default2(x5) {
  return x5;
}
var init_identity2 = __esm({
  "node_modules/c3/node_modules/d3-axis/src/identity.js"() {
  }
});

// node_modules/c3/node_modules/d3-axis/src/axis.js
function translateX(x5) {
  return "translate(" + (x5 + 0.5) + ",0)";
}
function translateY(y5) {
  return "translate(0," + (y5 + 0.5) + ")";
}
function number(scale) {
  return function(d) {
    return +scale(d);
  };
}
function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2;
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return +scale(d) + offset;
  };
}
function entering() {
  return !this.__axis;
}
function axis(orient, scale) {
  var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, k2 = orient === top || orient === left ? -1 : 1, x5 = orient === left || orient === right ? "x" : "y", transform2 = orient === top || orient === bottom ? translateX : translateY;
  function axis2(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format2 = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default2 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range2 = scale.range(), range0 = +range2[0] + 0.5, range1 = +range2[range2.length - 1] + 0.5, position = (scale.bandwidth ? center : number)(scale.copy()), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
    path2 = path2.merge(path2.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x5 + "2", k2 * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x5, k2 * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
    if (context !== selection2) {
      path2 = path2.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
        return isFinite(d = position(d)) ? transform2(d) : this.getAttribute("transform");
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
        var p = this.parentNode.__axis;
        return transform2(p && isFinite(p = p(d)) ? p : position(d));
      });
    }
    tickExit.remove();
    path2.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k2 * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k2 * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k2 * tickSizeOuter + "V0.5H" + range1 + "V" + k2 * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
    tick.attr("opacity", 1).attr("transform", function(d) {
      return transform2(position(d));
    });
    line.attr(x5 + "2", k2 * tickSizeInner);
    text.attr(x5, k2 * spacing).text(format2);
    selection2.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
    selection2.each(function() {
      this.__axis = position;
    });
  }
  axis2.scale = function(_) {
    return arguments.length ? (scale = _, axis2) : scale;
  };
  axis2.ticks = function() {
    return tickArguments = slice2.call(arguments), axis2;
  };
  axis2.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice2.call(_), axis2) : tickArguments.slice();
  };
  axis2.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice2.call(_), axis2) : tickValues && tickValues.slice();
  };
  axis2.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis2) : tickFormat;
  };
  axis2.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis2) : tickSizeOuter;
  };
  axis2.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis2) : tickPadding;
  };
  return axis2;
}
function axisTop(scale) {
  return axis(top, scale);
}
function axisRight(scale) {
  return axis(right, scale);
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}
var top, right, bottom, left, epsilon;
var init_axis = __esm({
  "node_modules/c3/node_modules/d3-axis/src/axis.js"() {
    init_array2();
    init_identity2();
    top = 1;
    right = 2;
    bottom = 3;
    left = 4;
    epsilon = 1e-6;
  }
});

// node_modules/c3/node_modules/d3-axis/src/index.js
var init_src2 = __esm({
  "node_modules/c3/node_modules/d3-axis/src/index.js"() {
    init_axis();
  }
});

// node_modules/c3/node_modules/d3-dispatch/src/dispatch.js
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
function get(type2, name) {
  for (var i = 0, n = type2.length, c4; i < n; ++i) {
    if ((c4 = type2[i]).name === name) {
      return c4.value;
    }
  }
}
function set(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null) type2.push({ name, value: callback });
  return type2;
}
var noop, dispatch_default;
var init_dispatch = __esm({
  "node_modules/c3/node_modules/d3-dispatch/src/dispatch.js"() {
    noop = { value: function() {
    } };
    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
          return;
        }
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
        }
        return this;
      },
      copy: function() {
        var copy3 = {}, _ = this._;
        for (var t in _) copy3[t] = _[t].slice();
        return new Dispatch(copy3);
      },
      call: function(type2, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
        for (t = this._[type2], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type2, that, args) {
        if (!this._.hasOwnProperty(type2)) throw new Error("unknown type: " + type2);
        for (var t = this._[type2], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };
    dispatch_default = dispatch;
  }
});

// node_modules/c3/node_modules/d3-dispatch/src/index.js
var init_src3 = __esm({
  "node_modules/c3/node_modules/d3-dispatch/src/index.js"() {
    init_dispatch();
  }
});

// node_modules/c3/node_modules/d3-selection/src/namespaces.js
var xhtml, namespaces_default;
var init_namespaces = __esm({
  "node_modules/c3/node_modules/d3-selection/src/namespaces.js"() {
    xhtml = "http://www.w3.org/1999/xhtml";
    namespaces_default = {
      svg: "http://www.w3.org/2000/svg",
      xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
  }
});

// node_modules/c3/node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix2 = name += "", i = prefix2.indexOf(":");
  if (i >= 0 && (prefix2 = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name } : name;
}
var init_namespace = __esm({
  "node_modules/c3/node_modules/d3-selection/src/namespace.js"() {
    init_namespaces();
  }
});

// node_modules/c3/node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
var init_creator = __esm({
  "node_modules/c3/node_modules/d3-selection/src/creator.js"() {
    init_namespace();
    init_namespaces();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}
var init_selector = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selector.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function") select = selector_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_select = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/select.js"() {
    init_selection();
    init_selector();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}
var init_selectorAll = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selectorAll.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/selectAll.js
function selectAll_default(select) {
  if (typeof select !== "function") select = selectorAll_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}
var init_selectAll = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/selectAll.js"() {
    init_selection();
    init_selectorAll();
  }
});

// node_modules/c3/node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
var init_matcher = __esm({
  "node_modules/c3/node_modules/d3-selection/src/matcher.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function") match = matcher_default(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_filter = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/filter.js"() {
    init_selection();
    init_matcher();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}
var init_sparse = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/sparse.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
var init_enter = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/enter.js"() {
    init_sparse();
    init_selection();
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
      },
      insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
      },
      querySelector: function(selector) {
        return this._parent.querySelector(selector);
      },
      querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-selection/src/constant.js
function constant_default2(x5) {
  return function() {
    return x5;
  };
}
var init_constant2 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}
function data_default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) {
      data[++j] = d;
    });
    return data;
  }
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function") value = constant_default2(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength) ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
var keyPrefix;
var init_data = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/data.js"() {
    init_selection();
    init_enter();
    init_constant2();
    keyPrefix = "$";
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}
var init_exit = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/exit.js"() {
    init_sparse();
    init_selection();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove();
  else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
var init_join = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/join.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/merge.js
function merge_default2(selection2) {
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}
var init_merge2 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/merge.js"() {
    init_selection();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
var init_order = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/order.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare) compare = ascending;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_sort = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/sort.js"() {
    init_selection();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
var init_call = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/call.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() {
    nodes[++i] = this;
  });
  return nodes;
}
var init_nodes = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/nodes.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }
  return null;
}
var init_node = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/node.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/size.js
function size_default() {
  var size = 0;
  this.each(function() {
    ++size;
  });
  return size;
}
var init_size = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/size.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}
var init_empty = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/empty.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}
var init_each = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/each.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
var init_attr = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/attr.js"() {
    init_namespace();
  }
});

// node_modules/c3/node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
var init_window = __esm({
  "node_modules/c3/node_modules/d3-selection/src/window.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}
var init_style = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/style.js"() {
    init_window();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
var init_property = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/property.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
var init_classed = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/classed.js"() {
    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
var init_text = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/text.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
var init_html = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/html.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}
var init_raise = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/raise.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}
var init_lower = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/lower.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create2 = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
var init_append = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/append.js"() {
    init_creator();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
  });
}
var init_insert = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/insert.js"() {
    init_creator();
    init_selector();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}
var init_remove = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/remove.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
var init_clone = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/clone.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
var init_datum = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/datum.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/on.js
function filterContextListener(listener, index2, group) {
  listener = contextListener(listener, index2, group);
  return function(event2) {
    var related = event2.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event2);
    }
  };
}
function contextListener(listener, index2, group) {
  return function(event1) {
    var event0 = event;
    event = event1;
    try {
      listener.call(this, this.__data__, index2, group);
    } finally {
      event = event0;
    }
  };
}
function parseTypenames2(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}
function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = { type: typename.type, name: typename.name, value, listener, capture };
    if (!on) this.__on = [o];
    else on.push(o);
  };
}
function on_default(typename, value, capture) {
  var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }
  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
}
function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}
var filterEvents, event, element;
var init_on = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/on.js"() {
    filterEvents = {};
    event = null;
    if (typeof document !== "undefined") {
      element = document.documentElement;
      if (!("onmouseenter" in element)) {
        filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
      }
    }
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type2, params) {
  var window2 = window_default(node), event2 = window2.CustomEvent;
  if (typeof event2 === "function") {
    event2 = new event2(type2, params);
  } else {
    event2 = window2.document.createEvent("Event");
    if (params) event2.initEvent(type2, params.bubbles, params.cancelable), event2.detail = params.detail;
    else event2.initEvent(type2, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function dispatch_default2(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}
var init_dispatch2 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/dispatch.js"() {
    init_window();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selection/index.js
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
var root, selection_default;
var init_selection = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selection/index.js"() {
    init_select();
    init_selectAll();
    init_filter();
    init_data();
    init_enter();
    init_exit();
    init_join();
    init_merge2();
    init_order();
    init_sort();
    init_call();
    init_nodes();
    init_node();
    init_size();
    init_empty();
    init_each();
    init_attr();
    init_style();
    init_property();
    init_classed();
    init_text();
    init_html();
    init_raise();
    init_lower();
    init_append();
    init_insert();
    init_remove();
    init_clone();
    init_datum();
    init_on();
    init_dispatch2();
    root = [null];
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: select_default,
      selectAll: selectAll_default,
      filter: filter_default,
      data: data_default,
      enter: enter_default,
      exit: exit_default,
      join: join_default,
      merge: merge_default2,
      order: order_default,
      sort: sort_default,
      call: call_default,
      nodes: nodes_default,
      node: node_default,
      size: size_default,
      empty: empty_default,
      each: each_default,
      attr: attr_default,
      style: style_default,
      property: property_default,
      classed: classed_default,
      text: text_default,
      html: html_default,
      raise: raise_default,
      lower: lower_default,
      append: append_default,
      insert: insert_default,
      remove: remove_default,
      clone: clone_default,
      datum: datum_default,
      on: on_default,
      dispatch: dispatch_default2
    };
    selection_default = selection;
  }
});

// node_modules/c3/node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}
var init_select2 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/select.js"() {
    init_selection();
  }
});

// node_modules/c3/node_modules/d3-selection/src/create.js
function create_default(name) {
  return select_default2(creator_default(name).call(document.documentElement));
}
var init_create = __esm({
  "node_modules/c3/node_modules/d3-selection/src/create.js"() {
    init_creator();
    init_select2();
  }
});

// node_modules/c3/node_modules/d3-selection/src/local.js
function local() {
  return new Local();
}
function Local() {
  this._ = "@" + (++nextId).toString(36);
}
var nextId;
var init_local = __esm({
  "node_modules/c3/node_modules/d3-selection/src/local.js"() {
    nextId = 0;
    Local.prototype = local.prototype = {
      constructor: Local,
      get: function(node) {
        var id2 = this._;
        while (!(id2 in node)) if (!(node = node.parentNode)) return;
        return node[id2];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default() {
  var current = event, source;
  while (source = current.sourceEvent) current = source;
  return current;
}
var init_sourceEvent = __esm({
  "node_modules/c3/node_modules/d3-selection/src/sourceEvent.js"() {
    init_on();
  }
});

// node_modules/c3/node_modules/d3-selection/src/point.js
function point_default(node, event2) {
  var svg2 = node.ownerSVGElement || node;
  if (svg2.createSVGPoint) {
    var point6 = svg2.createSVGPoint();
    point6.x = event2.clientX, point6.y = event2.clientY;
    point6 = point6.matrixTransform(node.getScreenCTM().inverse());
    return [point6.x, point6.y];
  }
  var rect = node.getBoundingClientRect();
  return [event2.clientX - rect.left - node.clientLeft, event2.clientY - rect.top - node.clientTop];
}
var init_point = __esm({
  "node_modules/c3/node_modules/d3-selection/src/point.js"() {
  }
});

// node_modules/c3/node_modules/d3-selection/src/mouse.js
function mouse_default(node) {
  var event2 = sourceEvent_default();
  if (event2.changedTouches) event2 = event2.changedTouches[0];
  return point_default(node, event2);
}
var init_mouse = __esm({
  "node_modules/c3/node_modules/d3-selection/src/mouse.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/c3/node_modules/d3-selection/src/selectAll.js
function selectAll_default2(selector) {
  return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root);
}
var init_selectAll2 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/selectAll.js"() {
    init_selection();
  }
});

// node_modules/c3/node_modules/d3-selection/src/touch.js
function touch_default(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent_default().changedTouches;
  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point_default(node, touch);
    }
  }
  return null;
}
var init_touch = __esm({
  "node_modules/c3/node_modules/d3-selection/src/touch.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/c3/node_modules/d3-selection/src/touches.js
function touches_default(node, touches) {
  if (touches == null) touches = sourceEvent_default().touches;
  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point_default(node, touches[i]);
  }
  return points;
}
var init_touches = __esm({
  "node_modules/c3/node_modules/d3-selection/src/touches.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/c3/node_modules/d3-selection/src/index.js
var init_src4 = __esm({
  "node_modules/c3/node_modules/d3-selection/src/index.js"() {
    init_create();
    init_creator();
    init_local();
    init_matcher();
    init_mouse();
    init_namespace();
    init_namespaces();
    init_point();
    init_select2();
    init_selectAll2();
    init_selection();
    init_selector();
    init_selectorAll();
    init_style();
    init_touch();
    init_touches();
    init_window();
    init_on();
  }
});

// node_modules/c3/node_modules/d3-drag/src/noevent.js
function nopropagation() {
  event.stopImmediatePropagation();
}
function noevent_default() {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var init_noevent = __esm({
  "node_modules/c3/node_modules/d3-drag/src/noevent.js"() {
    init_src4();
  }
});

// node_modules/c3/node_modules/d3-drag/src/nodrag.js
function nodrag_default(view) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, true);
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", noevent_default, true);
  } else {
    root3.__noselect = root3.style.MozUserSelect;
    root3.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root3 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent_default, true);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root3) {
    selection2.on("selectstart.drag", null);
  } else {
    root3.style.MozUserSelect = root3.__noselect;
    delete root3.__noselect;
  }
}
var init_nodrag = __esm({
  "node_modules/c3/node_modules/d3-drag/src/nodrag.js"() {
    init_src4();
    init_noevent();
  }
});

// node_modules/c3/node_modules/d3-drag/src/constant.js
function constant_default3(x5) {
  return function() {
    return x5;
  };
}
var init_constant3 = __esm({
  "node_modules/c3/node_modules/d3-drag/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-drag/src/event.js
function DragEvent(target, type2, subject, id2, active, x5, y5, dx, dy, dispatch2) {
  this.target = target;
  this.type = type2;
  this.subject = subject;
  this.identifier = id2;
  this.active = active;
  this.x = x5;
  this.y = y5;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch2;
}
var init_event = __esm({
  "node_modules/c3/node_modules/d3-drag/src/event.js"() {
    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };
  }
});

// node_modules/c3/node_modules/d3-drag/src/drag.js
function defaultFilter() {
  return !event.ctrlKey && !event.button;
}
function defaultContainer() {
  return this.parentNode;
}
function defaultSubject(d) {
  return d == null ? { x: event.x, y: event.y } : d;
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function drag_default() {
  var filter = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
  function drag(selection2) {
    selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), mouse_default, this, arguments);
    if (!gesture) return;
    select_default2(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    nodrag_default(event.view);
    nopropagation();
    mousemoving = false;
    mousedownx = event.clientX;
    mousedowny = event.clientY;
    gesture("start");
  }
  function mousemoved() {
    noevent_default();
    if (!mousemoving) {
      var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag");
  }
  function mouseupped() {
    select_default2(event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(event.view, mousemoving);
    noevent_default();
    gestures.mouse("end");
  }
  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = event.changedTouches, c4 = container.apply(this, arguments), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c4, touch_default, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }
  function touchmoved() {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent_default();
        gesture("drag");
      }
    }
  }
  function touchended() {
    var touches = event.changedTouches, n = touches.length, i, gesture;
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }
  function beforestart(id2, container2, point6, that, args) {
    var p = point6(container2, id2), s2, dx, dy, sublisteners = listeners.copy();
    if (!customEvent(new DragEvent(drag, "beforestart", s2, id2, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((event.subject = s2 = subject.apply(that, args)) == null) return false;
      dx = s2.x - p[0] || 0;
      dy = s2.y - p[1] || 0;
      return true;
    })) return;
    return function gesture(type2) {
      var p02 = p, n;
      switch (type2) {
        case "start":
          gestures[id2] = gesture, n = active++;
          break;
        case "end":
          delete gestures[id2], --active;
        // nobreak
        case "drag":
          p = point6(container2, id2), n = active;
          break;
      }
      customEvent(new DragEvent(drag, type2, s2, id2, n, p[0] + dx, p[1] + dy, p[0] - p02[0], p[1] - p02[1], sublisteners), sublisteners.apply, sublisteners, [type2, that, args]);
    };
  }
  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant_default3(!!_), drag) : filter;
  };
  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant_default3(_), drag) : container;
  };
  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default3(_), drag) : subject;
  };
  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default3(!!_), drag) : touchable;
  };
  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };
  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };
  return drag;
}
var init_drag = __esm({
  "node_modules/c3/node_modules/d3-drag/src/drag.js"() {
    init_src3();
    init_src4();
    init_nodrag();
    init_noevent();
    init_constant3();
    init_event();
  }
});

// node_modules/c3/node_modules/d3-drag/src/index.js
var init_src5 = __esm({
  "node_modules/c3/node_modules/d3-drag/src/index.js"() {
    init_drag();
    init_nodrag();
  }
});

// node_modules/c3/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}
var init_define = __esm({
  "node_modules/c3/node_modules/d3-color/src/define.js"() {
  }
});

// node_modules/c3/node_modules/d3-color/src/color.js
function Color() {
}
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m = reHex.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a2 = this.opacity;
  a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
  return (a2 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a2 === 1 ? ")" : ", " + a2 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s2, l, a2) {
  if (a2 <= 0) h = s2 = l = NaN;
  else if (l <= 0 || l >= 1) h = s2 = NaN;
  else if (s2 <= 0) h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max3 = Math.max(r, g, b), h = NaN, s2 = max3 - min2, l = (max3 + min2) / 2;
  if (s2) {
    if (r === max3) h = (g - b) / s2 + (g < b) * 6;
    else if (g === max3) h = (b - r) / s2 + 2;
    else h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max3 + min2 : 2 - max3 - min2;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
var init_color = __esm({
  "node_modules/c3/node_modules/d3-color/src/color.js"() {
    init_define();
    darker = 0.7;
    brighter = 1 / darker;
    reI = "\\s*([+-]?\\d+)\\s*";
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
    reHex = /^#([0-9a-f]{3,8})$/;
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
    named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define_default(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    define_default(Rgb, rgb, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    define_default(Hsl, hsl, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a2 = this.opacity;
        a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
        return (a2 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a2 === 1 ? ")" : ", " + a2 + ")");
      }
    }));
  }
});

// node_modules/c3/node_modules/d3-color/src/math.js
var deg2rad, rad2deg;
var init_math = __esm({
  "node_modules/c3/node_modules/d3-color/src/math.js"() {
    deg2rad = Math.PI / 180;
    rad2deg = 180 / Math.PI;
  }
});

// node_modules/c3/node_modules/d3-color/src/lab.js
function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y5 = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x5, z;
  if (r === g && g === b) x5 = z = y5;
  else {
    x5 = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y5 - 16, 500 * (x5 - y5), 200 * (y5 - z), o.opacity);
}
function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}
function lab(l, a2, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b, opacity == null ? 1 : opacity);
}
function Lab(l, a2, b, opacity) {
  this.l = +l;
  this.a = +a2;
  this.b = +b;
  this.opacity = +opacity;
}
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x5) {
  return 255 * (x5 <= 31308e-7 ? 12.92 * x5 : 1.055 * Math.pow(x5, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x5) {
  return (x5 /= 255) <= 0.04045 ? x5 / 12.92 : Math.pow((x5 + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function lch(l, c4, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c4, l, opacity == null ? 1 : opacity);
}
function hcl(h, c4, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c4, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c4, l, opacity) {
  this.h = +h;
  this.c = +c4;
  this.l = +l;
  this.opacity = +opacity;
}
function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
var K, Xn, Yn, Zn, t0, t1, t2, t3;
var init_lab = __esm({
  "node_modules/c3/node_modules/d3-color/src/lab.js"() {
    init_define();
    init_color();
    init_math();
    K = 18;
    Xn = 0.96422;
    Yn = 1;
    Zn = 0.82521;
    t0 = 4 / 29;
    t1 = 6 / 29;
    t2 = 3 * t1 * t1;
    t3 = t1 * t1 * t1;
    define_default(Lab, lab, extend(Color, {
      brighter: function(k2) {
        return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
      },
      darker: function(k2) {
        return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y5 = (this.l + 16) / 116, x5 = isNaN(this.a) ? y5 : y5 + this.a / 500, z = isNaN(this.b) ? y5 : y5 - this.b / 200;
        x5 = Xn * lab2xyz(x5);
        y5 = Yn * lab2xyz(y5);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb(3.1338561 * x5 - 1.6168667 * y5 - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x5 + 1.9161415 * y5 + 0.033454 * z),
          lrgb2rgb(0.0719453 * x5 - 0.2289914 * y5 + 1.4052427 * z),
          this.opacity
        );
      }
    }));
    define_default(Hcl, hcl, extend(Color, {
      brighter: function(k2) {
        return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
      },
      darker: function(k2) {
        return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
      },
      rgb: function() {
        return hcl2lab(this).rgb();
      }
    }));
  }
});

// node_modules/c3/node_modules/d3-color/src/cubehelix.js
function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k2 = (E * (g - l) - C * bl) / D, s2 = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h = s2 ? Math.atan2(k2, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s2, l, o.opacity);
}
function cubehelix(h, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
var A, B, C, D, E, ED, EB, BC_DA;
var init_cubehelix = __esm({
  "node_modules/c3/node_modules/d3-color/src/cubehelix.js"() {
    init_define();
    init_color();
    init_math();
    A = -0.14861;
    B = 1.78277;
    C = -0.29227;
    D = -0.90649;
    E = 1.97294;
    ED = E * D;
    EB = E * B;
    BC_DA = B * C - D * A;
    define_default(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
        return new Rgb(
          255 * (l + a2 * (A * cosh2 + B * sinh2)),
          255 * (l + a2 * (C * cosh2 + D * sinh2)),
          255 * (l + a2 * (E * cosh2)),
          this.opacity
        );
      }
    }));
  }
});

// node_modules/c3/node_modules/d3-color/src/index.js
var init_src6 = __esm({
  "node_modules/c3/node_modules/d3-color/src/index.js"() {
    init_color();
    init_lab();
    init_cubehelix();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v2, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var init_basis = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/basis.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var init_basisClosed = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/basisClosed.js"() {
    init_basis();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/constant.js
function constant_default4(x5) {
  return function() {
    return x5;
  };
}
var init_constant4 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y5) {
  return a2 = Math.pow(a2, y5), b = Math.pow(b, y5) - a2, y5 = 1 / y5, function(t) {
    return Math.pow(a2 + t * b, y5);
  };
}
function hue(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default4(isNaN(a2) ? b : a2);
}
function gamma(y5) {
  return (y5 = +y5) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y5) : constant_default4(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default4(isNaN(a2) ? b : a2);
}
var init_color2 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/color.js"() {
    init_constant4();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/rgb.js
function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgb_default, rgbBasis, rgbBasisClosed;
var init_rgb = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/rgb.js"() {
    init_src6();
    init_basis();
    init_basisClosed();
    init_color2();
    rgb_default = function rgbGamma(y5) {
      var color2 = gamma(y5);
      function rgb2(start2, end) {
        var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
        return function(t) {
          start2.r = r(t);
          start2.g = g(t);
          start2.b = b(t);
          start2.opacity = opacity(t);
          return start2 + "";
        };
      }
      rgb2.gamma = rgbGamma;
      return rgb2;
    }(1);
    rgbBasis = rgbSpline(basis_default);
    rgbBasisClosed = rgbSpline(basisClosed_default);
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b) b = [];
  var n = a2 ? Math.min(b.length, a2.length) : 0, c4 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i) c4[i] = a2[i] * (1 - t) + b[i] * t;
    return c4;
  };
}
function isNumberArray(x5) {
  return ArrayBuffer.isView(x5) && !(x5 instanceof DataView);
}
var init_numberArray = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/numberArray.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/array.js
function array_default(a2, b) {
  return (isNumberArray(b) ? numberArray_default : genericArray)(a2, b);
}
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x5 = new Array(na), c4 = new Array(nb), i;
  for (i = 0; i < na; ++i) x5[i] = value_default(a2[i], b[i]);
  for (; i < nb; ++i) c4[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i) c4[i] = x5[i](t);
    return c4;
  };
}
var init_array3 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/array.js"() {
    init_value();
    init_numberArray();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d = /* @__PURE__ */ new Date();
  return a2 = +a2, b = +b, function(t) {
    return d.setTime(a2 * (1 - t) + b * t), d;
  };
}
var init_date = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/date.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/number.js
function number_default2(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return a2 * (1 - t) + b * t;
  };
}
var init_number2 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/number.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c4 = {}, k2;
  if (a2 === null || typeof a2 !== "object") a2 = {};
  if (b === null || typeof b !== "object") b = {};
  for (k2 in b) {
    if (k2 in a2) {
      i[k2] = value_default(a2[k2], b[k2]);
    } else {
      c4[k2] = b[k2];
    }
  }
  return function(t) {
    for (k2 in i) c4[k2] = i[k2](t);
    return c4;
  };
}
var init_object = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/object.js"() {
    init_value();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/string.js
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i]) s2[i] += bs;
      else s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i]) s2[i] += bm;
      else s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: number_default2(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i]) s2[i] += bs;
    else s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2) s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}
var reA, reB;
var init_string = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/string.js"() {
    init_number2();
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(reA.source, "g");
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c4;
  return b == null || t === "boolean" ? constant_default4(b) : (t === "number" ? number_default2 : t === "string" ? (c4 = color(b)) ? (b = c4, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default2)(a2, b);
}
var init_value = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/value.js"() {
    init_src6();
    init_rgb();
    init_array3();
    init_date();
    init_number2();
    init_object();
    init_string();
    init_constant4();
    init_numberArray();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/discrete.js
function discrete_default(range2) {
  var n = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var init_discrete = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/discrete.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/hue.js
function hue_default(a2, b) {
  var i = hue(+a2, +b);
  return function(t) {
    var x5 = i(t);
    return x5 - 360 * Math.floor(x5 / 360);
  };
}
var init_hue = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/hue.js"() {
    init_color2();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t) {
    return Math.round(a2 * (1 - t) + b * t);
  };
}
var init_round = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/round.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/transform/decompose.js
function decompose_default(a2, b, c4, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b)) a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c4 + b * d) c4 -= a2 * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c4 * c4 + d * d)) c4 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c4) a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}
var degrees, identity;
var init_decompose = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/transform/decompose.js"() {
    degrees = 180 / Math.PI;
    identity = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/transform/parse.js
function parseCss(value) {
  if (value === "none") return identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose_default(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}
function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}
var cssNode, cssRoot, cssView, svgNode;
var init_parse = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/transform/parse.js"() {
    init_decompose();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180) b += 360;
      else if (b - a2 > 180) a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s2[(o = q[i]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss, interpolateTransformSvg;
var init_transform = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/transform/index.js"() {
    init_number2();
    init_parse();
    interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/zoom.js
function cosh(x5) {
  return ((x5 = Math.exp(x5)) + 1 / x5) / 2;
}
function sinh(x5) {
  return ((x5 = Math.exp(x5)) - 1 / x5) / 2;
}
function tanh(x5) {
  return ((x5 = Math.exp(2 * x5)) - 1) / (x5 + 1);
}
function zoom_default(p02, p1) {
  var ux0 = p02[0], uy0 = p02[1], w0 = p02[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  } else {
    var d1 = Math.sqrt(d2), b02 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b12 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b02 * b02 + 1) - b02), r1 = Math.log(Math.sqrt(b12 * b12 + 1) - b12);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s2 = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s2 + r0)
      ];
    };
  }
  i.duration = S * 1e3;
  return i;
}
var rho, rho2, rho4, epsilon2;
var init_zoom = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/zoom.js"() {
    rho = Math.SQRT2;
    rho2 = 2;
    rho4 = 4;
    epsilon2 = 1e-12;
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start2, end) {
    var h = hue2((start2 = hsl(start2)).h, (end = hsl(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.h = h(t);
      start2.s = s2(t);
      start2.l = l(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  };
}
var hsl_default, hslLong;
var init_hsl = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/hsl.js"() {
    init_src6();
    init_color2();
    hsl_default = hsl2(hue);
    hslLong = hsl2(nogamma);
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/lab.js
function lab2(start2, end) {
  var l = nogamma((start2 = lab(start2)).l, (end = lab(end)).l), a2 = nogamma(start2.a, end.a), b = nogamma(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
  return function(t) {
    start2.l = l(t);
    start2.a = a2(t);
    start2.b = b(t);
    start2.opacity = opacity(t);
    return start2 + "";
  };
}
var init_lab2 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/lab.js"() {
    init_src6();
    init_color2();
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start2, end) {
    var h = hue2((start2 = hcl(start2)).h, (end = hcl(end)).h), c4 = nogamma(start2.c, end.c), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.h = h(t);
      start2.c = c4(t);
      start2.l = l(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  };
}
var hcl_default, hclLong;
var init_hcl = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/hcl.js"() {
    init_src6();
    init_color2();
    hcl_default = hcl2(hue);
    hclLong = hcl2(nogamma);
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y5) {
    y5 = +y5;
    function cubehelix3(start2, end) {
      var h = hue2((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s2 = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h(t);
        start2.s = s2(t);
        start2.l = l(Math.pow(t, y5));
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default, cubehelixLong;
var init_cubehelix2 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/cubehelix.js"() {
    init_src6();
    init_color2();
    cubehelix_default = cubehelix2(hue);
    cubehelixLong = cubehelix2(nogamma);
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/piecewise.js
function piecewise(interpolate, values) {
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate(v, v = values[++i]);
  return function(t) {
    var i2 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i2](t - i2);
  };
}
var init_piecewise = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/piecewise.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/quantize.js
function quantize_default(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
}
var init_quantize = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/quantize.js"() {
  }
});

// node_modules/c3/node_modules/d3-interpolate/src/index.js
var init_src7 = __esm({
  "node_modules/c3/node_modules/d3-interpolate/src/index.js"() {
    init_value();
    init_array3();
    init_basis();
    init_basisClosed();
    init_date();
    init_discrete();
    init_hue();
    init_number2();
    init_numberArray();
    init_object();
    init_round();
    init_string();
    init_transform();
    init_zoom();
    init_rgb();
    init_hsl();
    init_lab2();
    init_hcl();
    init_cubehelix2();
    init_piecewise();
    init_quantize();
  }
});

// node_modules/c3/node_modules/d3-timer/src/timer.js
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t03, t13 = taskHead, t22, time = Infinity;
  while (t13) {
    if (t13._call) {
      if (time > t13._time) time = t13._time;
      t03 = t13, t13 = t13._next;
    } else {
      t22 = t13._next, t13._next = null;
      t13 = t03 ? t03._next = t22 : taskHead = t22;
    }
  }
  taskTail = t03;
  sleep(time);
}
function sleep(time) {
  if (frame) return;
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow;
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame;
var init_timer = __esm({
  "node_modules/c3/node_modules/d3-timer/src/timer.js"() {
    frame = 0;
    timeout = 0;
    interval = 0;
    pokeDelay = 1e3;
    clockLast = 0;
    clockNow = 0;
    clockSkew = 0;
    clock = typeof performance === "object" && performance.now ? performance : Date;
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
      setTimeout(f, 17);
    };
    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };
  }
});

// node_modules/c3/node_modules/d3-timer/src/timeout.js
function timeout_default(callback, delay, time) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
var init_timeout = __esm({
  "node_modules/c3/node_modules/d3-timer/src/timeout.js"() {
    init_timer();
  }
});

// node_modules/c3/node_modules/d3-timer/src/interval.js
function interval_default(callback, delay, time) {
  var t = new Timer(), total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}
var init_interval = __esm({
  "node_modules/c3/node_modules/d3-timer/src/interval.js"() {
    init_timer();
  }
});

// node_modules/c3/node_modules/d3-timer/src/index.js
var init_src8 = __esm({
  "node_modules/c3/node_modules/d3-timer/src/index.js"() {
    init_timer();
    init_timeout();
    init_interval();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/schedule.js
function schedule_default(node, name, id2, index2, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id2 in schedules) return;
  create(node, id2, {
    name,
    index: index2,
    // For context during callback.
    group,
    // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}
function set2(node, id2) {
  var schedule = get2(node, id2);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}
function get2(node, id2) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id2])) throw new Error("transition not found");
  return schedule;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule, 0, self2.time);
  function schedule(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed) start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED) return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name) continue;
      if (o.state === STARTED) return timeout_default(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout_default(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING) return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules) return;
    delete node.__transition;
  }
}
var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED;
var init_schedule = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/schedule.js"() {
    init_src3();
    init_src8();
    emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
    emptyTween = [];
    CREATED = 0;
    SCHEDULED = 1;
    STARTING = 2;
    STARTED = 3;
    RUNNING = 4;
    ENDING = 5;
    ENDED = 6;
  }
});

// node_modules/c3/node_modules/d3-transition/src/interrupt.js
function interrupt_default(node, name) {
  var schedules = node.__transition, schedule, active, empty3 = true, i;
  if (!schedules) return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
      empty3 = false;
      continue;
    }
    active = schedule.state > STARTING && schedule.state < ENDING;
    schedule.state = ENDED;
    schedule.timer.stop();
    schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
  }
  if (empty3) delete node.__transition;
}
var init_interrupt = __esm({
  "node_modules/c3/node_modules/d3-transition/src/interrupt.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/selection/interrupt.js
function interrupt_default2(name) {
  return this.each(function() {
    interrupt_default(this, name);
  });
}
var init_interrupt2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/selection/interrupt.js"() {
    init_interrupt();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/tween.js
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error();
  return function() {
    var schedule = set2(this, id2), tween = schedule.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }
    schedule.tween = tween1;
  };
}
function tween_default(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get2(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition2, name, value) {
  var id2 = transition2._id;
  transition2.each(function() {
    var schedule = set2(this, id2);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get2(node, id2).value[name];
  };
}
var init_tween = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/tween.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/interpolate.js
function interpolate_default(a2, b) {
  var c4;
  return (typeof b === "number" ? number_default2 : b instanceof color ? rgb_default : (c4 = color(b)) ? (b = c4, rgb_default) : string_default)(a2, b);
}
var init_interpolate = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/interpolate.js"() {
    init_src6();
    init_src7();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/attr.js
function attrRemove2(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS2(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrConstantNS2(fullname, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function attrFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attrFunctionNS2(fullname, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function attr_default2(name, value) {
  var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
}
var init_attr2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/attr.js"() {
    init_src7();
    init_src4();
    init_tween();
    init_interpolate();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/attrTween.js
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t03, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t03 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t03;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t03, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t03 = (i0 = i) && attrInterpolate(name, i);
    return t03;
  }
  tween._value = value;
  return tween;
}
function attrTween_default(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  var fullname = namespace_default(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
var init_attrTween = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/attrTween.js"() {
    init_src4();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/delay.js
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function delay_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
}
var init_delay = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/delay.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/duration.js
function durationFunction(id2, value) {
  return function() {
    set2(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set2(this, id2).duration = value;
  };
}
function duration_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
}
var init_duration = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/duration.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/ease.js
function easeConstant(id2, value) {
  if (typeof value !== "function") throw new Error();
  return function() {
    set2(this, id2).ease = value;
  };
}
function ease_default(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
}
var init_ease = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/ease.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/filter.js
function filter_default2(match) {
  if (typeof match !== "function") match = matcher_default(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
var init_filter2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/filter.js"() {
    init_src4();
    init_transition2();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/merge.js
function merge_default3(transition2) {
  if (transition2._id !== this._id) throw new Error();
  for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
var init_merge3 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/merge.js"() {
    init_transition2();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/on.js
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set2;
  return function() {
    var schedule = sit(this, id2), on = schedule.on;
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
  };
}
function on_default2(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}
var init_on2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/on.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/remove.js
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id2) return;
    if (parent) parent.removeChild(this);
  };
}
function remove_default2() {
  return this.on("end.remove", removeFunction(this._id));
}
var init_remove2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/remove.js"() {
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/select.js
function select_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function") select = selector_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}
var init_select3 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/select.js"() {
    init_src4();
    init_transition2();
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/selectAll.js
function selectAll_default3(select) {
  var name = this._name, id2 = this._id;
  if (typeof select !== "function") select = selectorAll_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k2 = 0, l = children.length; k2 < l; ++k2) {
          if (child = children[k2]) {
            schedule_default(child, name, id2, k2, children, inherit2);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}
var init_selectAll3 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/selectAll.js"() {
    init_src4();
    init_transition2();
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/selection.js
function selection_default2() {
  return new Selection2(this._groups, this._parents);
}
var Selection2;
var init_selection2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/selection.js"() {
    init_src4();
    Selection2 = selection_default.prototype.constructor;
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/style.js
function styleNull(name, interpolate) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
  };
}
function styleRemove2(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant2(name, interpolate, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
  };
}
function styleFunction2(name, interpolate, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event2 = "end." + key, remove2;
  return function() {
    var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event2, listener0 = listener);
    schedule.on = on1;
  };
}
function style_default2(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
}
var init_style2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/style.js"() {
    init_src7();
    init_src4();
    init_schedule();
    init_tween();
    init_interpolate();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/styleTween.js
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function styleTween_default(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
var init_styleTween = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/styleTween.js"() {
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/text.js
function textConstant2(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction2(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function text_default2(value) {
  return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
}
var init_text2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/text.js"() {
    init_tween();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/textTween.js
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t03, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t03 = (i0 = i) && textInterpolate(i);
    return t03;
  }
  tween._value = value;
  return tween;
}
function textTween_default(value) {
  var key = "text";
  if (arguments.length < 1) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error();
  return this.tween(key, textTween(value));
}
var init_textTween = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/textTween.js"() {
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/transition.js
function transition_default() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get2(node, id0);
        schedule_default(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}
var init_transition = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/transition.js"() {
    init_transition2();
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/end.js
function end_default() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0) resolve();
    } };
    that.each(function() {
      var schedule = set2(this, id2), on = schedule.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule.on = on1;
    });
  });
}
var init_end = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/end.js"() {
    init_schedule();
  }
});

// node_modules/c3/node_modules/d3-transition/src/transition/index.js
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function transition(name) {
  return selection_default().transition(name);
}
function newId() {
  return ++id;
}
var id, selection_prototype;
var init_transition2 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/transition/index.js"() {
    init_src4();
    init_attr2();
    init_attrTween();
    init_delay();
    init_duration();
    init_ease();
    init_filter2();
    init_merge3();
    init_on2();
    init_remove2();
    init_select3();
    init_selectAll3();
    init_selection2();
    init_style2();
    init_styleTween();
    init_text2();
    init_textTween();
    init_transition();
    init_tween();
    init_end();
    id = 0;
    selection_prototype = selection_default.prototype;
    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: select_default3,
      selectAll: selectAll_default3,
      filter: filter_default2,
      merge: merge_default3,
      selection: selection_default2,
      transition: transition_default,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: on_default2,
      attr: attr_default2,
      attrTween: attrTween_default,
      style: style_default2,
      styleTween: styleTween_default,
      text: text_default2,
      textTween: textTween_default,
      remove: remove_default2,
      tween: tween_default,
      delay: delay_default,
      duration: duration_default,
      ease: ease_default,
      end: end_default
    };
  }
});

// node_modules/c3/node_modules/d3-ease/src/linear.js
function linear2(t) {
  return +t;
}
var init_linear = __esm({
  "node_modules/c3/node_modules/d3-ease/src/linear.js"() {
  }
});

// node_modules/c3/node_modules/d3-ease/src/quad.js
function quadIn(t) {
  return t * t;
}
function quadOut(t) {
  return t * (2 - t);
}
function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
var init_quad = __esm({
  "node_modules/c3/node_modules/d3-ease/src/quad.js"() {
  }
});

// node_modules/c3/node_modules/d3-ease/src/cubic.js
function cubicIn(t) {
  return t * t * t;
}
function cubicOut(t) {
  return --t * t * t + 1;
}
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
var init_cubic = __esm({
  "node_modules/c3/node_modules/d3-ease/src/cubic.js"() {
  }
});

// node_modules/c3/node_modules/d3-ease/src/poly.js
var exponent, polyIn, polyOut, polyInOut;
var init_poly = __esm({
  "node_modules/c3/node_modules/d3-ease/src/poly.js"() {
    exponent = 3;
    polyIn = function custom(e) {
      e = +e;
      function polyIn2(t) {
        return Math.pow(t, e);
      }
      polyIn2.exponent = custom;
      return polyIn2;
    }(exponent);
    polyOut = function custom2(e) {
      e = +e;
      function polyOut2(t) {
        return 1 - Math.pow(1 - t, e);
      }
      polyOut2.exponent = custom2;
      return polyOut2;
    }(exponent);
    polyInOut = function custom3(e) {
      e = +e;
      function polyInOut2(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
      }
      polyInOut2.exponent = custom3;
      return polyInOut2;
    }(exponent);
  }
});

// node_modules/c3/node_modules/d3-ease/src/sin.js
function sinIn(t) {
  return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
}
function sinOut(t) {
  return Math.sin(t * halfPi);
}
function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
var pi, halfPi;
var init_sin = __esm({
  "node_modules/c3/node_modules/d3-ease/src/sin.js"() {
    pi = Math.PI;
    halfPi = pi / 2;
  }
});

// node_modules/c3/node_modules/d3-ease/src/math.js
function tpmt(x5) {
  return (Math.pow(2, -10 * x5) - 9765625e-10) * 1.0009775171065494;
}
var init_math2 = __esm({
  "node_modules/c3/node_modules/d3-ease/src/math.js"() {
  }
});

// node_modules/c3/node_modules/d3-ease/src/exp.js
function expIn(t) {
  return tpmt(1 - +t);
}
function expOut(t) {
  return 1 - tpmt(t);
}
function expInOut(t) {
  return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
}
var init_exp = __esm({
  "node_modules/c3/node_modules/d3-ease/src/exp.js"() {
    init_math2();
  }
});

// node_modules/c3/node_modules/d3-ease/src/circle.js
function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}
function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}
function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
var init_circle = __esm({
  "node_modules/c3/node_modules/d3-ease/src/circle.js"() {
  }
});

// node_modules/c3/node_modules/d3-ease/src/bounce.js
function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}
function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}
function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
var b1, b2, b3, b4, b5, b6, b7, b8, b9, b0;
var init_bounce = __esm({
  "node_modules/c3/node_modules/d3-ease/src/bounce.js"() {
    b1 = 4 / 11;
    b2 = 6 / 11;
    b3 = 8 / 11;
    b4 = 3 / 4;
    b5 = 9 / 11;
    b6 = 10 / 11;
    b7 = 15 / 16;
    b8 = 21 / 22;
    b9 = 63 / 64;
    b0 = 1 / b1 / b1;
  }
});

// node_modules/c3/node_modules/d3-ease/src/back.js
var overshoot, backIn, backOut, backInOut;
var init_back = __esm({
  "node_modules/c3/node_modules/d3-ease/src/back.js"() {
    overshoot = 1.70158;
    backIn = function custom4(s2) {
      s2 = +s2;
      function backIn2(t) {
        return (t = +t) * t * (s2 * (t - 1) + t);
      }
      backIn2.overshoot = custom4;
      return backIn2;
    }(overshoot);
    backOut = function custom5(s2) {
      s2 = +s2;
      function backOut2(t) {
        return --t * t * ((t + 1) * s2 + t) + 1;
      }
      backOut2.overshoot = custom5;
      return backOut2;
    }(overshoot);
    backInOut = function custom6(s2) {
      s2 = +s2;
      function backInOut2(t) {
        return ((t *= 2) < 1 ? t * t * ((s2 + 1) * t - s2) : (t -= 2) * t * ((s2 + 1) * t + s2) + 2) / 2;
      }
      backInOut2.overshoot = custom6;
      return backInOut2;
    }(overshoot);
  }
});

// node_modules/c3/node_modules/d3-ease/src/elastic.js
var tau, amplitude, period, elasticIn, elasticOut, elasticInOut;
var init_elastic = __esm({
  "node_modules/c3/node_modules/d3-ease/src/elastic.js"() {
    init_math2();
    tau = 2 * Math.PI;
    amplitude = 1;
    period = 0.3;
    elasticIn = function custom7(a2, p) {
      var s2 = Math.asin(1 / (a2 = Math.max(1, a2))) * (p /= tau);
      function elasticIn2(t) {
        return a2 * tpmt(- --t) * Math.sin((s2 - t) / p);
      }
      elasticIn2.amplitude = function(a3) {
        return custom7(a3, p * tau);
      };
      elasticIn2.period = function(p2) {
        return custom7(a2, p2);
      };
      return elasticIn2;
    }(amplitude, period);
    elasticOut = function custom8(a2, p) {
      var s2 = Math.asin(1 / (a2 = Math.max(1, a2))) * (p /= tau);
      function elasticOut2(t) {
        return 1 - a2 * tpmt(t = +t) * Math.sin((t + s2) / p);
      }
      elasticOut2.amplitude = function(a3) {
        return custom8(a3, p * tau);
      };
      elasticOut2.period = function(p2) {
        return custom8(a2, p2);
      };
      return elasticOut2;
    }(amplitude, period);
    elasticInOut = function custom9(a2, p) {
      var s2 = Math.asin(1 / (a2 = Math.max(1, a2))) * (p /= tau);
      function elasticInOut2(t) {
        return ((t = t * 2 - 1) < 0 ? a2 * tpmt(-t) * Math.sin((s2 - t) / p) : 2 - a2 * tpmt(t) * Math.sin((s2 + t) / p)) / 2;
      }
      elasticInOut2.amplitude = function(a3) {
        return custom9(a3, p * tau);
      };
      elasticInOut2.period = function(p2) {
        return custom9(a2, p2);
      };
      return elasticInOut2;
    }(amplitude, period);
  }
});

// node_modules/c3/node_modules/d3-ease/src/index.js
var init_src9 = __esm({
  "node_modules/c3/node_modules/d3-ease/src/index.js"() {
    init_linear();
    init_quad();
    init_cubic();
    init_poly();
    init_sin();
    init_exp();
    init_circle();
    init_bounce();
    init_back();
    init_elastic();
  }
});

// node_modules/c3/node_modules/d3-transition/src/selection/transition.js
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = now(), defaultTiming;
    }
  }
  return timing;
}
function transition_default2(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}
var defaultTiming;
var init_transition3 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/selection/transition.js"() {
    init_transition2();
    init_schedule();
    init_src9();
    init_src8();
    defaultTiming = {
      time: null,
      // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };
  }
});

// node_modules/c3/node_modules/d3-transition/src/selection/index.js
var init_selection3 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/selection/index.js"() {
    init_src4();
    init_interrupt2();
    init_transition3();
    selection_default.prototype.interrupt = interrupt_default2;
    selection_default.prototype.transition = transition_default2;
  }
});

// node_modules/c3/node_modules/d3-transition/src/active.js
function active_default(node, name) {
  var schedules = node.__transition, schedule, i;
  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
        return new Transition([[node]], root2, name, +i);
      }
    }
  }
  return null;
}
var root2;
var init_active = __esm({
  "node_modules/c3/node_modules/d3-transition/src/active.js"() {
    init_transition2();
    init_schedule();
    root2 = [null];
  }
});

// node_modules/c3/node_modules/d3-transition/src/index.js
var init_src10 = __esm({
  "node_modules/c3/node_modules/d3-transition/src/index.js"() {
    init_selection3();
    init_transition2();
    init_active();
    init_interrupt();
  }
});

// node_modules/c3/node_modules/d3-brush/src/constant.js
function constant_default5(x5) {
  return function() {
    return x5;
  };
}
var init_constant5 = __esm({
  "node_modules/c3/node_modules/d3-brush/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-brush/src/event.js
function event_default(target, type2, selection2) {
  this.target = target;
  this.type = type2;
  this.selection = selection2;
}
var init_event2 = __esm({
  "node_modules/c3/node_modules/d3-brush/src/event.js"() {
  }
});

// node_modules/c3/node_modules/d3-brush/src/noevent.js
function nopropagation2() {
  event.stopImmediatePropagation();
}
function noevent_default2() {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var init_noevent2 = __esm({
  "node_modules/c3/node_modules/d3-brush/src/noevent.js"() {
    init_src4();
  }
});

// node_modules/c3/node_modules/d3-brush/src/brush.js
function number1(e) {
  return [+e[0], +e[1]];
}
function number2(e) {
  return [number1(e[0]), number1(e[1])];
}
function toucher(identifier) {
  return function(target) {
    return touch_default(target, event.touches, identifier);
  };
}
function type(t) {
  return { type: t };
}
function defaultFilter2() {
  return !event.ctrlKey && !event.button;
}
function defaultExtent() {
  var svg2 = this.ownerSVGElement || this;
  if (svg2.hasAttribute("viewBox")) {
    svg2 = svg2.viewBox.baseVal;
    return [[svg2.x, svg2.y], [svg2.x + svg2.width, svg2.y + svg2.height]];
  }
  return [[0, 0], [svg2.width.baseVal.value, svg2.height.baseVal.value]];
}
function defaultTouchable2() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function local2(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}
function empty2(extent) {
  return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}
function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}
function brushX() {
  return brush(X);
}
function brushY() {
  return brush(Y);
}
function brush_default() {
  return brush(XY);
}
function brush(dim) {
  var extent = defaultExtent, filter = defaultFilter2, touchable = defaultTouchable2, keys = true, listeners = dispatch_default("start", "brush", "end"), handleSize = 6, touchending;
  function brush2(group) {
    var overlay = group.property("__brush", initialize).selectAll(".overlay").data([type("overlay")]);
    overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
      var extent2 = local2(this).extent;
      select_default2(this).attr("x", extent2[0][0]).attr("y", extent2[0][1]).attr("width", extent2[1][0] - extent2[0][0]).attr("height", extent2[1][1] - extent2[0][1]);
    });
    group.selectAll(".selection").data([type("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var handle = group.selectAll(".handle").data(dim.handles, function(d) {
      return d.type;
    });
    handle.exit().remove();
    handle.enter().append("rect").attr("class", function(d) {
      return "handle handle--" + d.type;
    }).attr("cursor", function(d) {
      return cursors[d.type];
    });
    group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  brush2.move = function(group, selection2) {
    if (group.selection) {
      group.on("start.brush", function() {
        emitter(this, arguments).beforestart().start();
      }).on("interrupt.brush end.brush", function() {
        emitter(this, arguments).end();
      }).tween("brush", function() {
        var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(this, arguments) : selection2, state.extent), i = value_default(selection0, selection1);
        function tween(t) {
          state.selection = t === 1 && selection1 === null ? null : i(t);
          redraw.call(that);
          emit.brush();
        }
        return selection0 !== null && selection1 !== null ? tween : tween(1);
      });
    } else {
      group.each(function() {
        var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection2 === "function" ? selection2.apply(that, args) : selection2, state.extent), emit = emitter(that, args).beforestart();
        interrupt_default(that);
        state.selection = selection1 === null ? null : selection1;
        redraw.call(that);
        emit.start().brush().end();
      });
    }
  };
  brush2.clear = function(group) {
    brush2.move(group, null);
  };
  function redraw() {
    var group = select_default2(this), selection2 = local2(this).selection;
    if (selection2) {
      group.selectAll(".selection").style("display", null).attr("x", selection2[0][0]).attr("y", selection2[0][1]).attr("width", selection2[1][0] - selection2[0][0]).attr("height", selection2[1][1] - selection2[0][1]);
      group.selectAll(".handle").style("display", null).attr("x", function(d) {
        return d.type[d.type.length - 1] === "e" ? selection2[1][0] - handleSize / 2 : selection2[0][0] - handleSize / 2;
      }).attr("y", function(d) {
        return d.type[0] === "s" ? selection2[1][1] - handleSize / 2 : selection2[0][1] - handleSize / 2;
      }).attr("width", function(d) {
        return d.type === "n" || d.type === "s" ? selection2[1][0] - selection2[0][0] + handleSize : handleSize;
      }).attr("height", function(d) {
        return d.type === "e" || d.type === "w" ? selection2[1][1] - selection2[0][1] + handleSize : handleSize;
      });
    } else {
      group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
  }
  function emitter(that, args, clean) {
    var emit = that.__brush.emitter;
    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
  }
  function Emitter(that, args, clean) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
    this.clean = clean;
  }
  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      else this.emit("brush");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type2) {
      customEvent(new event_default(brush2, type2, dim.output(this.state.selection)), listeners.apply, listeners, [type2, this.that, this.args]);
    }
  };
  function started() {
    if (touchending && !event.touches) return;
    if (!filter.apply(this, arguments)) return;
    var that = this, type2 = event.target.__data__.type, mode = (keys && event.metaKey ? type2 = "overlay" : type2) === "selection" ? MODE_DRAG : keys && event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type2], signY = dim === X ? null : signsY[type2], state = local2(that), extent2 = state.extent, selection2 = state.selection, W = extent2[0][0], w0, w1, N = extent2[0][1], n0, n1, E2 = extent2[1][0], e0, e1, S = extent2[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event.shiftKey, lockX, lockY, pointer = event.touches ? toucher(event.changedTouches[0].identifier) : mouse_default, point0 = pointer(that), point6 = point0, emit = emitter(that, arguments, true).beforestart();
    if (type2 === "overlay") {
      if (selection2) moving = true;
      state.selection = selection2 = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E2 : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection2[0][0];
      n0 = selection2[0][1];
      e0 = selection2[1][0];
      s0 = selection2[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = select_default2(that).attr("pointer-events", "none");
    var overlay = group.selectAll(".overlay").attr("cursor", cursors[type2]);
    if (event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = select_default2(event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
      if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
      nodrag_default(event.view);
    }
    nopropagation2();
    interrupt_default(that);
    redraw.call(that);
    emit.start();
    function moved() {
      var point1 = pointer(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point6[0]) > Math.abs(point1[1] - point6[1])) lockY = true;
        else lockX = true;
      }
      point6 = point1;
      moving = true;
      noevent_default2();
      move();
    }
    function move() {
      var t;
      dx = point6[0] - point0[0];
      dy = point6[1] - point0[1];
      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E2 - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E2 - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E2 - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E2, w0 - dx * signX)), e1 = Math.max(W, Math.min(E2, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }
      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type2 in flipX) overlay.attr("cursor", cursors[type2 = flipX[type2]]);
      }
      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type2 in flipY) overlay.attr("cursor", cursors[type2 = flipY[type2]]);
      }
      if (state.selection) selection2 = state.selection;
      if (lockX) w1 = selection2[0][0], e1 = selection2[1][0];
      if (lockY) n1 = selection2[0][1], s1 = selection2[1][1];
      if (selection2[0][0] !== w1 || selection2[0][1] !== n1 || selection2[1][0] !== e1 || selection2[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }
    function ended() {
      nopropagation2();
      if (event.touches) {
        if (event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() {
          touchending = null;
        }, 500);
      } else {
        yesdrag(event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection2 = state.selection;
      if (empty2(selection2)) state.selection = null, redraw.call(that);
      emit.end();
    }
    function keydowned() {
      switch (event.keyCode) {
        case 16: {
          shifting = signX && signY;
          break;
        }
        case 18: {
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: {
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx;
            else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy;
            else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default:
          return;
      }
      noevent_default2();
    }
    function keyupped() {
      switch (event.keyCode) {
        case 16: {
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: {
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1;
            else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1;
            else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: {
          if (mode === MODE_SPACE) {
            if (event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1;
              else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1;
              else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type2]);
            move();
          }
          break;
        }
        default:
          return;
      }
      noevent_default2();
    }
  }
  function touchmoved() {
    emitter(this, arguments).moved();
  }
  function touchended() {
    emitter(this, arguments).ended();
  }
  function initialize() {
    var state = this.__brush || { selection: null };
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }
  brush2.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default5(number2(_)), brush2) : extent;
  };
  brush2.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant_default5(!!_), brush2) : filter;
  };
  brush2.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default5(!!_), brush2) : touchable;
  };
  brush2.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush2) : handleSize;
  };
  brush2.keyModifiers = function(_) {
    return arguments.length ? (keys = !!_, brush2) : keys;
  };
  brush2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush2 : value;
  };
  return brush2;
}
var MODE_DRAG, MODE_SPACE, MODE_HANDLE, MODE_CENTER, X, Y, XY, cursors, flipX, flipY, signsX, signsY;
var init_brush = __esm({
  "node_modules/c3/node_modules/d3-brush/src/brush.js"() {
    init_src3();
    init_src5();
    init_src7();
    init_src4();
    init_src10();
    init_constant5();
    init_event2();
    init_noevent2();
    MODE_DRAG = { name: "drag" };
    MODE_SPACE = { name: "space" };
    MODE_HANDLE = { name: "handle" };
    MODE_CENTER = { name: "center" };
    X = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x5, e) {
        return x5 == null ? null : [[+x5[0], e[0][1]], [+x5[1], e[1][1]]];
      },
      output: function(xy) {
        return xy && [xy[0][0], xy[1][0]];
      }
    };
    Y = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y5, e) {
        return y5 == null ? null : [[e[0][0], +y5[0]], [e[1][0], +y5[1]]];
      },
      output: function(xy) {
        return xy && [xy[0][1], xy[1][1]];
      }
    };
    XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) {
        return xy == null ? null : number2(xy);
      },
      output: function(xy) {
        return xy;
      }
    };
    cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };
    flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };
    flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };
    signsX = {
      overlay: 1,
      selection: 1,
      n: null,
      e: 1,
      s: null,
      w: -1,
      nw: -1,
      ne: 1,
      se: 1,
      sw: -1
    };
    signsY = {
      overlay: 1,
      selection: 1,
      n: -1,
      e: null,
      s: 1,
      w: null,
      nw: -1,
      ne: -1,
      se: 1,
      sw: 1
    };
  }
});

// node_modules/c3/node_modules/d3-brush/src/index.js
var init_src11 = __esm({
  "node_modules/c3/node_modules/d3-brush/src/index.js"() {
    init_brush();
  }
});

// node_modules/c3/node_modules/d3-chord/src/math.js
var cos, sin, pi2, halfPi2, tau2, max;
var init_math3 = __esm({
  "node_modules/c3/node_modules/d3-chord/src/math.js"() {
    cos = Math.cos;
    sin = Math.sin;
    pi2 = Math.PI;
    halfPi2 = pi2 / 2;
    tau2 = pi2 * 2;
    max = Math.max;
  }
});

// node_modules/c3/node_modules/d3-chord/src/chord.js
function compareValue(compare) {
  return function(a2, b) {
    return compare(
      a2.source.value + a2.target.value,
      b.source.value + b.target.value
    );
  };
}
function chord_default() {
  var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
  function chord(matrix) {
    var n = matrix.length, groupSums = [], groupIndex = range_default(n), subgroupIndex = [], chords = [], groups = chords.groups = new Array(n), subgroups = new Array(n * n), k2, x5, x06, dx, i, j;
    k2 = 0, i = -1;
    while (++i < n) {
      x5 = 0, j = -1;
      while (++j < n) {
        x5 += matrix[i][j];
      }
      groupSums.push(x5);
      subgroupIndex.push(range_default(n));
      k2 += x5;
    }
    if (sortGroups) groupIndex.sort(function(a2, b) {
      return sortGroups(groupSums[a2], groupSums[b]);
    });
    if (sortSubgroups) subgroupIndex.forEach(function(d, i2) {
      d.sort(function(a2, b) {
        return sortSubgroups(matrix[i2][a2], matrix[i2][b]);
      });
    });
    k2 = max(0, tau2 - padAngle * n) / k2;
    dx = k2 ? padAngle : tau2 / n;
    x5 = 0, i = -1;
    while (++i < n) {
      x06 = x5, j = -1;
      while (++j < n) {
        var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x5, a1 = x5 += v * k2;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }
      groups[di] = {
        index: di,
        startAngle: x06,
        endAngle: x5,
        value: groupSums[di]
      };
      x5 += dx;
    }
    i = -1;
    while (++i < n) {
      j = i - 1;
      while (++j < n) {
        var source = subgroups[j * n + i], target = subgroups[i * n + j];
        if (source.value || target.value) {
          chords.push(source.value < target.value ? { source: target, target: source } : { source, target });
        }
      }
    }
    return sortChords ? chords.sort(sortChords) : chords;
  }
  chord.padAngle = function(_) {
    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;
  };
  chord.sortGroups = function(_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };
  chord.sortSubgroups = function(_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };
  chord.sortChords = function(_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };
  return chord;
}
var init_chord = __esm({
  "node_modules/c3/node_modules/d3-chord/src/chord.js"() {
    init_src();
    init_math3();
  }
});

// node_modules/c3/node_modules/d3-chord/src/array.js
var slice3;
var init_array4 = __esm({
  "node_modules/c3/node_modules/d3-chord/src/array.js"() {
    slice3 = Array.prototype.slice;
  }
});

// node_modules/c3/node_modules/d3-chord/src/constant.js
function constant_default6(x5) {
  return function() {
    return x5;
  };
}
var init_constant6 = __esm({
  "node_modules/c3/node_modules/d3-chord/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-path/src/path.js
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
var pi3, tau3, epsilon3, tauEpsilon, path_default;
var init_path = __esm({
  "node_modules/c3/node_modules/d3-path/src/path.js"() {
    pi3 = Math.PI;
    tau3 = 2 * pi3;
    epsilon3 = 1e-6;
    tauEpsilon = tau3 - epsilon3;
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x5, y5) {
        this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x5, y5) {
        this._ += "L" + (this._x1 = +x5) + "," + (this._y1 = +y5);
      },
      quadraticCurveTo: function(x12, y12, x5, y5) {
        this._ += "Q" + +x12 + "," + +y12 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
      },
      bezierCurveTo: function(x12, y12, x22, y22, x5, y5) {
        this._ += "C" + +x12 + "," + +y12 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x5) + "," + (this._y1 = +y5);
      },
      arcTo: function(x12, y12, x22, y22, r) {
        x12 = +x12, y12 = +y12, x22 = +x22, y22 = +y22, r = +r;
        var x06 = this._x1, y06 = this._y1, x21 = x22 - x12, y21 = y22 - y12, x01 = x06 - x12, y01 = y06 - y12, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0) throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x12) + "," + (this._y1 = y12);
        } else if (!(l01_2 > epsilon3)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon3) || !r) {
          this._ += "L" + (this._x1 = x12) + "," + (this._y1 = y12);
        } else {
          var x20 = x22 - x06, y20 = y22 - y06, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi3 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon3) {
            this._ += "L" + (x12 + t01 * x01) + "," + (y12 + t01 * y01);
          }
          this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x12 + t21 * x21) + "," + (this._y1 = y12 + t21 * y21);
        }
      },
      arc: function(x5, y5, r, a0, a1, ccw) {
        x5 = +x5, y5 = +y5, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x06 = x5 + dx, y06 = y5 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0) throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._ += "M" + x06 + "," + y06;
        } else if (Math.abs(this._x1 - x06) > epsilon3 || Math.abs(this._y1 - y06) > epsilon3) {
          this._ += "L" + x06 + "," + y06;
        }
        if (!r) return;
        if (da < 0) da = da % tau3 + tau3;
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x5 - dx) + "," + (y5 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x06) + "," + (this._y1 = y06);
        } else if (da > epsilon3) {
          this._ += "A" + r + "," + r + ",0," + +(da >= pi3) + "," + cw + "," + (this._x1 = x5 + r * Math.cos(a1)) + "," + (this._y1 = y5 + r * Math.sin(a1));
        }
      },
      rect: function(x5, y5, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x5) + "," + (this._y0 = this._y1 = +y5) + "h" + +w + "v" + +h + "h" + -w + "Z";
      },
      toString: function() {
        return this._;
      }
    };
    path_default = path;
  }
});

// node_modules/c3/node_modules/d3-path/src/index.js
var init_src12 = __esm({
  "node_modules/c3/node_modules/d3-path/src/index.js"() {
    init_path();
  }
});

// node_modules/c3/node_modules/d3-chord/src/ribbon.js
function defaultSource(d) {
  return d.source;
}
function defaultTarget(d) {
  return d.target;
}
function defaultRadius(d) {
  return d.radius;
}
function defaultStartAngle(d) {
  return d.startAngle;
}
function defaultEndAngle(d) {
  return d.endAngle;
}
function ribbon_default() {
  var source = defaultSource, target = defaultTarget, radius = defaultRadius, startAngle = defaultStartAngle, endAngle = defaultEndAngle, context = null;
  function ribbon() {
    var buffer, argv = slice3.call(arguments), s2 = source.apply(this, argv), t = target.apply(this, argv), sr = +radius.apply(this, (argv[0] = s2, argv)), sa0 = startAngle.apply(this, argv) - halfPi2, sa1 = endAngle.apply(this, argv) - halfPi2, sx0 = sr * cos(sa0), sy0 = sr * sin(sa0), tr = +radius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi2, ta1 = endAngle.apply(this, argv) - halfPi2;
    if (!context) context = buffer = path_default();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) {
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default6(+_), ribbon) : radius;
  };
  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default6(+_), ribbon) : startAngle;
  };
  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default6(+_), ribbon) : endAngle;
  };
  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };
  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };
  ribbon.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
  };
  return ribbon;
}
var init_ribbon = __esm({
  "node_modules/c3/node_modules/d3-chord/src/ribbon.js"() {
    init_array4();
    init_constant6();
    init_math3();
    init_src12();
  }
});

// node_modules/c3/node_modules/d3-chord/src/index.js
var init_src13 = __esm({
  "node_modules/c3/node_modules/d3-chord/src/index.js"() {
    init_chord();
    init_ribbon();
  }
});

// node_modules/d3-collection/src/map.js
function Map() {
}
function map2(object2, f) {
  var map5 = new Map();
  if (object2 instanceof Map) object2.each(function(value, key2) {
    map5.set(key2, value);
  });
  else if (Array.isArray(object2)) {
    var i = -1, n = object2.length, o;
    if (f == null) while (++i < n) map5.set(i, object2[i]);
    else while (++i < n) map5.set(f(o = object2[i], i, object2), o);
  } else if (object2) for (var key in object2) map5.set(key, object2[key]);
  return map5;
}
var prefix, map_default;
var init_map = __esm({
  "node_modules/d3-collection/src/map.js"() {
    prefix = "$";
    Map.prototype = map2.prototype = {
      constructor: Map,
      has: function(key) {
        return prefix + key in this;
      },
      get: function(key) {
        return this[prefix + key];
      },
      set: function(key, value) {
        this[prefix + key] = value;
        return this;
      },
      remove: function(key) {
        var property = prefix + key;
        return property in this && delete this[property];
      },
      clear: function() {
        for (var property in this) if (property[0] === prefix) delete this[property];
      },
      keys: function() {
        var keys = [];
        for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
        return keys;
      },
      values: function() {
        var values = [];
        for (var property in this) if (property[0] === prefix) values.push(this[property]);
        return values;
      },
      entries: function() {
        var entries = [];
        for (var property in this) if (property[0] === prefix) entries.push({ key: property.slice(1), value: this[property] });
        return entries;
      },
      size: function() {
        var size = 0;
        for (var property in this) if (property[0] === prefix) ++size;
        return size;
      },
      empty: function() {
        for (var property in this) if (property[0] === prefix) return false;
        return true;
      },
      each: function(f) {
        for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
      }
    };
    map_default = map2;
  }
});

// node_modules/d3-collection/src/nest.js
function nest_default() {
  var keys = [], sortKeys = [], sortValues, rollup, nest;
  function apply(array4, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array4.sort(sortValues);
      return rollup != null ? rollup(array4) : array4;
    }
    var i = -1, n = array4.length, key = keys[depth++], keyValue, value, valuesByKey = map_default(), values, result = createResult();
    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array4[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }
    valuesByKey.each(function(values2, key2) {
      setResult(result, key2, apply(values2, depth, createResult, setResult));
    });
    return result;
  }
  function entries(map5, depth) {
    if (++depth > keys.length) return map5;
    var array4, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array4 = map5.entries();
    else array4 = [], map5.each(function(v, k2) {
      array4.push({ key: k2, values: entries(v, depth) });
    });
    return sortKey != null ? array4.sort(function(a2, b) {
      return sortKey(a2.key, b.key);
    }) : array4;
  }
  return nest = {
    object: function(array4) {
      return apply(array4, 0, createObject, setObject);
    },
    map: function(array4) {
      return apply(array4, 0, createMap, setMap);
    },
    entries: function(array4) {
      return entries(apply(array4, 0, createMap, setMap), 0);
    },
    key: function(d) {
      keys.push(d);
      return nest;
    },
    sortKeys: function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    },
    sortValues: function(order) {
      sortValues = order;
      return nest;
    },
    rollup: function(f) {
      rollup = f;
      return nest;
    }
  };
}
function createObject() {
  return {};
}
function setObject(object2, key, value) {
  object2[key] = value;
}
function createMap() {
  return map_default();
}
function setMap(map5, key, value) {
  map5.set(key, value);
}
var init_nest = __esm({
  "node_modules/d3-collection/src/nest.js"() {
    init_map();
  }
});

// node_modules/d3-collection/src/set.js
function Set() {
}
function set3(object2, f) {
  var set4 = new Set();
  if (object2 instanceof Set) object2.each(function(value) {
    set4.add(value);
  });
  else if (object2) {
    var i = -1, n = object2.length;
    if (f == null) while (++i < n) set4.add(object2[i]);
    else while (++i < n) set4.add(f(object2[i], i, object2));
  }
  return set4;
}
var proto, set_default;
var init_set = __esm({
  "node_modules/d3-collection/src/set.js"() {
    init_map();
    proto = map_default.prototype;
    Set.prototype = set3.prototype = {
      constructor: Set,
      has: proto.has,
      add: function(value) {
        value += "";
        this[prefix + value] = value;
        return this;
      },
      remove: proto.remove,
      clear: proto.clear,
      values: proto.keys,
      size: proto.size,
      empty: proto.empty,
      each: proto.each
    };
    set_default = set3;
  }
});

// node_modules/d3-collection/src/keys.js
function keys_default(map5) {
  var keys = [];
  for (var key in map5) keys.push(key);
  return keys;
}
var init_keys = __esm({
  "node_modules/d3-collection/src/keys.js"() {
  }
});

// node_modules/d3-collection/src/values.js
function values_default(map5) {
  var values = [];
  for (var key in map5) values.push(map5[key]);
  return values;
}
var init_values = __esm({
  "node_modules/d3-collection/src/values.js"() {
  }
});

// node_modules/d3-collection/src/entries.js
function entries_default(map5) {
  var entries = [];
  for (var key in map5) entries.push({ key, value: map5[key] });
  return entries;
}
var init_entries = __esm({
  "node_modules/d3-collection/src/entries.js"() {
  }
});

// node_modules/d3-collection/src/index.js
var init_src14 = __esm({
  "node_modules/d3-collection/src/index.js"() {
    init_nest();
    init_set();
    init_map();
    init_keys();
    init_values();
    init_entries();
  }
});

// node_modules/c3/node_modules/d3-contour/src/array.js
var array2, slice4;
var init_array5 = __esm({
  "node_modules/c3/node_modules/d3-contour/src/array.js"() {
    array2 = Array.prototype;
    slice4 = array2.slice;
  }
});

// node_modules/c3/node_modules/d3-contour/src/ascending.js
function ascending_default2(a2, b) {
  return a2 - b;
}
var init_ascending2 = __esm({
  "node_modules/c3/node_modules/d3-contour/src/ascending.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/area.js
function area_default(ring) {
  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area;
}
var init_area = __esm({
  "node_modules/c3/node_modules/d3-contour/src/area.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/constant.js
function constant_default7(x5) {
  return function() {
    return x5;
  };
}
var init_constant7 = __esm({
  "node_modules/c3/node_modules/d3-contour/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/contains.js
function contains_default(ring, hole) {
  var i = -1, n = hole.length, c4;
  while (++i < n) if (c4 = ringContains(ring, hole[i])) return c4;
  return 0;
}
function ringContains(ring, point6) {
  var x5 = point6[0], y5 = point6[1], contains = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi6 = ring[i], xi = pi6[0], yi = pi6[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi6, pj, point6)) return 0;
    if (yi > y5 !== yj > y5 && x5 < (xj - xi) * (y5 - yi) / (yj - yi) + xi) contains = -contains;
  }
  return contains;
}
function segmentContains(a2, b, c4) {
  var i;
  return collinear(a2, b, c4) && within(a2[i = +(a2[0] === b[0])], c4[i], b[i]);
}
function collinear(a2, b, c4) {
  return (b[0] - a2[0]) * (c4[1] - a2[1]) === (c4[0] - a2[0]) * (b[1] - a2[1]);
}
function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}
var init_contains = __esm({
  "node_modules/c3/node_modules/d3-contour/src/contains.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/noop.js
function noop_default() {
}
var init_noop = __esm({
  "node_modules/c3/node_modules/d3-contour/src/noop.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/contours.js
function contours_default() {
  var dx = 1, dy = 1, threshold2 = sturges_default, smooth = smoothLinear;
  function contours(values) {
    var tz = threshold2(values);
    if (!Array.isArray(tz)) {
      var domain = extent_default(values), start2 = domain[0], stop = domain[1];
      tz = tickStep(start2, stop, tz);
      tz = range_default(Math.floor(start2 / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(ascending_default2);
    }
    return tz.map(function(value) {
      return contour(values, value);
    });
  }
  function contour(values, value) {
    var polygons = [], holes = [];
    isorings(values, value, function(ring) {
      smooth(ring, values, value);
      if (area_default(ring) > 0) polygons.push([ring]);
      else holes.push(ring);
    });
    holes.forEach(function(hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains_default((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });
    return {
      type: "MultiPolygon",
      value,
      coordinates: polygons
    };
  }
  function isorings(values, value, callback) {
    var fragmentByStart = new Array(), fragmentByEnd = new Array(), x5, y5, t03, t13, t22, t32;
    x5 = y5 = -1;
    t13 = values[0] >= value;
    cases[t13 << 1].forEach(stitch);
    while (++x5 < dx - 1) {
      t03 = t13, t13 = values[x5 + 1] >= value;
      cases[t03 | t13 << 1].forEach(stitch);
    }
    cases[t13 << 0].forEach(stitch);
    while (++y5 < dy - 1) {
      x5 = -1;
      t13 = values[y5 * dx + dx] >= value;
      t22 = values[y5 * dx] >= value;
      cases[t13 << 1 | t22 << 2].forEach(stitch);
      while (++x5 < dx - 1) {
        t03 = t13, t13 = values[y5 * dx + dx + x5 + 1] >= value;
        t32 = t22, t22 = values[y5 * dx + x5 + 1] >= value;
        cases[t03 | t13 << 1 | t22 << 2 | t32 << 3].forEach(stitch);
      }
      cases[t13 | t22 << 3].forEach(stitch);
    }
    x5 = -1;
    t22 = values[y5 * dx] >= value;
    cases[t22 << 2].forEach(stitch);
    while (++x5 < dx - 1) {
      t32 = t22, t22 = values[y5 * dx + x5 + 1] >= value;
      cases[t22 << 2 | t32 << 3].forEach(stitch);
    }
    cases[t22 << 3].forEach(stitch);
    function stitch(line) {
      var start2 = [line[0][0] + x5, line[0][1] + y5], end = [line[1][0] + x5, line[1][1] + y5], startIndex = index2(start2), endIndex = index2(end), f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = { start: f.start, end: g.end, ring: f.ring.concat(g.ring) };
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = { start: g.start, end: f.end, ring: g.ring.concat(f.ring) };
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start2);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = { start: startIndex, end: endIndex, ring: [start2, end] };
      }
    }
  }
  function index2(point6) {
    return point6[0] * 2 + point6[1] * (dx + 1) * 4;
  }
  function smoothLinear(ring, values, value) {
    ring.forEach(function(point6) {
      var x5 = point6[0], y5 = point6[1], xt = x5 | 0, yt = y5 | 0, v0, v1 = values[yt * dx + xt];
      if (x5 > 0 && x5 < dx && xt === x5) {
        v0 = values[yt * dx + xt - 1];
        point6[0] = x5 + (value - v0) / (v1 - v0) - 0.5;
      }
      if (y5 > 0 && y5 < dy && yt === y5) {
        v0 = values[(yt - 1) * dx + xt];
        point6[1] = y5 + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }
  contours.contour = contour;
  contours.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };
  contours.thresholds = function(_) {
    return arguments.length ? (threshold2 = typeof _ === "function" ? _ : Array.isArray(_) ? constant_default7(slice4.call(_)) : constant_default7(_), contours) : threshold2;
  };
  contours.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop_default, contours) : smooth === smoothLinear;
  };
  return contours;
}
var cases;
var init_contours = __esm({
  "node_modules/c3/node_modules/d3-contour/src/contours.js"() {
    init_src();
    init_array5();
    init_ascending2();
    init_area();
    init_constant7();
    init_contains();
    init_noop();
    cases = [
      [],
      [[[1, 1.5], [0.5, 1]]],
      [[[1.5, 1], [1, 1.5]]],
      [[[1.5, 1], [0.5, 1]]],
      [[[1, 0.5], [1.5, 1]]],
      [[[1, 1.5], [0.5, 1]], [[1, 0.5], [1.5, 1]]],
      [[[1, 0.5], [1, 1.5]]],
      [[[1, 0.5], [0.5, 1]]],
      [[[0.5, 1], [1, 0.5]]],
      [[[1, 1.5], [1, 0.5]]],
      [[[0.5, 1], [1, 0.5]], [[1.5, 1], [1, 1.5]]],
      [[[1.5, 1], [1, 0.5]]],
      [[[0.5, 1], [1.5, 1]]],
      [[[1, 1.5], [1.5, 1]]],
      [[[0.5, 1], [1, 1.5]]],
      []
    ];
  }
});

// node_modules/c3/node_modules/d3-contour/src/blur.js
function blurX(source, target, r) {
  var n = source.width, m = source.height, w = (r << 1) + 1;
  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }
      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }
        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
}
function blurY(source, target, r) {
  var n = source.width, m = source.height, w = (r << 1) + 1;
  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }
      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }
        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}
var init_blur = __esm({
  "node_modules/c3/node_modules/d3-contour/src/blur.js"() {
  }
});

// node_modules/c3/node_modules/d3-contour/src/density.js
function defaultX(d) {
  return d[0];
}
function defaultY(d) {
  return d[1];
}
function defaultWeight() {
  return 1;
}
function density_default() {
  var x5 = defaultX, y5 = defaultY, weight = defaultWeight, dx = 960, dy = 500, r = 20, k2 = 2, o = r * 3, n = dx + o * 2 >> k2, m = dy + o * 2 >> k2, threshold2 = constant_default7(20);
  function density(data) {
    var values0 = new Float32Array(n * m), values1 = new Float32Array(n * m);
    data.forEach(function(d, i, data2) {
      var xi = +x5(d, i, data2) + o >> k2, yi = +y5(d, i, data2) + o >> k2, wi = +weight(d, i, data2);
      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    });
    blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k2);
    blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k2);
    blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k2);
    blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k2);
    blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k2);
    blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k2);
    var tz = threshold2(values0);
    if (!Array.isArray(tz)) {
      var stop = max_default(values0);
      tz = tickStep(0, stop, tz);
      tz = range_default(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }
    return contours_default().thresholds(tz).size([n, m])(values0).map(transform2);
  }
  function transform2(geometry) {
    geometry.value *= Math.pow(2, -2 * k2);
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }
  function transformPolygon(coordinates2) {
    coordinates2.forEach(transformRing);
  }
  function transformRing(coordinates2) {
    coordinates2.forEach(transformPoint);
  }
  function transformPoint(coordinates2) {
    coordinates2[0] = coordinates2[0] * Math.pow(2, k2) - o;
    coordinates2[1] = coordinates2[1] * Math.pow(2, k2) - o;
  }
  function resize() {
    o = r * 3;
    n = dx + o * 2 >> k2;
    m = dy + o * 2 >> k2;
    return density;
  }
  density.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default7(+_), density) : x5;
  };
  density.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default7(+_), density) : y5;
  };
  density.weight = function(_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : constant_default7(+_), density) : weight;
  };
  density.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };
  density.cellSize = function(_) {
    if (!arguments.length) return 1 << k2;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k2 = Math.floor(Math.log(_) / Math.LN2), resize();
  };
  density.thresholds = function(_) {
    return arguments.length ? (threshold2 = typeof _ === "function" ? _ : Array.isArray(_) ? constant_default7(slice4.call(_)) : constant_default7(_), density) : threshold2;
  };
  density.bandwidth = function(_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };
  return density;
}
var init_density = __esm({
  "node_modules/c3/node_modules/d3-contour/src/density.js"() {
    init_src();
    init_array5();
    init_blur();
    init_constant7();
    init_contours();
  }
});

// node_modules/c3/node_modules/d3-contour/src/index.js
var init_src15 = __esm({
  "node_modules/c3/node_modules/d3-contour/src/index.js"() {
    init_contours();
    init_density();
  }
});

// node_modules/c3/node_modules/d3-dsv/src/dsv.js
function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + '] || ""';
  }).join(",") + "}");
}
function customConverter(columns, f) {
  var object2 = objectConverter(columns);
  return function(row, i) {
    return f(object2(row), i, columns);
  };
}
function inferColumns(rows) {
  var columnSet = /* @__PURE__ */ Object.create(null), columns = [];
  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });
  return columns;
}
function pad(value, width) {
  var s2 = value + "", length2 = s2.length;
  return length2 < width ? new Array(width - length2 + 1).join(0) + s2 : s2;
}
function formatYear(year2) {
  return year2 < 0 ? "-" + pad(-year2, 6) : year2 > 9999 ? "+" + pad(year2, 6) : pad(year2, 4);
}
function formatDate(date2) {
  var hours2 = date2.getUTCHours(), minutes2 = date2.getUTCMinutes(), seconds2 = date2.getUTCSeconds(), milliseconds2 = date2.getUTCMilliseconds();
  return isNaN(date2) ? "Invalid Date" : formatYear(date2.getUTCFullYear(), 4) + "-" + pad(date2.getUTCMonth() + 1, 2) + "-" + pad(date2.getUTCDate(), 2) + (milliseconds2 ? "T" + pad(hours2, 2) + ":" + pad(minutes2, 2) + ":" + pad(seconds2, 2) + "." + pad(milliseconds2, 3) + "Z" : seconds2 ? "T" + pad(hours2, 2) + ":" + pad(minutes2, 2) + ":" + pad(seconds2, 2) + "Z" : minutes2 || hours2 ? "T" + pad(hours2, 2) + ":" + pad(minutes2, 2) + "Z" : "");
}
function dsv_default(delimiter) {
  var reFormat = new RegExp('["' + delimiter + "\n\r]"), DELIMITER = delimiter.charCodeAt(0);
  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }
  function parseRows(text, f) {
    var rows = [], N = text.length, I = 0, n = 0, t, eof = N <= 0, eol = false;
    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;
    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL;
      var i, j = I, c4;
      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE) ;
        if ((i = I) >= N) eof = true;
        else if ((c4 = text.charCodeAt(I++)) === NEWLINE) eol = true;
        else if (c4 === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        }
        return text.slice(j + 1, i - 1).replace(/""/g, '"');
      }
      while (I < N) {
        if ((c4 = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
        else if (c4 === RETURN) {
          eol = true;
          if (text.charCodeAt(I) === NEWLINE) ++I;
        } else if (c4 !== DELIMITER) continue;
        return text.slice(j, i);
      }
      return eof = true, text.slice(j, N);
    }
    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF) row.push(t), t = token();
      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }
    return rows;
  }
  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }
  function format2(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }
  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }
  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }
  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }
  function formatValue(value) {
    return value == null ? "" : value instanceof Date ? formatDate(value) : reFormat.test(value += "") ? '"' + value.replace(/"/g, '""') + '"' : value;
  }
  return {
    parse,
    parseRows,
    format: format2,
    formatBody,
    formatRows,
    formatRow,
    formatValue
  };
}
var EOL, EOF, QUOTE, NEWLINE, RETURN;
var init_dsv = __esm({
  "node_modules/c3/node_modules/d3-dsv/src/dsv.js"() {
    EOL = {};
    EOF = {};
    QUOTE = 34;
    NEWLINE = 10;
    RETURN = 13;
  }
});

// node_modules/c3/node_modules/d3-dsv/src/csv.js
var csv, csvParse, csvParseRows, csvFormat, csvFormatBody, csvFormatRows, csvFormatRow, csvFormatValue;
var init_csv = __esm({
  "node_modules/c3/node_modules/d3-dsv/src/csv.js"() {
    init_dsv();
    csv = dsv_default(",");
    csvParse = csv.parse;
    csvParseRows = csv.parseRows;
    csvFormat = csv.format;
    csvFormatBody = csv.formatBody;
    csvFormatRows = csv.formatRows;
    csvFormatRow = csv.formatRow;
    csvFormatValue = csv.formatValue;
  }
});

// node_modules/c3/node_modules/d3-dsv/src/tsv.js
var tsv, tsvParse, tsvParseRows, tsvFormat, tsvFormatBody, tsvFormatRows, tsvFormatRow, tsvFormatValue;
var init_tsv = __esm({
  "node_modules/c3/node_modules/d3-dsv/src/tsv.js"() {
    init_dsv();
    tsv = dsv_default("	");
    tsvParse = tsv.parse;
    tsvParseRows = tsv.parseRows;
    tsvFormat = tsv.format;
    tsvFormatBody = tsv.formatBody;
    tsvFormatRows = tsv.formatRows;
    tsvFormatRow = tsv.formatRow;
    tsvFormatValue = tsv.formatValue;
  }
});

// node_modules/c3/node_modules/d3-dsv/src/autoType.js
function autoType(object2) {
  for (var key in object2) {
    var value = object2[key].trim(), number4, m;
    if (!value) value = null;
    else if (value === "true") value = true;
    else if (value === "false") value = false;
    else if (value === "NaN") value = NaN;
    else if (!isNaN(number4 = +value)) value = number4;
    else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
      if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
      value = new Date(value);
    } else continue;
    object2[key] = value;
  }
  return object2;
}
var fixtz;
var init_autoType = __esm({
  "node_modules/c3/node_modules/d3-dsv/src/autoType.js"() {
    fixtz = (/* @__PURE__ */ new Date("2019-01-01T00:00")).getHours() || (/* @__PURE__ */ new Date("2019-07-01T00:00")).getHours();
  }
});

// node_modules/c3/node_modules/d3-dsv/src/index.js
var init_src16 = __esm({
  "node_modules/c3/node_modules/d3-dsv/src/index.js"() {
    init_dsv();
    init_csv();
    init_tsv();
    init_autoType();
  }
});

// node_modules/c3/node_modules/d3-fetch/src/blob.js
function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}
function blob_default(input, init2) {
  return fetch(input, init2).then(responseBlob);
}
var init_blob = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/blob.js"() {
  }
});

// node_modules/c3/node_modules/d3-fetch/src/buffer.js
function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}
function buffer_default(input, init2) {
  return fetch(input, init2).then(responseArrayBuffer);
}
var init_buffer = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/buffer.js"() {
  }
});

// node_modules/c3/node_modules/d3-fetch/src/text.js
function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}
function text_default3(input, init2) {
  return fetch(input, init2).then(responseText);
}
var init_text3 = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/text.js"() {
  }
});

// node_modules/c3/node_modules/d3-fetch/src/dsv.js
function dsvParse(parse) {
  return function(input, init2, row) {
    if (arguments.length === 2 && typeof init2 === "function") row = init2, init2 = void 0;
    return text_default3(input, init2).then(function(response) {
      return parse(response, row);
    });
  };
}
function dsv(delimiter, input, init2, row) {
  if (arguments.length === 3 && typeof init2 === "function") row = init2, init2 = void 0;
  var format2 = dsv_default(delimiter);
  return text_default3(input, init2).then(function(response) {
    return format2.parse(response, row);
  });
}
var csv2, tsv2;
var init_dsv2 = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/dsv.js"() {
    init_src16();
    init_text3();
    csv2 = dsvParse(csvParse);
    tsv2 = dsvParse(tsvParse);
  }
});

// node_modules/c3/node_modules/d3-fetch/src/image.js
function image_default(input, init2) {
  return new Promise(function(resolve, reject) {
    var image = new Image();
    for (var key in init2) image[key] = init2[key];
    image.onerror = reject;
    image.onload = function() {
      resolve(image);
    };
    image.src = input;
  });
}
var init_image = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/image.js"() {
  }
});

// node_modules/c3/node_modules/d3-fetch/src/json.js
function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205) return;
  return response.json();
}
function json_default(input, init2) {
  return fetch(input, init2).then(responseJson);
}
var init_json = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/json.js"() {
  }
});

// node_modules/c3/node_modules/d3-fetch/src/xml.js
function parser(type2) {
  return function(input, init2) {
    return text_default3(input, init2).then(function(text) {
      return new DOMParser().parseFromString(text, type2);
    });
  };
}
var xml_default, html, svg;
var init_xml = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/xml.js"() {
    init_text3();
    xml_default = parser("application/xml");
    html = parser("text/html");
    svg = parser("image/svg+xml");
  }
});

// node_modules/c3/node_modules/d3-fetch/src/index.js
var init_src17 = __esm({
  "node_modules/c3/node_modules/d3-fetch/src/index.js"() {
    init_blob();
    init_buffer();
    init_dsv2();
    init_image();
    init_json();
    init_text3();
    init_xml();
  }
});

// node_modules/c3/node_modules/d3-force/src/center.js
function center_default(x5, y5) {
  var nodes;
  if (x5 == null) x5 = 0;
  if (y5 == null) y5 = 0;
  function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = sx / n - x5, sy = sy / n - y5, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }
  force.initialize = function(_) {
    nodes = _;
  };
  force.x = function(_) {
    return arguments.length ? (x5 = +_, force) : x5;
  };
  force.y = function(_) {
    return arguments.length ? (y5 = +_, force) : y5;
  };
  return force;
}
var init_center = __esm({
  "node_modules/c3/node_modules/d3-force/src/center.js"() {
  }
});

// node_modules/c3/node_modules/d3-force/src/constant.js
function constant_default8(x5) {
  return function() {
    return x5;
  };
}
var init_constant8 = __esm({
  "node_modules/c3/node_modules/d3-force/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-force/src/jiggle.js
function jiggle_default() {
  return (Math.random() - 0.5) * 1e-6;
}
var init_jiggle = __esm({
  "node_modules/c3/node_modules/d3-force/src/jiggle.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/add.js
function add_default(d) {
  var x5 = +this._x.call(null, d), y5 = +this._y.call(null, d);
  return add(this.cover(x5, y5), x5, y5, d);
}
function add(tree, x5, y5, d) {
  if (isNaN(x5) || isNaN(y5)) return tree;
  var parent, node = tree._root, leaf = { data: d }, x06 = tree._x0, y06 = tree._y0, x12 = tree._x1, y12 = tree._y1, xm, ym, xp, yp, right2, bottom2, i, j;
  if (!node) return tree._root = leaf, tree;
  while (node.length) {
    if (right2 = x5 >= (xm = (x06 + x12) / 2)) x06 = xm;
    else x12 = xm;
    if (bottom2 = y5 >= (ym = (y06 + y12) / 2)) y06 = ym;
    else y12 = ym;
    if (parent = node, !(node = node[i = bottom2 << 1 | right2])) return parent[i] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x5 === xp && y5 === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right2 = x5 >= (xm = (x06 + x12) / 2)) x06 = xm;
    else x12 = xm;
    if (bottom2 = y5 >= (ym = (y06 + y12) / 2)) y06 = ym;
    else y12 = ym;
  } while ((i = bottom2 << 1 | right2) === (j = (yp >= ym) << 1 | xp >= xm));
  return parent[j] = node, parent[i] = leaf, tree;
}
function addAll(data) {
  var d, i, n = data.length, x5, y5, xz = new Array(n), yz = new Array(n), x06 = Infinity, y06 = Infinity, x12 = -Infinity, y12 = -Infinity;
  for (i = 0; i < n; ++i) {
    if (isNaN(x5 = +this._x.call(null, d = data[i])) || isNaN(y5 = +this._y.call(null, d))) continue;
    xz[i] = x5;
    yz[i] = y5;
    if (x5 < x06) x06 = x5;
    if (x5 > x12) x12 = x5;
    if (y5 < y06) y06 = y5;
    if (y5 > y12) y12 = y5;
  }
  if (x06 > x12 || y06 > y12) return this;
  this.cover(x06, y06).cover(x12, y12);
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }
  return this;
}
var init_add = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/add.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/cover.js
function cover_default(x5, y5) {
  if (isNaN(x5 = +x5) || isNaN(y5 = +y5)) return this;
  var x06 = this._x0, y06 = this._y0, x12 = this._x1, y12 = this._y1;
  if (isNaN(x06)) {
    x12 = (x06 = Math.floor(x5)) + 1;
    y12 = (y06 = Math.floor(y5)) + 1;
  } else {
    var z = x12 - x06, node = this._root, parent, i;
    while (x06 > x5 || x5 >= x12 || y06 > y5 || y5 >= y12) {
      i = (y5 < y06) << 1 | x5 < x06;
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0:
          x12 = x06 + z, y12 = y06 + z;
          break;
        case 1:
          x06 = x12 - z, y12 = y06 + z;
          break;
        case 2:
          x12 = x06 + z, y06 = y12 - z;
          break;
        case 3:
          x06 = x12 - z, y06 = y12 - z;
          break;
      }
    }
    if (this._root && this._root.length) this._root = node;
  }
  this._x0 = x06;
  this._y0 = y06;
  this._x1 = x12;
  this._y1 = y12;
  return this;
}
var init_cover = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/cover.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/data.js
function data_default2() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do
      data.push(node.data);
    while (node = node.next);
  });
  return data;
}
var init_data2 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/data.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/extent.js
function extent_default2(_) {
  return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
}
var init_extent2 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/extent.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/quad.js
function quad_default(node, x06, y06, x12, y12) {
  this.node = node;
  this.x0 = x06;
  this.y0 = y06;
  this.x1 = x12;
  this.y1 = y12;
}
var init_quad2 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/quad.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/find.js
function find_default(x5, y5, radius) {
  var data, x06 = this._x0, y06 = this._y0, x12, y12, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
  if (node) quads.push(new quad_default(node, x06, y06, x32, y32));
  if (radius == null) radius = Infinity;
  else {
    x06 = x5 - radius, y06 = y5 - radius;
    x32 = x5 + radius, y32 = y5 + radius;
    radius *= radius;
  }
  while (q = quads.pop()) {
    if (!(node = q.node) || (x12 = q.x0) > x32 || (y12 = q.y0) > y32 || (x22 = q.x1) < x06 || (y22 = q.y1) < y06) continue;
    if (node.length) {
      var xm = (x12 + x22) / 2, ym = (y12 + y22) / 2;
      quads.push(
        new quad_default(node[3], xm, ym, x22, y22),
        new quad_default(node[2], x12, ym, xm, y22),
        new quad_default(node[1], xm, y12, x22, ym),
        new quad_default(node[0], x12, y12, xm, ym)
      );
      if (i = (y5 >= ym) << 1 | x5 >= xm) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    } else {
      var dx = x5 - +this._x.call(null, node.data), dy = y5 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x06 = x5 - d, y06 = y5 - d;
        x32 = x5 + d, y32 = y5 + d;
        data = node.data;
      }
    }
  }
  return data;
}
var init_find = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/find.js"() {
    init_quad2();
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/remove.js
function remove_default3(d) {
  if (isNaN(x5 = +this._x.call(null, d)) || isNaN(y5 = +this._y.call(null, d))) return this;
  var parent, node = this._root, retainer, previous, next, x06 = this._x0, y06 = this._y0, x12 = this._x1, y12 = this._y1, x5, y5, xm, ym, right2, bottom2, i, j;
  if (!node) return this;
  if (node.length) while (true) {
    if (right2 = x5 >= (xm = (x06 + x12) / 2)) x06 = xm;
    else x12 = xm;
    if (bottom2 = y5 >= (ym = (y06 + y12) / 2)) y06 = ym;
    else y12 = ym;
    if (!(parent = node, node = node[i = bottom2 << 1 | right2])) return this;
    if (!node.length) break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;
  }
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;
  if (previous) return next ? previous.next = next : delete previous.next, this;
  if (!parent) return this._root = next, this;
  next ? parent[i] = next : delete parent[i];
  if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer) retainer[j] = node;
    else this._root = node;
  }
  return this;
}
function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
  return this;
}
var init_remove3 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/remove.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/root.js
function root_default() {
  return this._root;
}
var init_root = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/root.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/size.js
function size_default2() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do
      ++size;
    while (node = node.next);
  });
  return size;
}
var init_size2 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/size.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/visit.js
function visit_default(callback) {
  var quads = [], q, node = this._root, child, x06, y06, x12, y12;
  if (node) quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x06 = q.x0, y06 = q.y0, x12 = q.x1, y12 = q.y1) && node.length) {
      var xm = (x06 + x12) / 2, ym = (y06 + y12) / 2;
      if (child = node[3]) quads.push(new quad_default(child, xm, ym, x12, y12));
      if (child = node[2]) quads.push(new quad_default(child, x06, ym, xm, y12));
      if (child = node[1]) quads.push(new quad_default(child, xm, y06, x12, ym));
      if (child = node[0]) quads.push(new quad_default(child, x06, y06, xm, ym));
    }
  }
  return this;
}
var init_visit = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/visit.js"() {
    init_quad2();
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/visitAfter.js
function visitAfter_default(callback) {
  var quads = [], next = [], q;
  if (this._root) quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x06 = q.x0, y06 = q.y0, x12 = q.x1, y12 = q.y1, xm = (x06 + x12) / 2, ym = (y06 + y12) / 2;
      if (child = node[0]) quads.push(new quad_default(child, x06, y06, xm, ym));
      if (child = node[1]) quads.push(new quad_default(child, xm, y06, x12, ym));
      if (child = node[2]) quads.push(new quad_default(child, x06, ym, xm, y12));
      if (child = node[3]) quads.push(new quad_default(child, xm, ym, x12, y12));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}
var init_visitAfter = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/visitAfter.js"() {
    init_quad2();
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/x.js
function defaultX2(d) {
  return d[0];
}
function x_default(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}
var init_x = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/x.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/y.js
function defaultY2(d) {
  return d[1];
}
function y_default(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}
var init_y = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/y.js"() {
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/quadtree.js
function quadtree(nodes, x5, y5) {
  var tree = new Quadtree(x5 == null ? defaultX2 : x5, y5 == null ? defaultY2 : y5, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Quadtree(x5, y5, x06, y06, x12, y12) {
  this._x = x5;
  this._y = y5;
  this._x0 = x06;
  this._y0 = y06;
  this._x1 = x12;
  this._y1 = y12;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy3 = { data: leaf.data }, next = copy3;
  while (leaf = leaf.next) next = next.next = { data: leaf.data };
  return copy3;
}
var treeProto;
var init_quadtree = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/quadtree.js"() {
    init_add();
    init_cover();
    init_data2();
    init_extent2();
    init_find();
    init_remove3();
    init_root();
    init_size2();
    init_visit();
    init_visitAfter();
    init_x();
    init_y();
    treeProto = quadtree.prototype = Quadtree.prototype;
    treeProto.copy = function() {
      var copy3 = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
      if (!node) return copy3;
      if (!node.length) return copy3._root = leaf_copy(node), copy3;
      nodes = [{ source: node, target: copy3._root = new Array(4) }];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({ source: child, target: node.target[i] = new Array(4) });
            else node.target[i] = leaf_copy(child);
          }
        }
      }
      return copy3;
    };
    treeProto.add = add_default;
    treeProto.addAll = addAll;
    treeProto.cover = cover_default;
    treeProto.data = data_default2;
    treeProto.extent = extent_default2;
    treeProto.find = find_default;
    treeProto.remove = remove_default3;
    treeProto.removeAll = removeAll;
    treeProto.root = root_default;
    treeProto.size = size_default2;
    treeProto.visit = visit_default;
    treeProto.visitAfter = visitAfter_default;
    treeProto.x = x_default;
    treeProto.y = y_default;
  }
});

// node_modules/c3/node_modules/d3-quadtree/src/index.js
var init_src18 = __esm({
  "node_modules/c3/node_modules/d3-quadtree/src/index.js"() {
    init_quadtree();
  }
});

// node_modules/c3/node_modules/d3-force/src/collide.js
function x(d) {
  return d.x + d.vx;
}
function y(d) {
  return d.y + d.vy;
}
function collide_default(radius) {
  var nodes, radii, strength = 1, iterations2 = 1;
  if (typeof radius !== "function") radius = constant_default8(radius == null ? 1 : +radius);
  function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k2 = 0; k2 < iterations2; ++k2) {
      tree = quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }
    function apply(quad, x06, y06, x12, y12) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x5 = xi - data.x - data.vx, y5 = yi - data.y - data.vy, l = x5 * x5 + y5 * y5;
          if (l < r * r) {
            if (x5 === 0) x5 = jiggle_default(), l += x5 * x5;
            if (y5 === 0) y5 = jiggle_default(), l += y5 * y5;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x5 *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y5 *= l) * r;
            data.vx -= x5 * (r = 1 - r);
            data.vy -= y5 * r;
          }
        }
        return;
      }
      return x06 > xi + r || x12 < xi - r || y06 > yi + r || y12 < yi - r;
    }
  }
  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }
  force.initialize = function(_) {
    nodes = _;
    initialize();
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations2 = +_, force) : iterations2;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : radius;
  };
  return force;
}
var init_collide = __esm({
  "node_modules/c3/node_modules/d3-force/src/collide.js"() {
    init_constant8();
    init_jiggle();
    init_src18();
  }
});

// node_modules/c3/node_modules/d3-force/src/link.js
function index(d) {
  return d.index;
}
function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}
function link_default(links) {
  var id2 = index, strength = defaultStrength, strengths, distance = constant_default8(30), distances, nodes, count2, bias, iterations2 = 1;
  if (links == null) links = [];
  function defaultStrength(link3) {
    return 1 / Math.min(count2[link3.source.index], count2[link3.target.index]);
  }
  function force(alpha) {
    for (var k2 = 0, n = links.length; k2 < iterations2; ++k2) {
      for (var i = 0, link3, source, target, x5, y5, l, b; i < n; ++i) {
        link3 = links[i], source = link3.source, target = link3.target;
        x5 = target.x + target.vx - source.x - source.vx || jiggle_default();
        y5 = target.y + target.vy - source.y - source.vy || jiggle_default();
        l = Math.sqrt(x5 * x5 + y5 * y5);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x5 *= l, y5 *= l;
        target.vx -= x5 * (b = bias[i]);
        target.vy -= y5 * b;
        source.vx += x5 * (b = 1 - b);
        source.vy += y5 * b;
      }
    }
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, m = links.length, nodeById = map_default(nodes, id2), link3;
    for (i = 0, count2 = new Array(n); i < m; ++i) {
      link3 = links[i], link3.index = i;
      if (typeof link3.source !== "object") link3.source = find(nodeById, link3.source);
      if (typeof link3.target !== "object") link3.target = find(nodeById, link3.target);
      count2[link3.source.index] = (count2[link3.source.index] || 0) + 1;
      count2[link3.target.index] = (count2[link3.target.index] || 0) + 1;
    }
    for (i = 0, bias = new Array(m); i < m; ++i) {
      link3 = links[i], bias[i] = count2[link3.source.index] / (count2[link3.source.index] + count2[link3.target.index]);
    }
    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }
  function initializeStrength() {
    if (!nodes) return;
    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }
  function initializeDistance() {
    if (!nodes) return;
    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }
  force.initialize = function(_) {
    nodes = _;
    initialize();
  };
  force.links = function(_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };
  force.id = function(_) {
    return arguments.length ? (id2 = _, force) : id2;
  };
  force.iterations = function(_) {
    return arguments.length ? (iterations2 = +_, force) : iterations2;
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default8(+_), initializeStrength(), force) : strength;
  };
  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default8(+_), initializeDistance(), force) : distance;
  };
  return force;
}
var init_link = __esm({
  "node_modules/c3/node_modules/d3-force/src/link.js"() {
    init_constant8();
    init_jiggle();
    init_src14();
  }
});

// node_modules/c3/node_modules/d3-force/src/simulation.js
function x2(d) {
  return d.x;
}
function y2(d) {
  return d.y;
}
function simulation_default(nodes) {
  var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = map_default(), stepper = timer(step), event2 = dispatch_default("tick", "end");
  if (nodes == null) nodes = [];
  function step() {
    tick();
    event2.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event2.call("end", simulation);
    }
  }
  function tick(iterations2) {
    var i, n = nodes.length, node;
    if (iterations2 === void 0) iterations2 = 1;
    for (var k2 = 0; k2 < iterations2; ++k2) {
      alpha += (alphaTarget - alpha) * alphaDecay;
      forces.each(function(force) {
        force(alpha);
      });
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;
        else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;
        else node.y = node.fy, node.vy = 0;
      }
    }
    return simulation;
  }
  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i), angle2 = i * initialAngle;
        node.x = radius * Math.cos(angle2);
        node.y = radius * Math.sin(angle2);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }
  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }
  initializeNodes();
  return simulation = {
    tick,
    restart: function() {
      return stepper.restart(step), simulation;
    },
    stop: function() {
      return stepper.stop(), simulation;
    },
    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function(name, _) {
      return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function(x5, y5, radius) {
      var i = 0, n = nodes.length, dx, dy, d2, node, closest;
      if (radius == null) radius = Infinity;
      else radius *= radius;
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x5 - node.x;
        dy = y5 - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }
      return closest;
    },
    on: function(name, _) {
      return arguments.length > 1 ? (event2.on(name, _), simulation) : event2.on(name);
    }
  };
}
var initialRadius, initialAngle;
var init_simulation = __esm({
  "node_modules/c3/node_modules/d3-force/src/simulation.js"() {
    init_src3();
    init_src14();
    init_src8();
    initialRadius = 10;
    initialAngle = Math.PI * (3 - Math.sqrt(5));
  }
});

// node_modules/c3/node_modules/d3-force/src/manyBody.js
function manyBody_default() {
  var nodes, node, alpha, strength = constant_default8(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
  function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x2, y2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node2;
    strengths = new Array(n);
    for (i = 0; i < n; ++i) node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
  }
  function accumulate(quad) {
    var strength2 = 0, q, c4, weight = 0, x5, y5, i;
    if (quad.length) {
      for (x5 = y5 = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c4 = Math.abs(q.value))) {
          strength2 += q.value, weight += c4, x5 += c4 * q.x, y5 += c4 * q.y;
        }
      }
      quad.x = x5 / weight;
      quad.y = y5 / weight;
    } else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do
        strength2 += strengths[q.data.index];
      while (q = q.next);
    }
    quad.value = strength2;
  }
  function apply(quad, x12, _, x22) {
    if (!quad.value) return true;
    var x5 = quad.x - node.x, y5 = quad.y - node.y, w = x22 - x12, l = x5 * x5 + y5 * y5;
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x5 === 0) x5 = jiggle_default(), l += x5 * x5;
        if (y5 === 0) y5 = jiggle_default(), l += y5 * y5;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x5 * quad.value * alpha / l;
        node.vy += y5 * quad.value * alpha / l;
      }
      return true;
    } else if (quad.length || l >= distanceMax2) return;
    if (quad.data !== node || quad.next) {
      if (x5 === 0) x5 = jiggle_default(), l += x5 * x5;
      if (y5 === 0) y5 = jiggle_default(), l += y5 * y5;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }
    do
      if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x5 * w;
        node.vy += y5 * w;
      }
    while (quad = quad.next);
  }
  force.initialize = function(_) {
    nodes = _;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : strength;
  };
  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };
  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };
  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };
  return force;
}
var init_manyBody = __esm({
  "node_modules/c3/node_modules/d3-force/src/manyBody.js"() {
    init_constant8();
    init_jiggle();
    init_src18();
    init_simulation();
  }
});

// node_modules/c3/node_modules/d3-force/src/radial.js
function radial_default(radius, x5, y5) {
  var nodes, strength = constant_default8(0.1), strengths, radiuses;
  if (typeof radius !== "function") radius = constant_default8(+radius);
  if (x5 == null) x5 = 0;
  if (y5 == null) y5 = 0;
  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i], dx = node.x - x5 || 1e-6, dy = node.y - y5 || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k2 = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k2;
      node.vy += dy * k2;
    }
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);
    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_) {
    nodes = _, initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : strength;
  };
  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : radius;
  };
  force.x = function(_) {
    return arguments.length ? (x5 = +_, force) : x5;
  };
  force.y = function(_) {
    return arguments.length ? (y5 = +_, force) : y5;
  };
  return force;
}
var init_radial = __esm({
  "node_modules/c3/node_modules/d3-force/src/radial.js"() {
    init_constant8();
  }
});

// node_modules/c3/node_modules/d3-force/src/x.js
function x_default2(x5) {
  var strength = constant_default8(0.1), nodes, strengths, xz;
  if (typeof x5 !== "function") x5 = constant_default8(x5 == null ? 0 : +x5);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x5(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_) {
    nodes = _;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : strength;
  };
  force.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : x5;
  };
  return force;
}
var init_x2 = __esm({
  "node_modules/c3/node_modules/d3-force/src/x.js"() {
    init_constant8();
  }
});

// node_modules/c3/node_modules/d3-force/src/y.js
function y_default2(y5) {
  var strength = constant_default8(0.1), nodes, strengths, yz;
  if (typeof y5 !== "function") y5 = constant_default8(y5 == null ? 0 : +y5);
  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }
  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y5(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }
  force.initialize = function(_) {
    nodes = _;
    initialize();
  };
  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : strength;
  };
  force.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default8(+_), initialize(), force) : y5;
  };
  return force;
}
var init_y2 = __esm({
  "node_modules/c3/node_modules/d3-force/src/y.js"() {
    init_constant8();
  }
});

// node_modules/c3/node_modules/d3-force/src/index.js
var init_src19 = __esm({
  "node_modules/c3/node_modules/d3-force/src/index.js"() {
    init_center();
    init_collide();
    init_link();
    init_manyBody();
    init_radial();
    init_simulation();
    init_x2();
    init_y2();
  }
});

// node_modules/c3/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x5) {
  return Math.abs(x5 = Math.round(x5)) >= 1e21 ? x5.toLocaleString("en").replace(/,/g, "") : x5.toString(10);
}
function formatDecimalParts(x5, p) {
  if ((i = (x5 = p ? x5.toExponential(p - 1) : x5.toExponential()).indexOf("e")) < 0) return null;
  var i, coefficient = x5.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x5.slice(i + 1)
  ];
}
var init_formatDecimal = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatDecimal.js"() {
  }
});

// node_modules/c3/node_modules/d3-format/src/exponent.js
function exponent_default(x5) {
  return x5 = formatDecimalParts(Math.abs(x5)), x5 ? x5[1] : NaN;
}
var init_exponent = __esm({
  "node_modules/c3/node_modules/d3-format/src/exponent.js"() {
    init_formatDecimal();
  }
});

// node_modules/c3/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length2 = 0;
    while (i > 0 && g > 0) {
      if (length2 + g + 1 > width) g = Math.max(1, width - length2);
      t.push(value.substring(i -= g, i + g));
      if ((length2 += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
var init_formatGroup = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatGroup.js"() {
  }
});

// node_modules/c3/node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var init_formatNumerals = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatNumerals.js"() {
  }
});

// node_modules/c3/node_modules/d3-format/src/formatSpecifier.js
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
var re;
var init_formatSpecifier = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatSpecifier.js"() {
    re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    formatSpecifier.prototype = FormatSpecifier.prototype;
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
  }
});

// node_modules/c3/node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out: for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s2[i]) {
      case ".":
        i0 = i1 = i;
        break;
      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;
      default:
        if (!+s2[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}
var init_formatTrim = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatTrim.js"() {
  }
});

// node_modules/c3/node_modules/d3-format/src/formatPrefixAuto.js
function formatPrefixAuto_default(x5, p) {
  var d = formatDecimalParts(x5, p);
  if (!d) return x5 + "";
  var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x5, Math.max(0, p + i - 1))[0];
}
var prefixExponent;
var init_formatPrefixAuto = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatPrefixAuto.js"() {
    init_formatDecimal();
  }
});

// node_modules/c3/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x5, p) {
  var d = formatDecimalParts(x5, p);
  if (!d) return x5 + "";
  var coefficient = d[0], exponent2 = d[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var init_formatRounded = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatRounded.js"() {
    init_formatDecimal();
  }
});

// node_modules/c3/node_modules/d3-format/src/formatTypes.js
var formatTypes_default;
var init_formatTypes = __esm({
  "node_modules/c3/node_modules/d3-format/src/formatTypes.js"() {
    init_formatDecimal();
    init_formatPrefixAuto();
    init_formatRounded();
    formatTypes_default = {
      "%": function(x5, p) {
        return (x5 * 100).toFixed(p);
      },
      "b": function(x5) {
        return Math.round(x5).toString(2);
      },
      "c": function(x5) {
        return x5 + "";
      },
      "d": formatDecimal_default,
      "e": function(x5, p) {
        return x5.toExponential(p);
      },
      "f": function(x5, p) {
        return x5.toFixed(p);
      },
      "g": function(x5, p) {
        return x5.toPrecision(p);
      },
      "o": function(x5) {
        return Math.round(x5).toString(8);
      },
      "p": function(x5, p) {
        return formatRounded_default(x5 * 100, p);
      },
      "r": formatRounded_default,
      "s": formatPrefixAuto_default,
      "X": function(x5) {
        return Math.round(x5).toString(16).toUpperCase();
      },
      "x": function(x5) {
        return Math.round(x5).toString(16);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-format/src/identity.js
function identity_default3(x5) {
  return x5;
}
var init_identity3 = __esm({
  "node_modules/c3/node_modules/d3-format/src/identity.js"() {
  }
});

// node_modules/c3/node_modules/d3-format/src/locale.js
function locale_default(locale3) {
  var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default3 : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default3 : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "-" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign3 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n") comma = true, type2 = "g";
    else if (!formatTypes_default[type2]) precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero2 || fill === "0" && align === "=") zero2 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i, n, c4;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign3 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign3 === "(" ? sign3 : minus : sign3 === "-" || sign3 === "(" ? "" : sign3) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign3 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c4 = value.charCodeAt(i), 48 > c4 || c4 > 57) {
              valueSuffix = (c4 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2) value = group(value, Infinity);
      var length2 = valuePrefix.length + value.length + valueSuffix.length, padding = length2 < width ? new Array(width - length2 + 1).join(fill) : "";
      if (comma && zero2) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length2 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length2);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
    return function(value2) {
      return f(k2 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var map3, prefixes;
var init_locale = __esm({
  "node_modules/c3/node_modules/d3-format/src/locale.js"() {
    init_exponent();
    init_formatGroup();
    init_formatNumerals();
    init_formatSpecifier();
    init_formatTrim();
    init_formatTypes();
    init_formatPrefixAuto();
    init_identity3();
    map3 = Array.prototype.map;
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  }
});

// node_modules/c3/node_modules/d3-format/src/defaultLocale.js
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
var locale, format, formatPrefix;
var init_defaultLocale = __esm({
  "node_modules/c3/node_modules/d3-format/src/defaultLocale.js"() {
    init_locale();
    defaultLocale({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""],
      minus: "-"
    });
  }
});

// node_modules/c3/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
var init_precisionFixed = __esm({
  "node_modules/c3/node_modules/d3-format/src/precisionFixed.js"() {
    init_exponent();
  }
});

// node_modules/c3/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}
var init_precisionPrefix = __esm({
  "node_modules/c3/node_modules/d3-format/src/precisionPrefix.js"() {
    init_exponent();
  }
});

// node_modules/c3/node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}
var init_precisionRound = __esm({
  "node_modules/c3/node_modules/d3-format/src/precisionRound.js"() {
    init_exponent();
  }
});

// node_modules/c3/node_modules/d3-format/src/index.js
var init_src20 = __esm({
  "node_modules/c3/node_modules/d3-format/src/index.js"() {
    init_defaultLocale();
    init_locale();
    init_formatSpecifier();
    init_precisionFixed();
    init_precisionPrefix();
    init_precisionRound();
  }
});

// node_modules/c3/node_modules/d3-geo/src/adder.js
function adder_default() {
  return new Adder();
}
function Adder() {
  this.reset();
}
function add2(adder, a2, b) {
  var x5 = adder.s = a2 + b, bv = x5 - a2, av = x5 - bv;
  adder.t = a2 - av + (b - bv);
}
var temp;
var init_adder = __esm({
  "node_modules/c3/node_modules/d3-geo/src/adder.js"() {
    Adder.prototype = {
      constructor: Adder,
      reset: function() {
        this.s = // rounded value
        this.t = 0;
      },
      add: function(y5) {
        add2(temp, y5, this.t);
        add2(this, temp.s, this.s);
        if (this.s) this.t += temp.t;
        else this.s = temp.t;
      },
      valueOf: function() {
        return this.s;
      }
    };
    temp = new Adder();
  }
});

// node_modules/c3/node_modules/d3-geo/src/math.js
function acos(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi4 : Math.acos(x5);
}
function asin(x5) {
  return x5 > 1 ? halfPi3 : x5 < -1 ? -halfPi3 : Math.asin(x5);
}
function haversin(x5) {
  return (x5 = sin2(x5 / 2)) * x5;
}
var epsilon4, epsilon22, pi4, halfPi3, quarterPi, tau4, degrees2, radians, abs, atan, atan2, cos2, ceil, exp, log, pow, sin2, sign, sqrt, tan;
var init_math4 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/math.js"() {
    epsilon4 = 1e-6;
    epsilon22 = 1e-12;
    pi4 = Math.PI;
    halfPi3 = pi4 / 2;
    quarterPi = pi4 / 4;
    tau4 = pi4 * 2;
    degrees2 = 180 / pi4;
    radians = pi4 / 180;
    abs = Math.abs;
    atan = Math.atan;
    atan2 = Math.atan2;
    cos2 = Math.cos;
    ceil = Math.ceil;
    exp = Math.exp;
    log = Math.log;
    pow = Math.pow;
    sin2 = Math.sin;
    sign = Math.sign || function(x5) {
      return x5 > 0 ? 1 : x5 < 0 ? -1 : 0;
    };
    sqrt = Math.sqrt;
    tan = Math.tan;
  }
});

// node_modules/c3/node_modules/d3-geo/src/noop.js
function noop2() {
}
var init_noop2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/noop.js"() {
  }
});

// node_modules/c3/node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
function streamLine(coordinates2, stream, closed) {
  var i = -1, n = coordinates2.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates2[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates2, stream) {
  var i = -1, n = coordinates2.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates2[i], stream, 1);
  stream.polygonEnd();
}
function stream_default(object2, stream) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream);
  } else {
    streamGeometry(object2, stream);
  }
}
var streamObjectType, streamGeometryType;
var init_stream = __esm({
  "node_modules/c3/node_modules/d3-geo/src/stream.js"() {
    streamObjectType = {
      Feature: function(object2, stream) {
        streamGeometry(object2.geometry, stream);
      },
      FeatureCollection: function(object2, stream) {
        var features = object2.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };
    streamGeometryType = {
      Sphere: function(object2, stream) {
        stream.sphere();
      },
      Point: function(object2, stream) {
        object2 = object2.coordinates;
        stream.point(object2[0], object2[1], object2[2]);
      },
      MultiPoint: function(object2, stream) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) object2 = coordinates2[i], stream.point(object2[0], object2[1], object2[2]);
      },
      LineString: function(object2, stream) {
        streamLine(object2.coordinates, stream, 0);
      },
      MultiLineString: function(object2, stream) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) streamLine(coordinates2[i], stream, 0);
      },
      Polygon: function(object2, stream) {
        streamPolygon(object2.coordinates, stream);
      },
      MultiPolygon: function(object2, stream) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) streamPolygon(coordinates2[i], stream);
      },
      GeometryCollection: function(object2, stream) {
        var geometries = object2.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/area.js
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaRingEnd() {
  areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi2) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi2;
  lambda *= radians, phi2 *= radians;
  lambda0 = lambda, cosPhi0 = cos2(phi2 = phi2 / 2 + quarterPi), sinPhi0 = sin2(phi2);
}
function areaPoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  phi2 = phi2 / 2 + quarterPi;
  var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos2(phi2), sinPhi = sin2(phi2), k2 = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k2 * cos2(adLambda), v = k2 * sdLambda * sin2(adLambda);
  areaRingSum.add(atan2(v, u));
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}
function area_default2(object2) {
  areaSum.reset();
  stream_default(object2, areaStream);
  return areaSum * 2;
}
var areaRingSum, areaSum, lambda00, phi00, lambda0, cosPhi0, sinPhi0, areaStream;
var init_area2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/area.js"() {
    init_adder();
    init_math4();
    init_noop2();
    init_stream();
    areaRingSum = adder_default();
    areaSum = adder_default();
    areaStream = {
      point: noop2,
      lineStart: noop2,
      lineEnd: noop2,
      polygonStart: function() {
        areaRingSum.reset();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? tau4 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop2;
      },
      sphere: function() {
        areaSum.add(tau4);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/cartesian.js
function spherical(cartesian2) {
  return [atan2(cartesian2[1], cartesian2[0]), asin(cartesian2[2])];
}
function cartesian(spherical2) {
  var lambda = spherical2[0], phi2 = spherical2[1], cosPhi = cos2(phi2);
  return [cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi2)];
}
function cartesianDot(a2, b) {
  return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
}
function cartesianCross(a2, b) {
  return [a2[1] * b[2] - a2[2] * b[1], a2[2] * b[0] - a2[0] * b[2], a2[0] * b[1] - a2[1] * b[0]];
}
function cartesianAddInPlace(a2, b) {
  a2[0] += b[0], a2[1] += b[1], a2[2] += b[2];
}
function cartesianScale(vector, k2) {
  return [vector[0] * k2, vector[1] * k2, vector[2] * k2];
}
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}
var init_cartesian = __esm({
  "node_modules/c3/node_modules/d3-geo/src/cartesian.js"() {
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/bounds.js
function boundsPoint(lambda, phi2) {
  ranges.push(range = [lambda02 = lambda, lambda1 = lambda]);
  if (phi2 < phi0) phi0 = phi2;
  if (phi2 > phi1) phi1 = phi2;
}
function linePoint(lambda, phi2) {
  var p = cartesian([lambda * radians, phi2 * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2, sign3 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees2 * sign3, phii, antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign3 * lambda2 < lambdai && lambdai < sign3 * lambda)) {
      phii = inflection[1] * degrees2;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign3 * lambda2 < lambdai && lambdai < sign3 * lambda)) {
      phii = -inflection[1] * degrees2;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi2 < phi0) phi0 = phi2;
      if (phi2 > phi1) phi1 = phi2;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
      }
    } else {
      if (lambda1 >= lambda02) {
        if (lambda < lambda02) lambda02 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda02 = lambda, lambda1 = lambda]);
  }
  if (phi2 < phi0) phi0 = phi2;
  if (phi2 > phi1) phi1 = phi2;
  p0 = p, lambda2 = lambda;
}
function boundsLineStart() {
  boundsStream.point = linePoint;
}
function boundsLineEnd() {
  range[0] = lambda02, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}
function boundsRingPoint(lambda, phi2) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda002 = lambda, phi002 = phi2;
  }
  areaStream.point(lambda, phi2);
  linePoint(lambda, phi2);
}
function boundsRingStart() {
  areaStream.lineStart();
}
function boundsRingEnd() {
  boundsRingPoint(lambda002, phi002);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon4) lambda02 = -(lambda1 = 180);
  range[0] = lambda02, range[1] = lambda1;
  p0 = null;
}
function angle(lambda04, lambda12) {
  return (lambda12 -= lambda04) < 0 ? lambda12 + 360 : lambda12;
}
function rangeCompare(a2, b) {
  return a2[0] - b[0];
}
function rangeContains(range2, x5) {
  return range2[0] <= range2[1] ? range2[0] <= x5 && x5 <= range2[1] : x5 < range2[0] || range2[1] < x5;
}
function bounds_default(feature) {
  var i, n, a2, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
  ranges = [];
  stream_default(feature, boundsStream);
  if (n = ranges.length) {
    ranges.sort(rangeCompare);
    for (i = 1, a2 = ranges[0], merged = [a2]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a2, b[0]) || rangeContains(a2, b[1])) {
        if (angle(a2[0], b[1]) > angle(a2[0], a2[1])) a2[1] = b[1];
        if (angle(b[0], a2[1]) > angle(a2[0], a2[1])) a2[0] = b[0];
      } else {
        merged.push(a2 = b);
      }
    }
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a2 = merged[n]; i <= n; a2 = b, ++i) {
      b = merged[i];
      if ((delta = angle(a2[1], b[0])) > deltaMax) deltaMax = delta, lambda02 = b[0], lambda1 = a2[1];
    }
  }
  ranges = range = null;
  return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
}
var lambda02, phi0, lambda1, phi1, lambda2, lambda002, phi002, p0, deltaSum, ranges, range, boundsStream;
var init_bounds = __esm({
  "node_modules/c3/node_modules/d3-geo/src/bounds.js"() {
    init_adder();
    init_area2();
    init_cartesian();
    init_math4();
    init_stream();
    deltaSum = adder_default();
    boundsStream = {
      point: boundsPoint,
      lineStart: boundsLineStart,
      lineEnd: boundsLineEnd,
      polygonStart: function() {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum.reset();
        areaStream.polygonStart();
      },
      polygonEnd: function() {
        areaStream.polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if (areaRingSum < 0) lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon4) phi1 = 90;
        else if (deltaSum < -epsilon4) phi0 = -90;
        range[0] = lambda02, range[1] = lambda1;
      },
      sphere: function() {
        lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/centroid.js
function centroidPoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var cosPhi = cos2(phi2);
  centroidPointCartesian(cosPhi * cos2(lambda), cosPhi * sin2(lambda), sin2(phi2));
}
function centroidPointCartesian(x5, y5, z) {
  ++W0;
  X0 += (x5 - X0) / W0;
  Y0 += (y5 - Y0) / W0;
  Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var cosPhi = cos2(phi2);
  x0 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi2);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var cosPhi = cos2(phi2), x5 = cosPhi * cos2(lambda), y5 = cosPhi * sin2(lambda), z = sin2(phi2), w = atan2(sqrt((w = y0 * z - z0 * y5) * w + (w = z0 * x5 - x0 * z) * w + (w = x0 * y5 - y0 * x5) * w), x0 * x5 + y0 * y5 + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x5));
  Y1 += w * (y0 + (y0 = y5));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda003, phi003);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi2) {
  lambda003 = lambda, phi003 = phi2;
  lambda *= radians, phi2 *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos2(phi2);
  x0 = cosPhi * cos2(lambda);
  y0 = cosPhi * sin2(lambda);
  z0 = sin2(phi2);
  centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var cosPhi = cos2(phi2), x5 = cosPhi * cos2(lambda), y5 = cosPhi * sin2(lambda), z = sin2(phi2), cx = y0 * z - z0 * y5, cy = z0 * x5 - x0 * z, cz = x0 * y5 - y0 * x5, m = sqrt(cx * cx + cy * cy + cz * cz), w = asin(m), v = m && -w / m;
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x5));
  Y1 += w * (y0 + (y0 = y5));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}
function centroid_default(object2) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
  stream_default(object2, centroidStream);
  var x5 = X2, y5 = Y2, z = Z2, m = x5 * x5 + y5 * y5 + z * z;
  if (m < epsilon22) {
    x5 = X1, y5 = Y1, z = Z1;
    if (W1 < epsilon4) x5 = X0, y5 = Y0, z = Z0;
    m = x5 * x5 + y5 * y5 + z * z;
    if (m < epsilon22) return [NaN, NaN];
  }
  return [atan2(y5, x5) * degrees2, asin(z / sqrt(m)) * degrees2];
}
var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda003, phi003, x0, y0, z0, centroidStream;
var init_centroid = __esm({
  "node_modules/c3/node_modules/d3-geo/src/centroid.js"() {
    init_math4();
    init_noop2();
    init_stream();
    centroidStream = {
      sphere: noop2,
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/constant.js
function constant_default9(x5) {
  return function() {
    return x5;
  };
}
var init_constant9 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-geo/src/compose.js
function compose_default(a2, b) {
  function compose(x5, y5) {
    return x5 = a2(x5, y5), b(x5[0], x5[1]);
  }
  if (a2.invert && b.invert) compose.invert = function(x5, y5) {
    return x5 = b.invert(x5, y5), x5 && a2.invert(x5[0], x5[1]);
  };
  return compose;
}
var init_compose = __esm({
  "node_modules/c3/node_modules/d3-geo/src/compose.js"() {
  }
});

// node_modules/c3/node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi2) {
  return [abs(lambda) > pi4 ? lambda + Math.round(-lambda / tau4) * tau4 : lambda, phi2];
}
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau4) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi2) {
    return lambda += deltaLambda, [lambda > pi4 ? lambda - tau4 : lambda < -pi4 ? lambda + tau4 : lambda, phi2];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos2(deltaPhi), sinDeltaPhi = sin2(deltaPhi), cosDeltaGamma = cos2(deltaGamma), sinDeltaGamma = sin2(deltaGamma);
  function rotation(lambda, phi2) {
    var cosPhi = cos2(phi2), x5 = cos2(lambda) * cosPhi, y5 = sin2(lambda) * cosPhi, z = sin2(phi2), k2 = z * cosDeltaPhi + x5 * sinDeltaPhi;
    return [
      atan2(y5 * cosDeltaGamma - k2 * sinDeltaGamma, x5 * cosDeltaPhi - z * sinDeltaPhi),
      asin(k2 * cosDeltaGamma + y5 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi2) {
    var cosPhi = cos2(phi2), x5 = cos2(lambda) * cosPhi, y5 = sin2(lambda) * cosPhi, z = sin2(phi2), k2 = z * cosDeltaGamma - y5 * sinDeltaGamma;
    return [
      atan2(y5 * cosDeltaGamma + z * sinDeltaGamma, x5 * cosDeltaPhi + k2 * sinDeltaPhi),
      asin(k2 * cosDeltaPhi - x5 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
  function forward(coordinates2) {
    coordinates2 = rotate(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees2, coordinates2[1] *= degrees2, coordinates2;
  }
  forward.invert = function(coordinates2) {
    coordinates2 = rotate.invert(coordinates2[0] * radians, coordinates2[1] * radians);
    return coordinates2[0] *= degrees2, coordinates2[1] *= degrees2, coordinates2;
  };
  return forward;
}
var init_rotation = __esm({
  "node_modules/c3/node_modules/d3-geo/src/rotation.js"() {
    init_compose();
    init_math4();
    rotationIdentity.invert = rotationIdentity;
  }
});

// node_modules/c3/node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction, t03, t13) {
  if (!delta) return;
  var cosRadius = cos2(radius), sinRadius = sin2(radius), step = direction * delta;
  if (t03 == null) {
    t03 = radius + direction * tau4;
    t13 = radius - step / 2;
  } else {
    t03 = circleRadius(cosRadius, t03);
    t13 = circleRadius(cosRadius, t13);
    if (direction > 0 ? t03 < t13 : t03 > t13) t03 += direction * tau4;
  }
  for (var point6, t = t03; direction > 0 ? t > t13 : t < t13; t -= step) {
    point6 = spherical([cosRadius, -sinRadius * cos2(t), -sinRadius * sin2(t)]);
    stream.point(point6[0], point6[1]);
  }
}
function circleRadius(cosRadius, point6) {
  point6 = cartesian(point6), point6[0] -= cosRadius;
  cartesianNormalizeInPlace(point6);
  var radius = acos(-point6[1]);
  return ((-point6[2] < 0 ? -radius : radius) + tau4 - epsilon4) % tau4;
}
function circle_default() {
  var center2 = constant_default9([0, 0]), radius = constant_default9(90), precision = constant_default9(6), ring, rotate, stream = { point: point6 };
  function point6(x5, y5) {
    ring.push(x5 = rotate(x5, y5));
    x5[0] *= degrees2, x5[1] *= degrees2;
  }
  function circle2() {
    var c4 = center2.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c4[0] * radians, -c4[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c4 = { type: "Polygon", coordinates: [ring] };
    ring = rotate = null;
    return c4;
  }
  circle2.center = function(_) {
    return arguments.length ? (center2 = typeof _ === "function" ? _ : constant_default9([+_[0], +_[1]]), circle2) : center2;
  };
  circle2.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default9(+_), circle2) : radius;
  };
  circle2.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant_default9(+_), circle2) : precision;
  };
  return circle2;
}
var init_circle2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/circle.js"() {
    init_cartesian();
    init_constant9();
    init_math4();
    init_rotation();
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/buffer.js
function buffer_default2() {
  var lines = [], line;
  return {
    point: function(x5, y5, m) {
      line.push([x5, y5, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop2,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
var init_buffer2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/buffer.js"() {
    init_noop2();
  }
});

// node_modules/c3/node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a2, b) {
  return abs(a2[0] - b[0]) < epsilon4 && abs(a2[1] - b[1]) < epsilon4;
}
var init_pointEqual = __esm({
  "node_modules/c3/node_modules/d3-geo/src/pointEqual.js"() {
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point6, points, other, entry) {
  this.x = point6;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0) return;
    var n2, p02 = segment[0], p1 = segment[n2], x5;
    if (pointEqual_default(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream.lineStart();
        for (i = 0; i < n2; ++i) stream.point((p02 = segment[i])[0], p02[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon4;
    }
    subject.push(x5 = new Intersection(p02, segment, null, true));
    clip.push(x5.o = new Intersection(p02, null, x5, false));
    subject.push(x5 = new Intersection(p1, segment, null, false));
    clip.push(x5.o = new Intersection(p1, null, x5, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }
  var start2 = subject[0], points, point6;
  while (1) {
    var current = start2, isSubject = true;
    while (current.v) if ((current = current.n) === start2) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point6 = points[i])[0], point6[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point6 = points[i])[0], point6[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array4) {
  if (!(n = array4.length)) return;
  var n, i = 0, a2 = array4[0], b;
  while (++i < n) {
    a2.n = b = array4[i];
    b.p = a2;
    a2 = b;
  }
  a2.n = b = array4[0];
  b.p = a2;
}
var init_rejoin = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/rejoin.js"() {
    init_pointEqual();
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/polygonContains.js
function longitude(point6) {
  if (abs(point6[0]) <= pi4)
    return point6[0];
  else
    return sign(point6[0]) * ((abs(point6[0]) + pi4) % tau4 - pi4);
}
function polygonContains_default(polygon, point6) {
  var lambda = longitude(point6), phi2 = point6[1], sinPhi = sin2(phi2), normal = [sin2(lambda), -cos2(lambda), 0], angle2 = 0, winding = 0;
  sum.reset();
  if (sinPhi === 1) phi2 = halfPi3 + epsilon4;
  else if (sinPhi === -1) phi2 = -halfPi3 - epsilon4;
  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring, m, point0 = ring[m - 1], lambda04 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi03 = sin2(phi02), cosPhi03 = cos2(phi02);
    for (var j = 0; j < m; ++j, lambda04 = lambda12, sinPhi03 = sinPhi1, cosPhi03 = cosPhi1, point0 = point1) {
      var point1 = ring[j], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin2(phi12), cosPhi1 = cos2(phi12), delta = lambda12 - lambda04, sign3 = delta >= 0 ? 1 : -1, absDelta = sign3 * delta, antimeridian = absDelta > pi4, k2 = sinPhi03 * sinPhi1;
      sum.add(atan2(k2 * sign3 * sin2(absDelta), cosPhi03 * cosPhi1 + k2 * cos2(absDelta)));
      angle2 += antimeridian ? delta + sign3 * tau4 : delta;
      if (antimeridian ^ lambda04 >= lambda ^ lambda12 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi2 > phiArc || phi2 === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon4 || angle2 < epsilon4 && sum < -epsilon4) ^ winding & 1;
}
var sum;
var init_polygonContains = __esm({
  "node_modules/c3/node_modules/d3-geo/src/polygonContains.js"() {
    init_adder();
    init_cartesian();
    init_math4();
    sum = adder_default();
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start2) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default2(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point6;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge_default(segments);
        var startInside = polygonContains_default(polygon, start2);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point6(lambda, phi2) {
      if (pointVisible(lambda, phi2)) sink.point(lambda, phi2);
    }
    function pointLine(lambda, phi2) {
      line.point(lambda, phi2);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point6;
      line.lineEnd();
    }
    function pointRing(lambda, phi2) {
      ring.push([lambda, phi2]);
      ringSink.point(lambda, phi2);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point7;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n) return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point7 = segment[i])[0], point7[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a2, b) {
  return ((a2 = a2.x)[0] < 0 ? a2[1] - halfPi3 - epsilon4 : halfPi3 - a2[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi3 - epsilon4 : halfPi3 - b[1]);
}
var init_clip = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/index.js"() {
    init_buffer2();
    init_rejoin();
    init_math4();
    init_polygonContains();
    init_src();
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/antimeridian.js
function clipAntimeridianLine(stream) {
  var lambda04 = NaN, phi02 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi4 : -pi4, delta = abs(lambda12 - lambda04);
      if (abs(delta - pi4) < epsilon4) {
        stream.point(lambda04, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi3 : -halfPi3);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        stream.point(lambda12, phi02);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi4) {
        if (abs(lambda04 - sign0) < epsilon4) lambda04 -= sign0 * epsilon4;
        if (abs(lambda12 - sign1) < epsilon4) lambda12 -= sign1 * epsilon4;
        phi02 = clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        clean = 0;
      }
      stream.point(lambda04 = lambda12, phi02 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda04 = phi02 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12) {
  var cosPhi03, cosPhi1, sinLambda0Lambda1 = sin2(lambda04 - lambda12);
  return abs(sinLambda0Lambda1) > epsilon4 ? atan((sin2(phi02) * (cosPhi1 = cos2(phi12)) * sin2(lambda12) - sin2(phi12) * (cosPhi03 = cos2(phi02)) * sin2(lambda04)) / (cosPhi03 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi2;
  if (from == null) {
    phi2 = direction * halfPi3;
    stream.point(-pi4, phi2);
    stream.point(0, phi2);
    stream.point(pi4, phi2);
    stream.point(pi4, 0);
    stream.point(pi4, -phi2);
    stream.point(0, -phi2);
    stream.point(-pi4, -phi2);
    stream.point(-pi4, 0);
    stream.point(-pi4, phi2);
  } else if (abs(from[0] - to[0]) > epsilon4) {
    var lambda = from[0] < to[0] ? pi4 : -pi4;
    phi2 = direction * lambda / 2;
    stream.point(-lambda, phi2);
    stream.point(0, phi2);
    stream.point(lambda, phi2);
  } else {
    stream.point(to[0], to[1]);
  }
}
var antimeridian_default;
var init_antimeridian = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/antimeridian.js"() {
    init_clip();
    init_math4();
    antimeridian_default = clip_default(
      function() {
        return true;
      },
      clipAntimeridianLine,
      clipAntimeridianInterpolate,
      [-pi4, -halfPi3]
    );
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/circle.js
function circle_default2(radius) {
  var cr = cos2(radius), delta = 6 * radians, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon4;
  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }
  function visible(lambda, phi2) {
    return cos2(lambda) * cos2(phi2) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi2) {
        var point1 = [lambda, phi2], point22, v = visible(lambda, phi2), c4 = smallRadius ? v ? 0 : code(lambda, phi2) : v ? code(lambda + (lambda < 0 ? pi4 : -pi4), phi2) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        if (v !== v0) {
          point22 = intersect2(point0, point1);
          if (!point22 || pointEqual_default(point0, point22) || pointEqual_default(point1, point22))
            point1[2] = 1;
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            stream.lineStart();
            point22 = intersect2(point1, point0);
            stream.point(point22[0], point22[1]);
          } else {
            point22 = intersect2(point0, point1);
            stream.point(point22[0], point22[1], 2);
            stream.lineEnd();
          }
          point0 = point22;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          if (!(c4 & c0) && (t = intersect2(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1], 3);
            }
          }
        }
        if (v && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c4;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect2(a2, b, two) {
    var pa = cartesian(a2), pb = cartesian(b);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant) return !two && a2;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A5 = cartesianScale(n1, c1), B2 = cartesianScale(n2, c22);
    cartesianAddInPlace(A5, B2);
    var u = n1xn2, w = cartesianDot(A5, u), uu = cartesianDot(u, u), t22 = w * w - uu * (cartesianDot(A5, A5) - 1);
    if (t22 < 0) return;
    var t = sqrt(t22), q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A5);
    q = spherical(q);
    if (!two) return q;
    var lambda04 = a2[0], lambda12 = b[0], phi02 = a2[1], phi12 = b[1], z;
    if (lambda12 < lambda04) z = lambda04, lambda04 = lambda12, lambda12 = z;
    var delta2 = lambda12 - lambda04, polar = abs(delta2 - pi4) < epsilon4, meridian = polar || delta2 < epsilon4;
    if (!polar && phi12 < phi02) z = phi02, phi02 = phi12, phi12 = z;
    if (meridian ? polar ? phi02 + phi12 > 0 ^ q[1] < (abs(q[0] - lambda04) < epsilon4 ? phi02 : phi12) : phi02 <= q[1] && q[1] <= phi12 : delta2 > pi4 ^ (lambda04 <= q[0] && q[0] <= lambda12)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A5);
      return [q, spherical(q1)];
    }
  }
  function code(lambda, phi2) {
    var r = smallRadius ? radius : pi4 - radius, code2 = 0;
    if (lambda < -r) code2 |= 1;
    else if (lambda > r) code2 |= 2;
    if (phi2 < -r) code2 |= 4;
    else if (phi2 > r) code2 |= 8;
    return code2;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi4, radius - pi4]);
}
var init_circle3 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/circle.js"() {
    init_cartesian();
    init_circle2();
    init_math4();
    init_pointEqual();
    init_clip();
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/line.js
function line_default(a2, b, x06, y06, x12, y12) {
  var ax = a2[0], ay = a2[1], bx = b[0], by = b[1], t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
  r = x06 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dx > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = x12 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dx > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  r = y06 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dy > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dy > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  if (t03 > 0) a2[0] = ax + t03 * dx, a2[1] = ay + t03 * dy;
  if (t13 < 1) b[0] = ax + t13 * dx, b[1] = ay + t13 * dy;
  return true;
}
var init_line = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/line.js"() {
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/rectangle.js
function clipRectangle(x06, y06, x12, y12) {
  function visible(x5, y5) {
    return x06 <= x5 && x5 <= x12 && y06 <= y5 && y5 <= y12;
  }
  function interpolate(from, to, direction, stream) {
    var a2 = 0, a1 = 0;
    if (from == null || (a2 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream.point(a2 === 0 || a2 === 3 ? x06 : x12, a2 > 1 ? y12 : y06);
      while ((a2 = (a2 + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs(p[0] - x06) < epsilon4 ? direction > 0 ? 0 : 3 : abs(p[0] - x12) < epsilon4 ? direction > 0 ? 2 : 1 : abs(p[1] - y06) < epsilon4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection2(a2, b) {
    return comparePoint(a2.x, b.x);
  }
  function comparePoint(a2, b) {
    var ca = corner(a2, 1), cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a2[1] : ca === 1 ? a2[0] - b[0] : ca === 2 ? a2[1] - b[1] : b[0] - a2[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default2(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point6(x5, y5) {
      if (visible(x5, y5)) activeStream.point(x5, y5);
    }
    function polygonInside() {
      var winding = 0;
      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring2 = polygon[i], j = 1, m = ring2.length, point7 = ring2[0], a0, a1, b02 = point7[0], b12 = point7[1]; j < m; ++j) {
          a0 = b02, a1 = b12, point7 = ring2[j], b02 = point7[0], b12 = point7[1];
          if (a1 <= y12) {
            if (b12 > y12 && (b02 - a0) * (y12 - a1) > (b12 - a1) * (x06 - a0)) ++winding;
          } else {
            if (b12 <= y12 && (b02 - a0) * (y12 - a1) < (b12 - a1) * (x06 - a0)) --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge_default(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint2;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint2(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point6;
      if (v_) activeStream.lineEnd();
    }
    function linePoint2(x5, y5) {
      var v = visible(x5, y5);
      if (polygon) ring.push([x5, y5]);
      if (first) {
        x__ = x5, y__ = y5, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x5, y5);
        }
      } else {
        if (v && v_) activeStream.point(x5, y5);
        else {
          var a2 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x5 = Math.max(clipMin, Math.min(clipMax, x5)), y5 = Math.max(clipMin, Math.min(clipMax, y5))];
          if (line_default(a2, b, x06, y06, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a2[0], a2[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x5, y5);
            clean = false;
          }
        }
      }
      x_ = x5, y_ = y5, v_ = v;
    }
    return clipStream;
  };
}
var clipMax, clipMin;
var init_rectangle = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/rectangle.js"() {
    init_math4();
    init_buffer2();
    init_line();
    init_rejoin();
    init_src();
    clipMax = 1e9;
    clipMin = -clipMax;
  }
});

// node_modules/c3/node_modules/d3-geo/src/clip/extent.js
function extent_default3() {
  var x06 = 0, y06 = 0, x12 = 960, y12 = 500, cache, cacheStream, clip;
  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipRectangle(x06, y06, x12, y12)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x06 = +_[0][0], y06 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1], cache = cacheStream = null, clip) : [[x06, y06], [x12, y12]];
    }
  };
}
var init_extent3 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/clip/extent.js"() {
    init_rectangle();
  }
});

// node_modules/c3/node_modules/d3-geo/src/length.js
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop2;
}
function lengthPointFirst(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  lambda03 = lambda, sinPhi02 = sin2(phi2), cosPhi02 = cos2(phi2);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi2) {
  lambda *= radians, phi2 *= radians;
  var sinPhi = sin2(phi2), cosPhi = cos2(phi2), delta = abs(lambda - lambda03), cosDelta = cos2(delta), sinDelta = sin2(delta), x5 = cosPhi * sinDelta, y5 = cosPhi02 * sinPhi - sinPhi02 * cosPhi * cosDelta, z = sinPhi02 * sinPhi + cosPhi02 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x5 * x5 + y5 * y5), z));
  lambda03 = lambda, sinPhi02 = sinPhi, cosPhi02 = cosPhi;
}
function length_default(object2) {
  lengthSum.reset();
  stream_default(object2, lengthStream);
  return +lengthSum;
}
var lengthSum, lambda03, sinPhi02, cosPhi02, lengthStream;
var init_length = __esm({
  "node_modules/c3/node_modules/d3-geo/src/length.js"() {
    init_adder();
    init_math4();
    init_noop2();
    init_stream();
    lengthSum = adder_default();
    lengthStream = {
      sphere: noop2,
      point: noop2,
      lineStart: lengthLineStart,
      lineEnd: noop2,
      polygonStart: noop2,
      polygonEnd: noop2
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/distance.js
function distance_default(a2, b) {
  coordinates[0] = a2;
  coordinates[1] = b;
  return length_default(object);
}
var coordinates, object;
var init_distance = __esm({
  "node_modules/c3/node_modules/d3-geo/src/distance.js"() {
    init_length();
    coordinates = [null, null];
    object = { type: "LineString", coordinates };
  }
});

// node_modules/c3/node_modules/d3-geo/src/contains.js
function containsGeometry(geometry, point6) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point6) : false;
}
function containsPoint(coordinates2, point6) {
  return distance_default(coordinates2, point6) === 0;
}
function containsLine(coordinates2, point6) {
  var ao, bo, ab;
  for (var i = 0, n = coordinates2.length; i < n; i++) {
    bo = distance_default(coordinates2[i], point6);
    if (bo === 0) return true;
    if (i > 0) {
      ab = distance_default(coordinates2[i], coordinates2[i - 1]);
      if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon22 * ab)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates2, point6) {
  return !!polygonContains_default(coordinates2.map(ringRadians), pointRadians(point6));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point6) {
  return [point6[0] * radians, point6[1] * radians];
}
function contains_default2(object2, point6) {
  return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point6);
}
var containsObjectType, containsGeometryType;
var init_contains2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/contains.js"() {
    init_polygonContains();
    init_distance();
    init_math4();
    containsObjectType = {
      Feature: function(object2, point6) {
        return containsGeometry(object2.geometry, point6);
      },
      FeatureCollection: function(object2, point6) {
        var features = object2.features, i = -1, n = features.length;
        while (++i < n) if (containsGeometry(features[i].geometry, point6)) return true;
        return false;
      }
    };
    containsGeometryType = {
      Sphere: function() {
        return true;
      },
      Point: function(object2, point6) {
        return containsPoint(object2.coordinates, point6);
      },
      MultiPoint: function(object2, point6) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) if (containsPoint(coordinates2[i], point6)) return true;
        return false;
      },
      LineString: function(object2, point6) {
        return containsLine(object2.coordinates, point6);
      },
      MultiLineString: function(object2, point6) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) if (containsLine(coordinates2[i], point6)) return true;
        return false;
      },
      Polygon: function(object2, point6) {
        return containsPolygon(object2.coordinates, point6);
      },
      MultiPolygon: function(object2, point6) {
        var coordinates2 = object2.coordinates, i = -1, n = coordinates2.length;
        while (++i < n) if (containsPolygon(coordinates2[i], point6)) return true;
        return false;
      },
      GeometryCollection: function(object2, point6) {
        var geometries = object2.geometries, i = -1, n = geometries.length;
        while (++i < n) if (containsGeometry(geometries[i], point6)) return true;
        return false;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/graticule.js
function graticuleX(y06, y12, dy) {
  var y5 = range_default(y06, y12 - epsilon4, dy).concat(y12);
  return function(x5) {
    return y5.map(function(y6) {
      return [x5, y6];
    });
  };
}
function graticuleY(x06, x12, dx) {
  var x5 = range_default(x06, x12 - epsilon4, dx).concat(x12);
  return function(y5) {
    return x5.map(function(x6) {
      return [x6, y5];
    });
  };
}
function graticule() {
  var x12, x06, X13, X03, y12, y06, Y13, Y03, dx = 10, dy = dx, DX = 90, DY = 360, x5, y5, X3, Y3, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range_default(ceil(X03 / DX) * DX, X13, DX).map(X3).concat(range_default(ceil(Y03 / DY) * DY, Y13, DY).map(Y3)).concat(range_default(ceil(x06 / dx) * dx, x12, dx).filter(function(x6) {
      return abs(x6 % DX) > epsilon4;
    }).map(x5)).concat(range_default(ceil(y06 / dy) * dy, y12, dy).filter(function(y6) {
      return abs(y6 % DY) > epsilon4;
    }).map(y5));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates2) {
      return { type: "LineString", coordinates: coordinates2 };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X3(X03).concat(
          Y3(Y13).slice(1),
          X3(X13).reverse().slice(1),
          Y3(Y03).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_) {
    if (!arguments.length) return graticule2.extentMinor();
    return graticule2.extentMajor(_).extentMinor(_);
  };
  graticule2.extentMajor = function(_) {
    if (!arguments.length) return [[X03, Y03], [X13, Y13]];
    X03 = +_[0][0], X13 = +_[1][0];
    Y03 = +_[0][1], Y13 = +_[1][1];
    if (X03 > X13) _ = X03, X03 = X13, X13 = _;
    if (Y03 > Y13) _ = Y03, Y03 = Y13, Y13 = _;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_) {
    if (!arguments.length) return [[x06, y06], [x12, y12]];
    x06 = +_[0][0], x12 = +_[1][0];
    y06 = +_[0][1], y12 = +_[1][1];
    if (x06 > x12) _ = x06, x06 = x12, x12 = _;
    if (y06 > y12) _ = y06, y06 = y12, y12 = _;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_) {
    if (!arguments.length) return graticule2.stepMinor();
    return graticule2.stepMajor(_).stepMinor(_);
  };
  graticule2.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule2;
  };
  graticule2.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x5 = graticuleX(y06, y12, 90);
    y5 = graticuleY(x06, x12, precision);
    X3 = graticuleX(Y03, Y13, 90);
    Y3 = graticuleY(X03, X13, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon4], [180, 90 - epsilon4]]).extentMinor([[-180, -80 - epsilon4], [180, 80 + epsilon4]]);
}
function graticule10() {
  return graticule()();
}
var init_graticule = __esm({
  "node_modules/c3/node_modules/d3-geo/src/graticule.js"() {
    init_src();
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/interpolate.js
function interpolate_default2(a2, b) {
  var x06 = a2[0] * radians, y06 = a2[1] * radians, x12 = b[0] * radians, y12 = b[1] * radians, cy0 = cos2(y06), sy0 = sin2(y06), cy1 = cos2(y12), sy1 = sin2(y12), kx0 = cy0 * cos2(x06), ky0 = cy0 * sin2(x06), kx1 = cy1 * cos2(x12), ky1 = cy1 * sin2(x12), d = 2 * asin(sqrt(haversin(y12 - y06) + cy0 * cy1 * haversin(x12 - x06))), k2 = sin2(d);
  var interpolate = d ? function(t) {
    var B2 = sin2(t *= d) / k2, A5 = sin2(d - t) / k2, x5 = A5 * kx0 + B2 * kx1, y5 = A5 * ky0 + B2 * ky1, z = A5 * sy0 + B2 * sy1;
    return [
      atan2(y5, x5) * degrees2,
      atan2(z, sqrt(x5 * x5 + y5 * y5)) * degrees2
    ];
  } : function() {
    return [x06 * degrees2, y06 * degrees2];
  };
  interpolate.distance = d;
  return interpolate;
}
var init_interpolate2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/interpolate.js"() {
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/identity.js
function identity_default4(x5) {
  return x5;
}
var init_identity4 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/identity.js"() {
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/area.js
function areaRingStart2() {
  areaStream2.point = areaPointFirst2;
}
function areaPointFirst2(x5, y5) {
  areaStream2.point = areaPoint2;
  x00 = x02 = x5, y00 = y02 = y5;
}
function areaPoint2(x5, y5) {
  areaRingSum2.add(y02 * x5 - x02 * y5);
  x02 = x5, y02 = y5;
}
function areaRingEnd2() {
  areaPoint2(x00, y00);
}
var areaSum2, areaRingSum2, x00, y00, x02, y02, areaStream2, area_default3;
var init_area3 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/area.js"() {
    init_adder();
    init_math4();
    init_noop2();
    areaSum2 = adder_default();
    areaRingSum2 = adder_default();
    areaStream2 = {
      point: noop2,
      lineStart: noop2,
      lineEnd: noop2,
      polygonStart: function() {
        areaStream2.lineStart = areaRingStart2;
        areaStream2.lineEnd = areaRingEnd2;
      },
      polygonEnd: function() {
        areaStream2.lineStart = areaStream2.lineEnd = areaStream2.point = noop2;
        areaSum2.add(abs(areaRingSum2));
        areaRingSum2.reset();
      },
      result: function() {
        var area = areaSum2 / 2;
        areaSum2.reset();
        return area;
      }
    };
    area_default3 = areaStream2;
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/bounds.js
function boundsPoint2(x5, y5) {
  if (x5 < x03) x03 = x5;
  if (x5 > x1) x1 = x5;
  if (y5 < y03) y03 = y5;
  if (y5 > y1) y1 = y5;
}
var x03, y03, x1, y1, boundsStream2, bounds_default2;
var init_bounds2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/bounds.js"() {
    init_noop2();
    x03 = Infinity;
    y03 = x03;
    x1 = -x03;
    y1 = x1;
    boundsStream2 = {
      point: boundsPoint2,
      lineStart: noop2,
      lineEnd: noop2,
      polygonStart: noop2,
      polygonEnd: noop2,
      result: function() {
        var bounds = [[x03, y03], [x1, y1]];
        x1 = y1 = -(y03 = x03 = Infinity);
        return bounds;
      }
    };
    bounds_default2 = boundsStream2;
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/centroid.js
function centroidPoint2(x5, y5) {
  X02 += x5;
  Y02 += y5;
  ++Z02;
}
function centroidLineStart2() {
  centroidStream2.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x5, y5) {
  centroidStream2.point = centroidPointLine;
  centroidPoint2(x04 = x5, y04 = y5);
}
function centroidPointLine(x5, y5) {
  var dx = x5 - x04, dy = y5 - y04, z = sqrt(dx * dx + dy * dy);
  X12 += z * (x04 + x5) / 2;
  Y12 += z * (y04 + y5) / 2;
  Z12 += z;
  centroidPoint2(x04 = x5, y04 = y5);
}
function centroidLineEnd2() {
  centroidStream2.point = centroidPoint2;
}
function centroidRingStart2() {
  centroidStream2.point = centroidPointFirstRing;
}
function centroidRingEnd2() {
  centroidPointRing(x002, y002);
}
function centroidPointFirstRing(x5, y5) {
  centroidStream2.point = centroidPointRing;
  centroidPoint2(x002 = x04 = x5, y002 = y04 = y5);
}
function centroidPointRing(x5, y5) {
  var dx = x5 - x04, dy = y5 - y04, z = sqrt(dx * dx + dy * dy);
  X12 += z * (x04 + x5) / 2;
  Y12 += z * (y04 + y5) / 2;
  Z12 += z;
  z = y04 * x5 - x04 * y5;
  X22 += z * (x04 + x5);
  Y22 += z * (y04 + y5);
  Z22 += z * 3;
  centroidPoint2(x04 = x5, y04 = y5);
}
var X02, Y02, Z02, X12, Y12, Z12, X22, Y22, Z22, x002, y002, x04, y04, centroidStream2, centroid_default2;
var init_centroid2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/centroid.js"() {
    init_math4();
    X02 = 0;
    Y02 = 0;
    Z02 = 0;
    X12 = 0;
    Y12 = 0;
    Z12 = 0;
    X22 = 0;
    Y22 = 0;
    Z22 = 0;
    centroidStream2 = {
      point: centroidPoint2,
      lineStart: centroidLineStart2,
      lineEnd: centroidLineEnd2,
      polygonStart: function() {
        centroidStream2.lineStart = centroidRingStart2;
        centroidStream2.lineEnd = centroidRingEnd2;
      },
      polygonEnd: function() {
        centroidStream2.point = centroidPoint2;
        centroidStream2.lineStart = centroidLineStart2;
        centroidStream2.lineEnd = centroidLineEnd2;
      },
      result: function() {
        var centroid = Z22 ? [X22 / Z22, Y22 / Z22] : Z12 ? [X12 / Z12, Y12 / Z12] : Z02 ? [X02 / Z02, Y02 / Z02] : [NaN, NaN];
        X02 = Y02 = Z02 = X12 = Y12 = Z12 = X22 = Y22 = Z22 = 0;
        return centroid;
      }
    };
    centroid_default2 = centroidStream2;
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/context.js
function PathContext(context) {
  this._context = context;
}
var init_context = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/context.js"() {
    init_math4();
    init_noop2();
    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x5, y5) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x5, y5);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x5, y5);
            break;
          }
          default: {
            this._context.moveTo(x5 + this._radius, y5);
            this._context.arc(x5, y5, this._radius, 0, tau4);
            break;
          }
        }
      },
      result: noop2
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/measure.js
function lengthPointFirst2(x5, y5) {
  lengthStream2.point = lengthPoint2;
  x003 = x05 = x5, y003 = y05 = y5;
}
function lengthPoint2(x5, y5) {
  x05 -= x5, y05 -= y5;
  lengthSum2.add(sqrt(x05 * x05 + y05 * y05));
  x05 = x5, y05 = y5;
}
var lengthSum2, lengthRing, x003, y003, x05, y05, lengthStream2, measure_default;
var init_measure = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/measure.js"() {
    init_adder();
    init_math4();
    init_noop2();
    lengthSum2 = adder_default();
    lengthStream2 = {
      point: noop2,
      lineStart: function() {
        lengthStream2.point = lengthPointFirst2;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint2(x003, y003);
        lengthStream2.point = noop2;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length2 = +lengthSum2;
        lengthSum2.reset();
        return length2;
      }
    };
    measure_default = lengthStream2;
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/string.js
function PathString() {
  this._string = [];
}
function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
var init_string2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/string.js"() {
    PathString.prototype = {
      _radius: 4.5,
      _circle: circle(4.5),
      pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
      },
      point: function(x5, y5) {
        switch (this._point) {
          case 0: {
            this._string.push("M", x5, ",", y5);
            this._point = 1;
            break;
          }
          case 1: {
            this._string.push("L", x5, ",", y5);
            break;
          }
          default: {
            if (this._circle == null) this._circle = circle(this._radius);
            this._string.push("M", x5, ",", y5, this._circle);
            break;
          }
        }
      },
      result: function() {
        if (this._string.length) {
          var result = this._string.join("");
          this._string = [];
          return result;
        } else {
          return null;
        }
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/path/index.js
function path_default2(projection2, context) {
  var pointRadius = 4.5, projectionStream, contextStream;
  function path2(object2) {
    if (object2) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      stream_default(object2, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path2.area = function(object2) {
    stream_default(object2, projectionStream(area_default3));
    return area_default3.result();
  };
  path2.measure = function(object2) {
    stream_default(object2, projectionStream(measure_default));
    return measure_default.result();
  };
  path2.bounds = function(object2) {
    stream_default(object2, projectionStream(bounds_default2));
    return bounds_default2.result();
  };
  path2.centroid = function(object2) {
    stream_default(object2, projectionStream(centroid_default2));
    return centroid_default2.result();
  };
  path2.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection2 = null, identity_default4) : (projection2 = _).stream, path2) : projection2;
  };
  path2.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path2;
  };
  path2.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path2;
  };
  return path2.projection(projection2).context(context);
}
var init_path2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/path/index.js"() {
    init_identity4();
    init_stream();
    init_area3();
    init_bounds2();
    init_centroid2();
    init_context();
    init_measure();
    init_string2();
  }
});

// node_modules/c3/node_modules/d3-geo/src/transform.js
function transform_default(methods) {
  return {
    stream: transformer(methods)
  };
}
function transformer(methods) {
  return function(stream) {
    var s2 = new TransformStream();
    for (var key in methods) s2[key] = methods[key];
    s2.stream = stream;
    return s2;
  };
}
function TransformStream() {
}
var init_transform2 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/transform.js"() {
    TransformStream.prototype = {
      constructor: TransformStream,
      point: function(x5, y5) {
        this.stream.point(x5, y5);
      },
      sphere: function() {
        this.stream.sphere();
      },
      lineStart: function() {
        this.stream.lineStart();
      },
      lineEnd: function() {
        this.stream.lineEnd();
      },
      polygonStart: function() {
        this.stream.polygonStart();
      },
      polygonEnd: function() {
        this.stream.polygonEnd();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object2) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null) projection2.clipExtent(null);
  stream_default(object2, projection2.stream(bounds_default2));
  fitBounds(bounds_default2.result());
  if (clip != null) projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent, object2) {
  return fit(projection2, function(b) {
    var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k2 = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x5 = +extent[0][0] + (w - k2 * (b[1][0] + b[0][0])) / 2, y5 = +extent[0][1] + (h - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x5, y5]);
  }, object2);
}
function fitSize(projection2, size, object2) {
  return fitExtent(projection2, [[0, 0], size], object2);
}
function fitWidth(projection2, width, object2) {
  return fit(projection2, function(b) {
    var w = +width, k2 = w / (b[1][0] - b[0][0]), x5 = (w - k2 * (b[1][0] + b[0][0])) / 2, y5 = -k2 * b[0][1];
    projection2.scale(150 * k2).translate([x5, y5]);
  }, object2);
}
function fitHeight(projection2, height, object2) {
  return fit(projection2, function(b) {
    var h = +height, k2 = h / (b[1][1] - b[0][1]), x5 = -k2 * b[0][0], y5 = (h - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x5, y5]);
  }, object2);
}
var init_fit = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/fit.js"() {
    init_stream();
    init_bounds2();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/resample.js
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer({
    point: function(x5, y5) {
      x5 = project(x5, y5);
      this.stream.point(x5[0], x5[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x06, y06, lambda04, a0, b02, c0, x12, y12, lambda12, a1, b12, c1, depth, stream) {
    var dx = x12 - x06, dy = y12 - y06, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a2 = a0 + a1, b = b02 + b12, c4 = c0 + c1, m = sqrt(a2 * a2 + b * b + c4 * c4), phi2 = asin(c4 /= m), lambda22 = abs(abs(c4) - 1) < epsilon4 || abs(lambda04 - lambda12) < epsilon4 ? (lambda04 + lambda12) / 2 : atan2(b, a2), p = project(lambda22, phi2), x22 = p[0], y22 = p[1], dx2 = x22 - x06, dy2 = y22 - y06, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b02 * b12 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x06, y06, lambda04, a0, b02, c0, x22, y22, lambda22, a2 /= m, b /= m, c4, depth, stream);
        stream.point(x22, y22);
        resampleLineTo(x22, y22, lambda22, a2, b, c4, x12, y12, lambda12, a1, b12, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda004, x004, y004, a00, b00, c00, lambda04, x06, y06, a0, b02, c0;
    var resampleStream = {
      point: point6,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point6(x5, y5) {
      x5 = project(x5, y5);
      stream.point(x5[0], x5[1]);
    }
    function lineStart() {
      x06 = NaN;
      resampleStream.point = linePoint2;
      stream.lineStart();
    }
    function linePoint2(lambda, phi2) {
      var c4 = cartesian([lambda, phi2]), p = project(lambda, phi2);
      resampleLineTo(x06, y06, lambda04, a0, b02, c0, x06 = p[0], y06 = p[1], lambda04 = lambda, a0 = c4[0], b02 = c4[1], c0 = c4[2], maxDepth, stream);
      stream.point(x06, y06);
    }
    function lineEnd() {
      resampleStream.point = point6;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi2) {
      linePoint2(lambda004 = lambda, phi2), x004 = x06, y004 = y06, a00 = a0, b00 = b02, c00 = c0;
      resampleStream.point = linePoint2;
    }
    function ringEnd() {
      resampleLineTo(x06, y06, lambda04, a0, b02, c0, x004, y004, lambda004, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}
var maxDepth, cosMinDistance;
var init_resample = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/resample.js"() {
    init_cartesian();
    init_math4();
    init_transform2();
    maxDepth = 16;
    cosMinDistance = cos2(30 * radians);
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/index.js
function transformRotate(rotate) {
  return transformer({
    point: function(x5, y5) {
      var r = rotate(x5, y5);
      return this.stream.point(r[0], r[1]);
    }
  });
}
function scaleTranslate(k2, dx, dy, sx, sy) {
  function transform2(x5, y5) {
    x5 *= sx;
    y5 *= sy;
    return [dx + k2 * x5, dy - k2 * y5];
  }
  transform2.invert = function(x5, y5) {
    return [(x5 - dx) / k2 * sx, (dy - y5) / k2 * sy];
  };
  return transform2;
}
function scaleTranslateRotate(k2, dx, dy, sx, sy, alpha) {
  var cosAlpha = cos2(alpha), sinAlpha = sin2(alpha), a2 = cosAlpha * k2, b = sinAlpha * k2, ai = cosAlpha / k2, bi = sinAlpha / k2, ci = (sinAlpha * dy - cosAlpha * dx) / k2, fi = (sinAlpha * dx + cosAlpha * dy) / k2;
  function transform2(x5, y5) {
    x5 *= sx;
    y5 *= sy;
    return [a2 * x5 - b * y5 + dx, dy - b * x5 - a2 * y5];
  }
  transform2.invert = function(x5, y5) {
    return [sx * (ai * x5 - bi * y5 + ci), sy * (fi - bi * x5 - ai * y5)];
  };
  return transform2;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k2 = 150, x5 = 480, y5 = 250, lambda = 0, phi2 = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x06 = null, y06, x12, y12, postclip = identity_default4, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
  function projection2(point6) {
    return projectRotateTransform(point6[0] * radians, point6[1] * radians);
  }
  function invert(point6) {
    point6 = projectRotateTransform.invert(point6[0], point6[1]);
    return point6 && [point6[0] * degrees2, point6[1] * degrees2];
  }
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_) {
    return arguments.length ? (postclip = _, x06 = y06 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? circle_default2(theta = _ * radians) : (theta = null, antimeridian_default), reset()) : theta * degrees2;
  };
  projection2.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x06 = y06 = x12 = y12 = null, identity_default4) : clipRectangle(x06 = +_[0][0], y06 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x06 == null ? null : [[x06, y06], [x12, y12]];
  };
  projection2.scale = function(_) {
    return arguments.length ? (k2 = +_, recenter()) : k2;
  };
  projection2.translate = function(_) {
    return arguments.length ? (x5 = +_[0], y5 = +_[1], recenter()) : [x5, y5];
  };
  projection2.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi2 = _[1] % 360 * radians, recenter()) : [lambda * degrees2, phi2 * degrees2];
  };
  projection2.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees2, deltaPhi * degrees2, deltaGamma * degrees2];
  };
  projection2.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees2;
  };
  projection2.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
  };
  projection2.fitExtent = function(extent, object2) {
    return fitExtent(projection2, extent, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  function recenter() {
    var center2 = scaleTranslateRotate(k2, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi2)), transform2 = (alpha ? scaleTranslateRotate : scaleTranslate)(k2, x5 - center2[0], y5 - center2[1], sx, sy, alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform2);
    projectRotateTransform = compose_default(rotate, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}
var transformRadians;
var init_projection = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/index.js"() {
    init_antimeridian();
    init_circle3();
    init_rectangle();
    init_compose();
    init_identity4();
    init_math4();
    init_rotation();
    init_transform2();
    init_fit();
    init_resample();
    transformRadians = transformer({
      point: function(x5, y5) {
        this.stream.point(x5 * radians, y5 * radians);
      }
    });
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/conic.js
function conicProjection(projectAt) {
  var phi02 = 0, phi12 = pi4 / 3, m = projectionMutator(projectAt), p = m(phi02, phi12);
  p.parallels = function(_) {
    return arguments.length ? m(phi02 = _[0] * radians, phi12 = _[1] * radians) : [phi02 * degrees2, phi12 * degrees2];
  };
  return p;
}
var init_conic = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/conic.js"() {
    init_math4();
    init_projection();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/cylindricalEqualArea.js
function cylindricalEqualAreaRaw(phi02) {
  var cosPhi03 = cos2(phi02);
  function forward(lambda, phi2) {
    return [lambda * cosPhi03, sin2(phi2) / cosPhi03];
  }
  forward.invert = function(x5, y5) {
    return [x5 / cosPhi03, asin(y5 * cosPhi03)];
  };
  return forward;
}
var init_cylindricalEqualArea = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/cylindricalEqualArea.js"() {
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/conicEqualArea.js
function conicEqualAreaRaw(y06, y12) {
  var sy0 = sin2(y06), n = (sy0 + sin2(y12)) / 2;
  if (abs(n) < epsilon4) return cylindricalEqualAreaRaw(y06);
  var c4 = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c4) / n;
  function project(x5, y5) {
    var r = sqrt(c4 - 2 * n * sin2(y5)) / n;
    return [r * sin2(x5 *= n), r0 - r * cos2(x5)];
  }
  project.invert = function(x5, y5) {
    var r0y = r0 - y5, l = atan2(x5, abs(r0y)) * sign(r0y);
    if (r0y * n < 0)
      l -= pi4 * sign(x5) * sign(r0y);
    return [l / n, asin((c4 - (x5 * x5 + r0y * r0y) * n * n) / (2 * n))];
  };
  return project;
}
function conicEqualArea_default() {
  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
}
var init_conicEqualArea = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/conicEqualArea.js"() {
    init_math4();
    init_conic();
    init_cylindricalEqualArea();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/albers.js
function albers_default() {
  return conicEqualArea_default().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
var init_albers = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/albers.js"() {
    init_conicEqualArea();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/albersUsa.js
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x5, y5) {
      var i = -1;
      while (++i < n) streams[i].point(x5, y5);
    },
    sphere: function() {
      var i = -1;
      while (++i < n) streams[i].sphere();
    },
    lineStart: function() {
      var i = -1;
      while (++i < n) streams[i].lineStart();
    },
    lineEnd: function() {
      var i = -1;
      while (++i < n) streams[i].lineEnd();
    },
    polygonStart: function() {
      var i = -1;
      while (++i < n) streams[i].polygonStart();
    },
    polygonEnd: function() {
      var i = -1;
      while (++i < n) streams[i].polygonEnd();
    }
  };
}
function albersUsa_default() {
  var cache, cacheStream, lower48 = albers_default(), lower48Point, alaska = conicEqualArea_default().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, hawaii = conicEqualArea_default().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, point6, pointStream = { point: function(x5, y5) {
    point6 = [x5, y5];
  } };
  function albersUsa(coordinates2) {
    var x5 = coordinates2[0], y5 = coordinates2[1];
    return point6 = null, (lower48Point.point(x5, y5), point6) || (alaskaPoint.point(x5, y5), point6) || (hawaiiPoint.point(x5, y5), point6);
  }
  albersUsa.invert = function(coordinates2) {
    var k2 = lower48.scale(), t = lower48.translate(), x5 = (coordinates2[0] - t[0]) / k2, y5 = (coordinates2[1] - t[1]) / k2;
    return (y5 >= 0.12 && y5 < 0.234 && x5 >= -0.425 && x5 < -0.214 ? alaska : y5 >= 0.166 && y5 < 0.234 && x5 >= -0.214 && x5 < -0.115 ? hawaii : lower48).invert(coordinates2);
  };
  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };
  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };
  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };
  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k2 = lower48.scale(), x5 = +_[0], y5 = +_[1];
    lower48Point = lower48.translate(_).clipExtent([[x5 - 0.455 * k2, y5 - 0.238 * k2], [x5 + 0.455 * k2, y5 + 0.238 * k2]]).stream(pointStream);
    alaskaPoint = alaska.translate([x5 - 0.307 * k2, y5 + 0.201 * k2]).clipExtent([[x5 - 0.425 * k2 + epsilon4, y5 + 0.12 * k2 + epsilon4], [x5 - 0.214 * k2 - epsilon4, y5 + 0.234 * k2 - epsilon4]]).stream(pointStream);
    hawaiiPoint = hawaii.translate([x5 - 0.205 * k2, y5 + 0.212 * k2]).clipExtent([[x5 - 0.214 * k2 + epsilon4, y5 + 0.166 * k2 + epsilon4], [x5 - 0.115 * k2 - epsilon4, y5 + 0.234 * k2 - epsilon4]]).stream(pointStream);
    return reset();
  };
  albersUsa.fitExtent = function(extent, object2) {
    return fitExtent(albersUsa, extent, object2);
  };
  albersUsa.fitSize = function(size, object2) {
    return fitSize(albersUsa, size, object2);
  };
  albersUsa.fitWidth = function(width, object2) {
    return fitWidth(albersUsa, width, object2);
  };
  albersUsa.fitHeight = function(height, object2) {
    return fitHeight(albersUsa, height, object2);
  };
  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }
  return albersUsa.scale(1070);
}
var init_albersUsa = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/albersUsa.js"() {
    init_math4();
    init_albers();
    init_conicEqualArea();
    init_fit();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale) {
  return function(x5, y5) {
    var cx = cos2(x5), cy = cos2(y5), k2 = scale(cx * cy);
    return [
      k2 * cy * sin2(x5),
      k2 * sin2(y5)
    ];
  };
}
function azimuthalInvert(angle2) {
  return function(x5, y5) {
    var z = sqrt(x5 * x5 + y5 * y5), c4 = angle2(z), sc = sin2(c4), cc = cos2(c4);
    return [
      atan2(x5 * sc, z * cc),
      asin(z && y5 * sc / z)
    ];
  };
}
var init_azimuthal = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/azimuthal.js"() {
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/azimuthalEqualArea.js
function azimuthalEqualArea_default() {
  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
}
var azimuthalEqualAreaRaw;
var init_azimuthalEqualArea = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/azimuthalEqualArea.js"() {
    init_math4();
    init_azimuthal();
    init_projection();
    azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
      return sqrt(2 / (1 + cxcy));
    });
    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
      return 2 * asin(z / 2);
    });
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/azimuthalEquidistant.js
function azimuthalEquidistant_default() {
  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
}
var azimuthalEquidistantRaw;
var init_azimuthalEquidistant = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/azimuthalEquidistant.js"() {
    init_math4();
    init_azimuthal();
    init_projection();
    azimuthalEquidistantRaw = azimuthalRaw(function(c4) {
      return (c4 = acos(c4)) && c4 / sin2(c4);
    });
    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
      return z;
    });
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi2) {
  return [lambda, log(tan((halfPi3 + phi2) / 2))];
}
function mercator_default() {
  return mercatorProjection(mercatorRaw).scale(961 / tau4);
}
function mercatorProjection(project) {
  var m = projection(project), center2 = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x06 = null, y06, x12, y12;
  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };
  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };
  m.center = function(_) {
    return arguments.length ? (center2(_), reclip()) : center2();
  };
  m.clipExtent = function(_) {
    return arguments.length ? (_ == null ? x06 = y06 = x12 = y12 = null : (x06 = +_[0][0], y06 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reclip()) : x06 == null ? null : [[x06, y06], [x12, y12]];
  };
  function reclip() {
    var k2 = pi4 * scale(), t = m(rotation_default(m.rotate()).invert([0, 0]));
    return clipExtent(x06 == null ? [[t[0] - k2, t[1] - k2], [t[0] + k2, t[1] + k2]] : project === mercatorRaw ? [[Math.max(t[0] - k2, x06), y06], [Math.min(t[0] + k2, x12), y12]] : [[x06, Math.max(t[1] - k2, y06)], [x12, Math.min(t[1] + k2, y12)]]);
  }
  return reclip();
}
var init_mercator = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/mercator.js"() {
    init_math4();
    init_rotation();
    init_projection();
    mercatorRaw.invert = function(x5, y5) {
      return [x5, 2 * atan(exp(y5)) - halfPi3];
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/conicConformal.js
function tany(y5) {
  return tan((halfPi3 + y5) / 2);
}
function conicConformalRaw(y06, y12) {
  var cy0 = cos2(y06), n = y06 === y12 ? sin2(y06) : log(cy0 / cos2(y12)) / log(tany(y12) / tany(y06)), f = cy0 * pow(tany(y06), n) / n;
  if (!n) return mercatorRaw;
  function project(x5, y5) {
    if (f > 0) {
      if (y5 < -halfPi3 + epsilon4) y5 = -halfPi3 + epsilon4;
    } else {
      if (y5 > halfPi3 - epsilon4) y5 = halfPi3 - epsilon4;
    }
    var r = f / pow(tany(y5), n);
    return [r * sin2(n * x5), f - r * cos2(n * x5)];
  }
  project.invert = function(x5, y5) {
    var fy = f - y5, r = sign(n) * sqrt(x5 * x5 + fy * fy), l = atan2(x5, abs(fy)) * sign(fy);
    if (fy * n < 0)
      l -= pi4 * sign(x5) * sign(fy);
    return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi3];
  };
  return project;
}
function conicConformal_default() {
  return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
}
var init_conicConformal = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/conicConformal.js"() {
    init_math4();
    init_conic();
    init_mercator();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi2) {
  return [lambda, phi2];
}
function equirectangular_default() {
  return projection(equirectangularRaw).scale(152.63);
}
var init_equirectangular = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/equirectangular.js"() {
    init_projection();
    equirectangularRaw.invert = equirectangularRaw;
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/conicEquidistant.js
function conicEquidistantRaw(y06, y12) {
  var cy0 = cos2(y06), n = y06 === y12 ? sin2(y06) : (cy0 - cos2(y12)) / (y12 - y06), g = cy0 / n + y06;
  if (abs(n) < epsilon4) return equirectangularRaw;
  function project(x5, y5) {
    var gy = g - y5, nx = n * x5;
    return [gy * sin2(nx), g - gy * cos2(nx)];
  }
  project.invert = function(x5, y5) {
    var gy = g - y5, l = atan2(x5, abs(gy)) * sign(gy);
    if (gy * n < 0)
      l -= pi4 * sign(x5) * sign(gy);
    return [l / n, g - sign(n) * sqrt(x5 * x5 + gy * gy)];
  };
  return project;
}
function conicEquidistant_default() {
  return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
}
var init_conicEquidistant = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/conicEquidistant.js"() {
    init_math4();
    init_conic();
    init_equirectangular();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/equalEarth.js
function equalEarthRaw(lambda, phi2) {
  var l = asin(M * sin2(phi2)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos2(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}
function equalEarth_default() {
  return projection(equalEarthRaw).scale(177.158);
}
var A1, A2, A3, A4, M, iterations;
var init_equalEarth = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/equalEarth.js"() {
    init_projection();
    init_math4();
    A1 = 1.340264;
    A2 = -0.081106;
    A3 = 893e-6;
    A4 = 3796e-6;
    M = sqrt(3) / 2;
    iterations = 12;
    equalEarthRaw.invert = function(x5, y5) {
      var l = y5, l2 = l * l, l6 = l2 * l2 * l2;
      for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y5;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if (abs(delta) < epsilon22) break;
      }
      return [
        M * x5 * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos2(l),
        asin(sin2(l) / M)
      ];
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x5, y5) {
  var cy = cos2(y5), k2 = cos2(x5) * cy;
  return [cy * sin2(x5) / k2, sin2(y5) / k2];
}
function gnomonic_default() {
  return projection(gnomonicRaw).scale(144.049).clipAngle(60);
}
var init_gnomonic = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/gnomonic.js"() {
    init_math4();
    init_azimuthal();
    init_projection();
    gnomonicRaw.invert = azimuthalInvert(atan);
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/identity.js
function identity_default5() {
  var k2 = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x06 = null, y06, x12, y12, kx2 = 1, ky2 = 1, transform2 = transformer({
    point: function(x5, y5) {
      var p = projection2([x5, y5]);
      this.stream.point(p[0], p[1]);
    }
  }), postclip = identity_default4, cache, cacheStream;
  function reset() {
    kx2 = k2 * sx;
    ky2 = k2 * sy;
    cache = cacheStream = null;
    return projection2;
  }
  function projection2(p) {
    var x5 = p[0] * kx2, y5 = p[1] * ky2;
    if (alpha) {
      var t = y5 * ca - x5 * sa;
      x5 = x5 * ca + y5 * sa;
      y5 = t;
    }
    return [x5 + tx, y5 + ty];
  }
  projection2.invert = function(p) {
    var x5 = p[0] - tx, y5 = p[1] - ty;
    if (alpha) {
      var t = y5 * ca + x5 * sa;
      x5 = x5 * ca - y5 * sa;
      y5 = t;
    }
    return [x5 / kx2, y5 / ky2];
  };
  projection2.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transform2(postclip(cacheStream = stream));
  };
  projection2.postclip = function(_) {
    return arguments.length ? (postclip = _, x06 = y06 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x06 = y06 = x12 = y12 = null, identity_default4) : clipRectangle(x06 = +_[0][0], y06 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x06 == null ? null : [[x06, y06], [x12, y12]];
  };
  projection2.scale = function(_) {
    return arguments.length ? (k2 = +_, reset()) : k2;
  };
  projection2.translate = function(_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };
  projection2.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, sa = sin2(alpha), ca = cos2(alpha), reset()) : alpha * degrees2;
  };
  projection2.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };
  projection2.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };
  projection2.fitExtent = function(extent, object2) {
    return fitExtent(projection2, extent, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  return projection2;
}
var init_identity5 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/identity.js"() {
    init_rectangle();
    init_identity4();
    init_transform2();
    init_fit();
    init_math4();
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi2) {
  var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
  return [
    lambda * (0.8707 - 0.131979 * phi22 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi22 - 1529e-6 * phi4))),
    phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4)))
  ];
}
function naturalEarth1_default() {
  return projection(naturalEarth1Raw).scale(175.295);
}
var init_naturalEarth1 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/naturalEarth1.js"() {
    init_projection();
    init_math4();
    naturalEarth1Raw.invert = function(x5, y5) {
      var phi2 = y5, i = 25, delta;
      do {
        var phi22 = phi2 * phi2, phi4 = phi22 * phi22;
        phi2 -= delta = (phi2 * (1.007226 + phi22 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi22 - 5916e-6 * phi4))) - y5) / (1.007226 + phi22 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi22 - 5916e-6 * 11 * phi4)));
      } while (abs(delta) > epsilon4 && --i > 0);
      return [
        x5 / (0.8707 + (phi22 = phi2 * phi2) * (-0.131979 + phi22 * (-0.013791 + phi22 * phi22 * phi22 * (3971e-6 - 1529e-6 * phi22)))),
        phi2
      ];
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x5, y5) {
  return [cos2(y5) * sin2(x5), sin2(y5)];
}
function orthographic_default() {
  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon4);
}
var init_orthographic = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/orthographic.js"() {
    init_math4();
    init_azimuthal();
    init_projection();
    orthographicRaw.invert = azimuthalInvert(asin);
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x5, y5) {
  var cy = cos2(y5), k2 = 1 + cos2(x5) * cy;
  return [cy * sin2(x5) / k2, sin2(y5) / k2];
}
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}
var init_stereographic = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/stereographic.js"() {
    init_math4();
    init_azimuthal();
    init_projection();
    stereographicRaw.invert = azimuthalInvert(function(z) {
      return 2 * atan(z);
    });
  }
});

// node_modules/c3/node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi2) {
  return [log(tan((halfPi3 + phi2) / 2)), -lambda];
}
function transverseMercator_default() {
  var m = mercatorProjection(transverseMercatorRaw), center2 = m.center, rotate = m.rotate;
  m.center = function(_) {
    return arguments.length ? center2([-_[1], _[0]]) : (_ = center2(), [_[1], -_[0]]);
  };
  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };
  return rotate([0, 0, 90]).scale(159.155);
}
var init_transverseMercator = __esm({
  "node_modules/c3/node_modules/d3-geo/src/projection/transverseMercator.js"() {
    init_math4();
    init_mercator();
    transverseMercatorRaw.invert = function(x5, y5) {
      return [-y5, 2 * atan(exp(x5)) - halfPi3];
    };
  }
});

// node_modules/c3/node_modules/d3-geo/src/index.js
var init_src21 = __esm({
  "node_modules/c3/node_modules/d3-geo/src/index.js"() {
    init_area2();
    init_bounds();
    init_centroid();
    init_circle2();
    init_antimeridian();
    init_circle3();
    init_extent3();
    init_rectangle();
    init_contains2();
    init_distance();
    init_graticule();
    init_interpolate2();
    init_length();
    init_path2();
    init_albers();
    init_albersUsa();
    init_azimuthalEqualArea();
    init_azimuthalEquidistant();
    init_conicConformal();
    init_conicEqualArea();
    init_conicEquidistant();
    init_equalEarth();
    init_equirectangular();
    init_gnomonic();
    init_identity5();
    init_projection();
    init_mercator();
    init_naturalEarth1();
    init_orthographic();
    init_stereographic();
    init_transverseMercator();
    init_rotation();
    init_stream();
    init_transform2();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/cluster.js
function defaultSeparation(a2, b) {
  return a2.parent === b.parent ? 1 : 2;
}
function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}
function meanXReduce(x5, c4) {
  return x5 + c4.x;
}
function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}
function maxYReduce(y5, c4) {
  return Math.max(y5, c4.y);
}
function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}
function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}
function cluster_default() {
  var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
  function cluster(root3) {
    var previousNode, x5 = 0;
    root3.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x5 += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });
    var left2 = leafLeft(root3), right2 = leafRight(root3), x06 = left2.x - separation(left2, right2) / 2, x12 = right2.x + separation(right2, left2) / 2;
    return root3.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root3.x) * dx;
      node.y = (root3.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x06) / (x12 - x06) * dx;
      node.y = (1 - (root3.y ? node.y / root3.y : 1)) * dy;
    });
  }
  cluster.separation = function(x5) {
    return arguments.length ? (separation = x5, cluster) : separation;
  };
  cluster.size = function(x5) {
    return arguments.length ? (nodeSize = false, dx = +x5[0], dy = +x5[1], cluster) : nodeSize ? null : [dx, dy];
  };
  cluster.nodeSize = function(x5) {
    return arguments.length ? (nodeSize = true, dx = +x5[0], dy = +x5[1], cluster) : nodeSize ? [dx, dy] : null;
  };
  return cluster;
}
var init_cluster = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/cluster.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/count.js
function count(node) {
  var sum3 = 0, children = node.children, i = children && children.length;
  if (!i) sum3 = 1;
  else while (--i >= 0) sum3 += children[i].value;
  node.value = sum3;
}
function count_default() {
  return this.eachAfter(count);
}
var init_count = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/count.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/each.js
function each_default2(callback) {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
}
var init_each2 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/each.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/eachBefore.js
function eachBefore_default(callback) {
  var node = this, nodes = [node], children, i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
}
var init_eachBefore = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/eachBefore.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/eachAfter.js
function eachAfter_default(callback) {
  var node = this, nodes = [node], next = [], children, i, n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
}
var init_eachAfter = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/eachAfter.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/sum.js
function sum_default2(value) {
  return this.eachAfter(function(node) {
    var sum3 = +value(node.data) || 0, children = node.children, i = children && children.length;
    while (--i >= 0) sum3 += children[i].value;
    node.value = sum3;
  });
}
var init_sum2 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/sum.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/sort.js
function sort_default2(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}
var init_sort2 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/sort.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/path.js
function path_default3(end) {
  var start2 = this, ancestor = leastCommonAncestor(start2, end), nodes = [start2];
  while (start2 !== ancestor) {
    start2 = start2.parent;
    nodes.push(start2);
  }
  var k2 = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k2, 0, end);
    end = end.parent;
  }
  return nodes;
}
function leastCommonAncestor(a2, b) {
  if (a2 === b) return a2;
  var aNodes = a2.ancestors(), bNodes = b.ancestors(), c4 = null;
  a2 = aNodes.pop();
  b = bNodes.pop();
  while (a2 === b) {
    c4 = a2;
    a2 = aNodes.pop();
    b = bNodes.pop();
  }
  return c4;
}
var init_path3 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/path.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/ancestors.js
function ancestors_default() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}
var init_ancestors = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/ancestors.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/descendants.js
function descendants_default() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
}
var init_descendants = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/descendants.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/leaves.js
function leaves_default() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}
var init_leaves = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/leaves.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/links.js
function links_default() {
  var root3 = this, links = [];
  root3.each(function(node) {
    if (node !== root3) {
      links.push({ source: node.parent, target: node });
    }
  });
  return links;
}
var init_links = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/links.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/index.js
function hierarchy(data, children) {
  var root3 = new Node(data), valued = +data.value && (root3.value = data.value), node, nodes = [root3], child, childs, i, n;
  if (children == null) children = defaultChildren;
  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }
  return root3.eachBefore(computeHeight);
}
function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}
function defaultChildren(d) {
  return d.children;
}
function copyData(node) {
  node.data = node.data.data;
}
function computeHeight(node) {
  var height = 0;
  do
    node.height = height;
  while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
  this.data = data;
  this.depth = this.height = 0;
  this.parent = null;
}
var init_hierarchy = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/hierarchy/index.js"() {
    init_count();
    init_each2();
    init_eachBefore();
    init_eachAfter();
    init_sum2();
    init_sort2();
    init_path3();
    init_ancestors();
    init_descendants();
    init_leaves();
    init_links();
    Node.prototype = hierarchy.prototype = {
      constructor: Node,
      count: count_default,
      each: each_default2,
      eachAfter: eachAfter_default,
      eachBefore: eachBefore_default,
      sum: sum_default2,
      sort: sort_default2,
      path: path_default3,
      ancestors: ancestors_default,
      descendants: descendants_default,
      leaves: leaves_default,
      links: links_default,
      copy: node_copy
    };
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/array.js
function shuffle(array4) {
  var m = array4.length, t, i;
  while (m) {
    i = Math.random() * m-- | 0;
    t = array4[m];
    array4[m] = array4[i];
    array4[i] = t;
  }
  return array4;
}
var slice5;
var init_array6 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/array.js"() {
    slice5 = Array.prototype.slice;
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/pack/enclose.js
function enclose_default(circles2) {
  var i = 0, n = (circles2 = shuffle(slice5.call(circles2))).length, B2 = [], p, e;
  while (i < n) {
    p = circles2[i];
    if (e && enclosesWeak(e, p)) ++i;
    else e = encloseBasis(B2 = extendBasis(B2, p)), i = 0;
  }
  return e;
}
function extendBasis(B2, p) {
  var i, j;
  if (enclosesWeakAll(p, B2)) return [p];
  for (i = 0; i < B2.length; ++i) {
    if (enclosesNot(p, B2[i]) && enclosesWeakAll(encloseBasis2(B2[i], p), B2)) {
      return [B2[i], p];
    }
  }
  for (i = 0; i < B2.length - 1; ++i) {
    for (j = i + 1; j < B2.length; ++j) {
      if (enclosesNot(encloseBasis2(B2[i], B2[j]), p) && enclosesNot(encloseBasis2(B2[i], p), B2[j]) && enclosesNot(encloseBasis2(B2[j], p), B2[i]) && enclosesWeakAll(encloseBasis3(B2[i], B2[j], p), B2)) {
        return [B2[i], B2[j], p];
      }
    }
  }
  throw new Error();
}
function enclosesNot(a2, b) {
  var dr = a2.r - b.r, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}
function enclosesWeak(a2, b) {
  var dr = a2.r - b.r + 1e-6, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function enclosesWeakAll(a2, B2) {
  for (var i = 0; i < B2.length; ++i) {
    if (!enclosesWeak(a2, B2[i])) {
      return false;
    }
  }
  return true;
}
function encloseBasis(B2) {
  switch (B2.length) {
    case 1:
      return encloseBasis1(B2[0]);
    case 2:
      return encloseBasis2(B2[0], B2[1]);
    case 3:
      return encloseBasis3(B2[0], B2[1], B2[2]);
  }
}
function encloseBasis1(a2) {
  return {
    x: a2.x,
    y: a2.y,
    r: a2.r
  };
}
function encloseBasis2(a2, b) {
  var x12 = a2.x, y12 = a2.y, r1 = a2.r, x22 = b.x, y22 = b.y, r2 = b.r, x21 = x22 - x12, y21 = y22 - y12, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x12 + x22 + x21 / l * r21) / 2,
    y: (y12 + y22 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}
function encloseBasis3(a2, b, c4) {
  var x12 = a2.x, y12 = a2.y, r1 = a2.r, x22 = b.x, y22 = b.y, r2 = b.r, x32 = c4.x, y32 = c4.y, r3 = c4.r, a22 = x12 - x22, a3 = x12 - x32, b22 = y12 - y22, b32 = y12 - y32, c22 = r2 - r1, c32 = r3 - r1, d1 = x12 * x12 + y12 * y12 - r1 * r1, d2 = d1 - x22 * x22 - y22 * y22 + r2 * r2, d3 = d1 - x32 * x32 - y32 * y32 + r3 * r3, ab = a3 * b22 - a22 * b32, xa = (b22 * d3 - b32 * d2) / (ab * 2) - x12, xb = (b32 * c22 - b22 * c32) / ab, ya = (a3 * d2 - a22 * d3) / (ab * 2) - y12, yb = (a22 * c32 - a3 * c22) / ab, A5 = xb * xb + yb * yb - 1, B2 = 2 * (r1 + xa * xb + ya * yb), C2 = xa * xa + ya * ya - r1 * r1, r = -(A5 ? (B2 + Math.sqrt(B2 * B2 - 4 * A5 * C2)) / (2 * A5) : C2 / B2);
  return {
    x: x12 + xa + xb * r,
    y: y12 + ya + yb * r,
    r
  };
}
var init_enclose = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/pack/enclose.js"() {
    init_array6();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/pack/siblings.js
function place(b, a2, c4) {
  var dx = b.x - a2.x, x5, a22, dy = b.y - a2.y, y5, b22, d2 = dx * dx + dy * dy;
  if (d2) {
    a22 = a2.r + c4.r, a22 *= a22;
    b22 = b.r + c4.r, b22 *= b22;
    if (a22 > b22) {
      x5 = (d2 + b22 - a22) / (2 * d2);
      y5 = Math.sqrt(Math.max(0, b22 / d2 - x5 * x5));
      c4.x = b.x - x5 * dx - y5 * dy;
      c4.y = b.y - x5 * dy + y5 * dx;
    } else {
      x5 = (d2 + a22 - b22) / (2 * d2);
      y5 = Math.sqrt(Math.max(0, a22 / d2 - x5 * x5));
      c4.x = a2.x + x5 * dx - y5 * dy;
      c4.y = a2.y + x5 * dy + y5 * dx;
    }
  } else {
    c4.x = a2.x + c4.r;
    c4.y = a2.y;
  }
}
function intersects(a2, b) {
  var dr = a2.r + b.r - 1e-6, dx = b.x - a2.x, dy = b.y - a2.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}
function score(node) {
  var a2 = node._, b = node.next._, ab = a2.r + b.r, dx = (a2.x * b.r + b.x * a2.r) / ab, dy = (a2.y * b.r + b.y * a2.r) / ab;
  return dx * dx + dy * dy;
}
function Node2(circle2) {
  this._ = circle2;
  this.next = null;
  this.previous = null;
}
function packEnclose(circles2) {
  if (!(n = circles2.length)) return 0;
  var a2, b, c4, n, aa, ca, i, j, k2, sj, sk;
  a2 = circles2[0], a2.x = 0, a2.y = 0;
  if (!(n > 1)) return a2.r;
  b = circles2[1], a2.x = -b.r, b.x = a2.r, b.y = 0;
  if (!(n > 2)) return a2.r + b.r;
  place(b, a2, c4 = circles2[2]);
  a2 = new Node2(a2), b = new Node2(b), c4 = new Node2(c4);
  a2.next = c4.previous = b;
  b.next = a2.previous = c4;
  c4.next = b.previous = a2;
  pack: for (i = 3; i < n; ++i) {
    place(a2._, b._, c4 = circles2[i]), c4 = new Node2(c4);
    j = b.next, k2 = a2.previous, sj = b._.r, sk = a2._.r;
    do {
      if (sj <= sk) {
        if (intersects(j._, c4._)) {
          b = j, a2.next = b, b.previous = a2, --i;
          continue pack;
        }
        sj += j._.r, j = j.next;
      } else {
        if (intersects(k2._, c4._)) {
          a2 = k2, a2.next = b, b.previous = a2, --i;
          continue pack;
        }
        sk += k2._.r, k2 = k2.previous;
      }
    } while (j !== k2.next);
    c4.previous = a2, c4.next = b, a2.next = b.previous = b = c4;
    aa = score(a2);
    while ((c4 = c4.next) !== b) {
      if ((ca = score(c4)) < aa) {
        a2 = c4, aa = ca;
      }
    }
    b = a2.next;
  }
  a2 = [b._], c4 = b;
  while ((c4 = c4.next) !== b) a2.push(c4._);
  c4 = enclose_default(a2);
  for (i = 0; i < n; ++i) a2 = circles2[i], a2.x -= c4.x, a2.y -= c4.y;
  return c4.r;
}
function siblings_default(circles2) {
  packEnclose(circles2);
  return circles2;
}
var init_siblings = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/pack/siblings.js"() {
    init_enclose();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/accessors.js
function optional(f) {
  return f == null ? null : required(f);
}
function required(f) {
  if (typeof f !== "function") throw new Error();
  return f;
}
var init_accessors = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/accessors.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/constant.js
function constantZero() {
  return 0;
}
function constant_default10(x5) {
  return function() {
    return x5;
  };
}
var init_constant10 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/pack/index.js
function defaultRadius2(d) {
  return Math.sqrt(d.value);
}
function pack_default() {
  var radius = null, dx = 1, dy = 1, padding = constantZero;
  function pack(root3) {
    root3.x = dx / 2, root3.y = dy / 2;
    if (radius) {
      root3.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
      root3.eachBefore(radiusLeaf(defaultRadius2)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root3.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root3.r)));
    }
    return root3;
  }
  pack.radius = function(x5) {
    return arguments.length ? (radius = optional(x5), pack) : radius;
  };
  pack.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], pack) : [dx, dy];
  };
  pack.padding = function(x5) {
    return arguments.length ? (padding = typeof x5 === "function" ? x5 : constant_default10(+x5), pack) : padding;
  };
  return pack;
}
function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}
function packChildren(padding, k2) {
  return function(node) {
    if (children = node.children) {
      var children, i, n = children.length, r = padding(node) * k2 || 0, e;
      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}
function translateChild(k2) {
  return function(node) {
    var parent = node.parent;
    node.r *= k2;
    if (parent) {
      node.x = parent.x + k2 * node.x;
      node.y = parent.y + k2 * node.y;
    }
  };
}
var init_pack = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/pack/index.js"() {
    init_siblings();
    init_accessors();
    init_constant10();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/round.js
function round_default2(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}
var init_round2 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/round.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/dice.js
function dice_default(parent, x06, y06, x12, y12) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k2 = parent.value && (x12 - x06) / parent.value;
  while (++i < n) {
    node = nodes[i], node.y0 = y06, node.y1 = y12;
    node.x0 = x06, node.x1 = x06 += node.value * k2;
  }
}
var init_dice = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/dice.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/partition.js
function partition_default() {
  var dx = 1, dy = 1, padding = 0, round = false;
  function partition(root3) {
    var n = root3.height + 1;
    root3.x0 = root3.y0 = padding;
    root3.x1 = dx;
    root3.y1 = dy / n;
    root3.eachBefore(positionNode(dy, n));
    if (round) root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(dy2, n) {
    return function(node) {
      if (node.children) {
        dice_default(node, node.x0, dy2 * (node.depth + 1) / n, node.x1, dy2 * (node.depth + 2) / n);
      }
      var x06 = node.x0, y06 = node.y0, x12 = node.x1 - padding, y12 = node.y1 - padding;
      if (x12 < x06) x06 = x12 = (x06 + x12) / 2;
      if (y12 < y06) y06 = y12 = (y06 + y12) / 2;
      node.x0 = x06;
      node.y0 = y06;
      node.x1 = x12;
      node.y1 = y12;
    };
  }
  partition.round = function(x5) {
    return arguments.length ? (round = !!x5, partition) : round;
  };
  partition.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], partition) : [dx, dy];
  };
  partition.padding = function(x5) {
    return arguments.length ? (padding = +x5, partition) : padding;
  };
  return partition;
}
var init_partition = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/partition.js"() {
    init_round2();
    init_dice();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/stratify.js
function defaultId(d) {
  return d.id;
}
function defaultParentId(d) {
  return d.parentId;
}
function stratify_default() {
  var id2 = defaultId, parentId = defaultParentId;
  function stratify(data) {
    var d, i, n = data.length, root3, parent, node, nodes = new Array(n), nodeId, nodeKey, nodeByKey = {};
    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new Node(d);
      if ((nodeId = id2(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix2 + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }
    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root3) throw new Error("multiple roots");
        root3 = node;
      } else {
        parent = nodeByKey[keyPrefix2 + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      }
    }
    if (!root3) throw new Error("no root");
    root3.parent = preroot;
    root3.eachBefore(function(node2) {
      node2.depth = node2.parent.depth + 1;
      --n;
    }).eachBefore(computeHeight);
    root3.parent = null;
    if (n > 0) throw new Error("cycle");
    return root3;
  }
  stratify.id = function(x5) {
    return arguments.length ? (id2 = required(x5), stratify) : id2;
  };
  stratify.parentId = function(x5) {
    return arguments.length ? (parentId = required(x5), stratify) : parentId;
  };
  return stratify;
}
var keyPrefix2, preroot, ambiguous;
var init_stratify = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/stratify.js"() {
    init_accessors();
    init_hierarchy();
    keyPrefix2 = "$";
    preroot = { depth: -1 };
    ambiguous = {};
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/tree.js
function defaultSeparation2(a2, b) {
  return a2.parent === b.parent ? 1 : 2;
}
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}
function executeShifts(v) {
  var shift = 0, change = 0, children = v.children, i = children.length, w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}
function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null;
  this.a = this;
  this.z = 0;
  this.m = 0;
  this.c = 0;
  this.s = 0;
  this.t = null;
  this.i = i;
}
function treeRoot(root3) {
  var tree = new TreeNode(root3, 0), node, nodes = [tree], child, children, i, n;
  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }
  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}
function tree_default() {
  var separation = defaultSeparation2, dx = 1, dy = 1, nodeSize = null;
  function tree(root3) {
    var t = treeRoot(root3);
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);
    if (nodeSize) root3.eachBefore(sizeNode);
    else {
      var left2 = root3, right2 = root3, bottom2 = root3;
      root3.eachBefore(function(node) {
        if (node.x < left2.x) left2 = node;
        if (node.x > right2.x) right2 = node;
        if (node.depth > bottom2.depth) bottom2 = node;
      });
      var s2 = left2 === right2 ? 1 : separation(left2, right2) / 2, tx = s2 - left2.x, kx2 = dx / (right2.x + s2 + tx), ky2 = dy / (bottom2.depth || 1);
      root3.eachBefore(function(node) {
        node.x = (node.x + tx) * kx2;
        node.y = node.depth * ky2;
      });
    }
    return root3;
  }
  function firstWalk(v) {
    var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }
  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }
  tree.separation = function(x5) {
    return arguments.length ? (separation = x5, tree) : separation;
  };
  tree.size = function(x5) {
    return arguments.length ? (nodeSize = false, dx = +x5[0], dy = +x5[1], tree) : nodeSize ? null : [dx, dy];
  };
  tree.nodeSize = function(x5) {
    return arguments.length ? (nodeSize = true, dx = +x5[0], dy = +x5[1], tree) : nodeSize ? [dx, dy] : null;
  };
  return tree;
}
var init_tree = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/tree.js"() {
    init_hierarchy();
    TreeNode.prototype = Object.create(Node.prototype);
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/slice.js
function slice_default(parent, x06, y06, x12, y12) {
  var nodes = parent.children, node, i = -1, n = nodes.length, k2 = parent.value && (y12 - y06) / parent.value;
  while (++i < n) {
    node = nodes[i], node.x0 = x06, node.x1 = x12;
    node.y0 = y06, node.y1 = y06 += node.value * k2;
  }
}
var init_slice = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/slice.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/squarify.js
function squarifyRatio(ratio, parent, x06, y06, x12, y12) {
  var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1 = 0, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
  while (i0 < n) {
    dx = x12 - x06, dy = y12 - y06;
    do
      sumValue = nodes[i1++].value;
    while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) {
        sumValue -= nodeValue;
        break;
      }
      minRatio = newRatio;
    }
    rows.push(row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) });
    if (row.dice) dice_default(row, x06, y06, x12, value ? y06 += dy * sumValue / value : y12);
    else slice_default(row, x06, y06, value ? x06 += dx * sumValue / value : x12, y12);
    value -= sumValue, i0 = i1;
  }
  return rows;
}
var phi, squarify_default;
var init_squarify = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/squarify.js"() {
    init_dice();
    init_slice();
    phi = (1 + Math.sqrt(5)) / 2;
    squarify_default = function custom10(ratio) {
      function squarify(parent, x06, y06, x12, y12) {
        squarifyRatio(ratio, parent, x06, y06, x12, y12);
      }
      squarify.ratio = function(x5) {
        return custom10((x5 = +x5) > 1 ? x5 : 1);
      };
      return squarify;
    }(phi);
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/index.js
function treemap_default() {
  var tile = squarify_default, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
  function treemap(root3) {
    root3.x0 = root3.y0 = 0;
    root3.x1 = dx;
    root3.y1 = dy;
    root3.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root3.eachBefore(round_default2);
    return root3;
  }
  function positionNode(node) {
    var p = paddingStack[node.depth], x06 = node.x0 + p, y06 = node.y0 + p, x12 = node.x1 - p, y12 = node.y1 - p;
    if (x12 < x06) x06 = x12 = (x06 + x12) / 2;
    if (y12 < y06) y06 = y12 = (y06 + y12) / 2;
    node.x0 = x06;
    node.y0 = y06;
    node.x1 = x12;
    node.y1 = y12;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x06 += paddingLeft(node) - p;
      y06 += paddingTop(node) - p;
      x12 -= paddingRight(node) - p;
      y12 -= paddingBottom(node) - p;
      if (x12 < x06) x06 = x12 = (x06 + x12) / 2;
      if (y12 < y06) y06 = y12 = (y06 + y12) / 2;
      tile(node, x06, y06, x12, y12);
    }
  }
  treemap.round = function(x5) {
    return arguments.length ? (round = !!x5, treemap) : round;
  };
  treemap.size = function(x5) {
    return arguments.length ? (dx = +x5[0], dy = +x5[1], treemap) : [dx, dy];
  };
  treemap.tile = function(x5) {
    return arguments.length ? (tile = required(x5), treemap) : tile;
  };
  treemap.padding = function(x5) {
    return arguments.length ? treemap.paddingInner(x5).paddingOuter(x5) : treemap.paddingInner();
  };
  treemap.paddingInner = function(x5) {
    return arguments.length ? (paddingInner = typeof x5 === "function" ? x5 : constant_default10(+x5), treemap) : paddingInner;
  };
  treemap.paddingOuter = function(x5) {
    return arguments.length ? treemap.paddingTop(x5).paddingRight(x5).paddingBottom(x5).paddingLeft(x5) : treemap.paddingTop();
  };
  treemap.paddingTop = function(x5) {
    return arguments.length ? (paddingTop = typeof x5 === "function" ? x5 : constant_default10(+x5), treemap) : paddingTop;
  };
  treemap.paddingRight = function(x5) {
    return arguments.length ? (paddingRight = typeof x5 === "function" ? x5 : constant_default10(+x5), treemap) : paddingRight;
  };
  treemap.paddingBottom = function(x5) {
    return arguments.length ? (paddingBottom = typeof x5 === "function" ? x5 : constant_default10(+x5), treemap) : paddingBottom;
  };
  treemap.paddingLeft = function(x5) {
    return arguments.length ? (paddingLeft = typeof x5 === "function" ? x5 : constant_default10(+x5), treemap) : paddingLeft;
  };
  return treemap;
}
var init_treemap = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/index.js"() {
    init_round2();
    init_squarify();
    init_accessors();
    init_constant10();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/binary.js
function binary_default(parent, x06, y06, x12, y12) {
  var nodes = parent.children, i, n = nodes.length, sum3, sums = new Array(n + 1);
  for (sums[0] = sum3 = i = 0; i < n; ++i) {
    sums[i + 1] = sum3 += nodes[i].value;
  }
  partition(0, n, parent.value, x06, y06, x12, y12);
  function partition(i2, j, value, x07, y07, x13, y13) {
    if (i2 >= j - 1) {
      var node = nodes[i2];
      node.x0 = x07, node.y0 = y07;
      node.x1 = x13, node.y1 = y13;
      return;
    }
    var valueOffset = sums[i2], valueTarget = value / 2 + valueOffset, k2 = i2 + 1, hi = j - 1;
    while (k2 < hi) {
      var mid = k2 + hi >>> 1;
      if (sums[mid] < valueTarget) k2 = mid + 1;
      else hi = mid;
    }
    if (valueTarget - sums[k2 - 1] < sums[k2] - valueTarget && i2 + 1 < k2) --k2;
    var valueLeft = sums[k2] - valueOffset, valueRight = value - valueLeft;
    if (x13 - x07 > y13 - y07) {
      var xk = (x07 * valueRight + x13 * valueLeft) / value;
      partition(i2, k2, valueLeft, x07, y07, xk, y13);
      partition(k2, j, valueRight, xk, y07, x13, y13);
    } else {
      var yk = (y07 * valueRight + y13 * valueLeft) / value;
      partition(i2, k2, valueLeft, x07, y07, x13, yk);
      partition(k2, j, valueRight, x07, yk, x13, y13);
    }
  }
}
var init_binary = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/binary.js"() {
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/sliceDice.js
function sliceDice_default(parent, x06, y06, x12, y12) {
  (parent.depth & 1 ? slice_default : dice_default)(parent, x06, y06, x12, y12);
}
var init_sliceDice = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/sliceDice.js"() {
    init_dice();
    init_slice();
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/treemap/resquarify.js
var resquarify_default;
var init_resquarify = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/treemap/resquarify.js"() {
    init_dice();
    init_slice();
    init_squarify();
    resquarify_default = function custom11(ratio) {
      function resquarify(parent, x06, y06, x12, y12) {
        if ((rows = parent._squarify) && rows.ratio === ratio) {
          var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
          while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
            if (row.dice) dice_default(row, x06, y06, x12, y06 += (y12 - y06) * row.value / value);
            else slice_default(row, x06, y06, x06 += (x12 - x06) * row.value / value, y12);
            value -= row.value;
          }
        } else {
          parent._squarify = rows = squarifyRatio(ratio, parent, x06, y06, x12, y12);
          rows.ratio = ratio;
        }
      }
      resquarify.ratio = function(x5) {
        return custom11((x5 = +x5) > 1 ? x5 : 1);
      };
      return resquarify;
    }(phi);
  }
});

// node_modules/c3/node_modules/d3-hierarchy/src/index.js
var init_src22 = __esm({
  "node_modules/c3/node_modules/d3-hierarchy/src/index.js"() {
    init_cluster();
    init_hierarchy();
    init_pack();
    init_siblings();
    init_enclose();
    init_partition();
    init_stratify();
    init_tree();
    init_treemap();
    init_binary();
    init_dice();
    init_slice();
    init_sliceDice();
    init_squarify();
    init_resquarify();
  }
});

// node_modules/c3/node_modules/d3-polygon/src/area.js
function area_default4(polygon) {
  var i = -1, n = polygon.length, a2, b = polygon[n - 1], area = 0;
  while (++i < n) {
    a2 = b;
    b = polygon[i];
    area += a2[1] * b[0] - a2[0] * b[1];
  }
  return area / 2;
}
var init_area4 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/area.js"() {
  }
});

// node_modules/c3/node_modules/d3-polygon/src/centroid.js
function centroid_default3(polygon) {
  var i = -1, n = polygon.length, x5 = 0, y5 = 0, a2, b = polygon[n - 1], c4, k2 = 0;
  while (++i < n) {
    a2 = b;
    b = polygon[i];
    k2 += c4 = a2[0] * b[1] - b[0] * a2[1];
    x5 += (a2[0] + b[0]) * c4;
    y5 += (a2[1] + b[1]) * c4;
  }
  return k2 *= 3, [x5 / k2, y5 / k2];
}
var init_centroid3 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/centroid.js"() {
  }
});

// node_modules/c3/node_modules/d3-polygon/src/cross.js
function cross_default2(a2, b, c4) {
  return (b[0] - a2[0]) * (c4[1] - a2[1]) - (b[1] - a2[1]) * (c4[0] - a2[0]);
}
var init_cross2 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/cross.js"() {
  }
});

// node_modules/c3/node_modules/d3-polygon/src/hull.js
function lexicographicOrder(a2, b) {
  return a2[0] - b[0] || a2[1] - b[1];
}
function computeUpperHullIndexes(points) {
  var n = points.length, indexes = [0, 1], size = 2;
  for (var i = 2; i < n; ++i) {
    while (size > 1 && cross_default2(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }
  return indexes.slice(0, size);
}
function hull_default(points) {
  if ((n = points.length) < 3) return null;
  var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];
  var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
  var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
  return hull;
}
var init_hull = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/hull.js"() {
    init_cross2();
  }
});

// node_modules/c3/node_modules/d3-polygon/src/contains.js
function contains_default3(polygon, point6) {
  var n = polygon.length, p = polygon[n - 1], x5 = point6[0], y5 = point6[1], x06 = p[0], y06 = p[1], x12, y12, inside = false;
  for (var i = 0; i < n; ++i) {
    p = polygon[i], x12 = p[0], y12 = p[1];
    if (y12 > y5 !== y06 > y5 && x5 < (x06 - x12) * (y5 - y12) / (y06 - y12) + x12) inside = !inside;
    x06 = x12, y06 = y12;
  }
  return inside;
}
var init_contains3 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/contains.js"() {
  }
});

// node_modules/c3/node_modules/d3-polygon/src/length.js
function length_default2(polygon) {
  var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }
  return perimeter;
}
var init_length2 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/length.js"() {
  }
});

// node_modules/c3/node_modules/d3-polygon/src/index.js
var init_src23 = __esm({
  "node_modules/c3/node_modules/d3-polygon/src/index.js"() {
    init_area4();
    init_centroid3();
    init_hull();
    init_contains3();
    init_length2();
  }
});

// node_modules/c3/node_modules/d3-random/src/defaultSource.js
function defaultSource_default() {
  return Math.random();
}
var init_defaultSource = __esm({
  "node_modules/c3/node_modules/d3-random/src/defaultSource.js"() {
  }
});

// node_modules/c3/node_modules/d3-random/src/uniform.js
var uniform_default;
var init_uniform = __esm({
  "node_modules/c3/node_modules/d3-random/src/uniform.js"() {
    init_defaultSource();
    uniform_default = function sourceRandomUniform(source) {
      function randomUniform(min2, max3) {
        min2 = min2 == null ? 0 : +min2;
        max3 = max3 == null ? 1 : +max3;
        if (arguments.length === 1) max3 = min2, min2 = 0;
        else max3 -= min2;
        return function() {
          return source() * max3 + min2;
        };
      }
      randomUniform.source = sourceRandomUniform;
      return randomUniform;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/normal.js
var normal_default;
var init_normal = __esm({
  "node_modules/c3/node_modules/d3-random/src/normal.js"() {
    init_defaultSource();
    normal_default = function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x5, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y5;
          if (x5 != null) y5 = x5, x5 = null;
          else do {
            x5 = source() * 2 - 1;
            y5 = source() * 2 - 1;
            r = x5 * x5 + y5 * y5;
          } while (!r || r > 1);
          return mu + sigma * y5 * Math.sqrt(-2 * Math.log(r) / r);
        };
      }
      randomNormal.source = sourceRandomNormal;
      return randomNormal;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/logNormal.js
var logNormal_default;
var init_logNormal = __esm({
  "node_modules/c3/node_modules/d3-random/src/logNormal.js"() {
    init_defaultSource();
    init_normal();
    logNormal_default = function sourceRandomLogNormal(source) {
      function randomLogNormal() {
        var randomNormal = normal_default.source(source).apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }
      randomLogNormal.source = sourceRandomLogNormal;
      return randomLogNormal;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/irwinHall.js
var irwinHall_default;
var init_irwinHall = __esm({
  "node_modules/c3/node_modules/d3-random/src/irwinHall.js"() {
    init_defaultSource();
    irwinHall_default = function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n) {
        return function() {
          for (var sum3 = 0, i = 0; i < n; ++i) sum3 += source();
          return sum3;
        };
      }
      randomIrwinHall.source = sourceRandomIrwinHall;
      return randomIrwinHall;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/bates.js
var bates_default;
var init_bates = __esm({
  "node_modules/c3/node_modules/d3-random/src/bates.js"() {
    init_defaultSource();
    init_irwinHall();
    bates_default = function sourceRandomBates(source) {
      function randomBates(n) {
        var randomIrwinHall = irwinHall_default.source(source)(n);
        return function() {
          return randomIrwinHall() / n;
        };
      }
      randomBates.source = sourceRandomBates;
      return randomBates;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/exponential.js
var exponential_default;
var init_exponential = __esm({
  "node_modules/c3/node_modules/d3-random/src/exponential.js"() {
    init_defaultSource();
    exponential_default = function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log(1 - source()) / lambda;
        };
      }
      randomExponential.source = sourceRandomExponential;
      return randomExponential;
    }(defaultSource_default);
  }
});

// node_modules/c3/node_modules/d3-random/src/index.js
var init_src24 = __esm({
  "node_modules/c3/node_modules/d3-random/src/index.js"() {
    init_uniform();
    init_normal();
    init_logNormal();
    init_bates();
    init_irwinHall();
    init_exponential();
  }
});

// node_modules/c3/node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.interpolator(domain);
      break;
    default:
      this.interpolator(interpolator).domain(domain);
      break;
  }
  return this;
}
var init_init = __esm({
  "node_modules/c3/node_modules/d3-scale/src/init.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale/src/array.js
var array3, map4, slice6;
var init_array7 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/array.js"() {
    array3 = Array.prototype;
    map4 = array3.map;
    slice6 = array3.slice;
  }
});

// node_modules/c3/node_modules/d3-scale/src/ordinal.js
function ordinal() {
  var index2 = map_default(), domain = [], range2 = [], unknown = implicit;
  function scale(d) {
    var key = d + "", i = index2.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index2.set(key, i = domain.push(d));
    }
    return range2[(i - 1) % range2.length];
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index2 = map_default();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index2.has(key = (d = _[i]) + "")) index2.set(key, domain.push(d));
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = slice6.call(_), scale) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
var implicit;
var init_ordinal = __esm({
  "node_modules/c3/node_modules/d3-scale/src/ordinal.js"() {
    init_src14();
    init_array7();
    init_init();
    implicit = { name: "implicit" };
  }
});

// node_modules/c3/node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, range2 = [0, 1], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = range2[1] < range2[0], start2 = range2[reverse - 0], stop = range2[1 - reverse];
    step = (stop - start2) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start2 += (stop - start2 - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range_default(n).map(function(i) {
      return start2 + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = [+_[0], +_[1]], rescale()) : range2.slice();
  };
  scale.rangeRound = function(_) {
    return range2 = [+_[0], +_[1]], round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), range2).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy3 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy3());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
var init_band = __esm({
  "node_modules/c3/node_modules/d3-scale/src/band.js"() {
    init_src();
    init_init();
    init_ordinal();
  }
});

// node_modules/c3/node_modules/d3-scale/src/constant.js
function constant_default11(x5) {
  return function() {
    return x5;
  };
}
var init_constant11 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale/src/number.js
function number_default3(x5) {
  return +x5;
}
var init_number3 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/number.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale/src/continuous.js
function identity2(x5) {
  return x5;
}
function normalize(a2, b) {
  return (b -= a2 = +a2) ? function(x5) {
    return (x5 - a2) / b;
  } : constant_default11(isNaN(b) ? NaN : 0.5);
}
function clamper(domain) {
  var a2 = domain[0], b = domain[domain.length - 1], t;
  if (a2 > b) t = a2, a2 = b, b = t;
  return function(x5) {
    return Math.max(a2, Math.min(b, x5));
  };
}
function bimap(domain, range2, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x5) {
    return r0(d0(x5));
  };
}
function polymap(domain, range2, interpolate) {
  var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range2[i], range2[i + 1]);
  }
  return function(x5) {
    var i2 = bisect_default(domain, x5, 1, j) - 1;
    return r[i2](d[i2](x5));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer2() {
  var domain = unit, range2 = unit, interpolate = value_default, transform2, untransform, unknown, clamp = identity2, piecewise2, output, input;
  function rescale() {
    piecewise2 = Math.min(domain.length, range2.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : (output || (output = piecewise2(domain.map(transform2), range2, interpolate)))(transform2(clamp(x5)));
  }
  scale.invert = function(y5) {
    return clamp(untransform((input || (input = piecewise2(range2, domain.map(transform2), number_default2)))(y5)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = map4.call(_, number_default3), clamp === identity2 || (clamp = clamper(domain)), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = slice6.call(_), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_) {
    return range2 = slice6.call(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity2, scale) : clamp !== identity2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform2 = t, untransform = u;
    return rescale();
  };
}
function continuous(transform2, untransform) {
  return transformer2()(transform2, untransform);
}
var unit;
var init_continuous = __esm({
  "node_modules/c3/node_modules/d3-scale/src/continuous.js"() {
    init_src();
    init_src7();
    init_array7();
    init_constant11();
    init_number3();
    unit = [0, 1];
  }
});

// node_modules/c3/node_modules/d3-scale/src/tickFormat.js
function tickFormat_default(start2, stop, count2, specifier) {
  var step = tickStep(start2, stop, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
var init_tickFormat = __esm({
  "node_modules/c3/node_modules/d3-scale/src/tickFormat.js"() {
    init_src();
    init_src20();
  }
});

// node_modules/c3/node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count2) {
    var d = domain();
    return ticks_default(d[0], d[d.length - 1], count2 == null ? 10 : count2);
  };
  scale.tickFormat = function(count2, specifier) {
    var d = domain();
    return tickFormat_default(d[0], d[d.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale.nice = function(count2) {
    if (count2 == null) count2 = 10;
    var d = domain(), i0 = 0, i1 = d.length - 1, start2 = d[i0], stop = d[i1], step;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    step = tickIncrement(start2, stop, count2);
    if (step > 0) {
      start2 = Math.floor(start2 / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = tickIncrement(start2, stop, count2);
    } else if (step < 0) {
      start2 = Math.ceil(start2 * step) / step;
      stop = Math.floor(stop * step) / step;
      step = tickIncrement(start2, stop, count2);
    }
    if (step > 0) {
      d[i0] = Math.floor(start2 / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start2 * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }
    return scale;
  };
  return scale;
}
function linear3() {
  var scale = continuous(identity2, identity2);
  scale.copy = function() {
    return copy(scale, linear3());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
var init_linear2 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/linear.js"() {
    init_src();
    init_continuous();
    init_init();
    init_tickFormat();
  }
});

// node_modules/c3/node_modules/d3-scale/src/identity.js
function identity3(domain) {
  var unknown;
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : x5;
  }
  scale.invert = scale;
  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map4.call(_, number_default3), scale) : domain.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return identity3(domain).unknown(unknown);
  };
  domain = arguments.length ? map4.call(domain, number_default3) : [0, 1];
  return linearish(scale);
}
var init_identity6 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/identity.js"() {
    init_array7();
    init_linear2();
    init_number3();
  }
});

// node_modules/c3/node_modules/d3-scale/src/nice.js
function nice_default(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x06 = domain[i0], x12 = domain[i1], t;
  if (x12 < x06) {
    t = i0, i0 = i1, i1 = t;
    t = x06, x06 = x12, x12 = t;
  }
  domain[i0] = interval2.floor(x06);
  domain[i1] = interval2.ceil(x12);
  return domain;
}
var init_nice = __esm({
  "node_modules/c3/node_modules/d3-scale/src/nice.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale/src/log.js
function transformLog(x5) {
  return Math.log(x5);
}
function transformExp(x5) {
  return Math.exp(x5);
}
function transformLogn(x5) {
  return -Math.log(-x5);
}
function transformExpn(x5) {
  return -Math.exp(-x5);
}
function pow10(x5) {
  return isFinite(x5) ? +("1e" + x5) : x5 < 0 ? 0 : x5;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x5) {
    return Math.pow(base, x5);
  };
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x5) {
    return Math.log(x5) / base;
  });
}
function reflect(f) {
  return function(x5) {
    return -f(-x5);
  };
}
function loggish(transform2) {
  var scale = transform2(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform2(transformLogn, transformExpn);
    } else {
      transform2(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = function(count2) {
    var d = domain(), u = d[0], v = d[d.length - 1], r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u), j = logs(v), p, k2, t, n = count2 == null ? 10 : +count2, z = [];
    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k2 = 1, p = pows(i); k2 < base; ++k2) {
          t = p * k2;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      else for (; i < j; ++i) {
        for (k2 = base - 1, p = pows(i); k2 >= 1; --k2) {
          t = p * k2;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = ticks_default(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale.tickFormat = function(count2, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = format(specifier);
    if (count2 === Infinity) return specifier;
    if (count2 == null) count2 = 10;
    var k2 = Math.max(1, base * count2 / scale.ticks().length);
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k2 ? specifier(d) : "";
    };
  };
  scale.nice = function() {
    return domain(nice_default(domain(), {
      floor: function(x5) {
        return pows(Math.floor(logs(x5)));
      },
      ceil: function(x5) {
        return pows(Math.ceil(logs(x5)));
      }
    }));
  };
  return scale;
}
function log2() {
  var scale = loggish(transformer2()).domain([1, 10]);
  scale.copy = function() {
    return copy(scale, log2()).base(scale.base());
  };
  initRange.apply(scale, arguments);
  return scale;
}
var init_log = __esm({
  "node_modules/c3/node_modules/d3-scale/src/log.js"() {
    init_src();
    init_src20();
    init_nice();
    init_continuous();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/symlog.js
function transformSymlog(c4) {
  return function(x5) {
    return Math.sign(x5) * Math.log1p(Math.abs(x5 / c4));
  };
}
function transformSymexp(c4) {
  return function(x5) {
    return Math.sign(x5) * Math.expm1(Math.abs(x5)) * c4;
  };
}
function symlogish(transform2) {
  var c4 = 1, scale = transform2(transformSymlog(c4), transformSymexp(c4));
  scale.constant = function(_) {
    return arguments.length ? transform2(transformSymlog(c4 = +_), transformSymexp(c4)) : c4;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer2());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}
var init_symlog = __esm({
  "node_modules/c3/node_modules/d3-scale/src/symlog.js"() {
    init_linear2();
    init_continuous();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/pow.js
function transformPow(exponent2) {
  return function(x5) {
    return x5 < 0 ? -Math.pow(-x5, exponent2) : Math.pow(x5, exponent2);
  };
}
function transformSqrt(x5) {
  return x5 < 0 ? -Math.sqrt(-x5) : Math.sqrt(x5);
}
function transformSquare(x5) {
  return x5 < 0 ? -x5 * x5 : x5 * x5;
}
function powish(transform2) {
  var scale = transform2(identity2, identity2), exponent2 = 1;
  function rescale() {
    return exponent2 === 1 ? transform2(identity2, identity2) : exponent2 === 0.5 ? transform2(transformSqrt, transformSquare) : transform2(transformPow(exponent2), transformPow(1 / exponent2));
  }
  scale.exponent = function(_) {
    return arguments.length ? (exponent2 = +_, rescale()) : exponent2;
  };
  return linearish(scale);
}
function pow2() {
  var scale = powish(transformer2());
  scale.copy = function() {
    return copy(scale, pow2()).exponent(scale.exponent());
  };
  initRange.apply(scale, arguments);
  return scale;
}
function sqrt2() {
  return pow2.apply(null, arguments).exponent(0.5);
}
var init_pow = __esm({
  "node_modules/c3/node_modules/d3-scale/src/pow.js"() {
    init_linear2();
    init_continuous();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/quantile.js
function quantile() {
  var domain = [], range2 = [], thresholds = [], unknown;
  function rescale() {
    var i = 0, n = Math.max(1, range2.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = quantile_default(domain, i / n);
    return scale;
  }
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : range2[bisect_default(thresholds, x5)];
  }
  scale.invertExtent = function(y5) {
    var i = range2.indexOf(y5);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending_default);
    return rescale();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = slice6.call(_), rescale()) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.quantiles = function() {
    return thresholds.slice();
  };
  scale.copy = function() {
    return quantile().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_quantile2 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/quantile.js"() {
    init_src();
    init_array7();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/quantize.js
function quantize() {
  var x06 = 0, x12 = 1, n = 1, domain = [0.5], range2 = [0, 1], unknown;
  function scale(x5) {
    return x5 <= x5 ? range2[bisect_default(domain, x5, 0, n)] : unknown;
  }
  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x12 - (i - n) * x06) / (n + 1);
    return scale;
  }
  scale.domain = function(_) {
    return arguments.length ? (x06 = +_[0], x12 = +_[1], rescale()) : [x06, x12];
  };
  scale.range = function(_) {
    return arguments.length ? (n = (range2 = slice6.call(_)).length - 1, rescale()) : range2.slice();
  };
  scale.invertExtent = function(y5) {
    var i = range2.indexOf(y5);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x06, domain[0]] : i >= n ? [domain[n - 1], x12] : [domain[i - 1], domain[i]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x06, x12]).range(range2).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}
var init_quantize2 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/quantize.js"() {
    init_src();
    init_array7();
    init_linear2();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range2 = [0, 1], unknown, n = 1;
  function scale(x5) {
    return x5 <= x5 ? range2[bisect_default(domain, x5, 0, n)] : unknown;
  }
  scale.domain = function(_) {
    return arguments.length ? (domain = slice6.call(_), n = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = slice6.call(_), n = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
  };
  scale.invertExtent = function(y5) {
    var i = range2.indexOf(y5);
    return [domain[i - 1], domain[i]];
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return threshold().domain(domain).range(range2).unknown(unknown);
  };
  return initRange.apply(scale, arguments);
}
var init_threshold = __esm({
  "node_modules/c3/node_modules/d3-scale/src/threshold.js"() {
    init_src();
    init_array7();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-time/src/interval.js
function newInterval(floori, offseti, count2, field) {
  function interval2(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval2.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval2.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval2.round = function(date2) {
    var d0 = interval2(date2), d1 = interval2.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval2.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval2.range = function(start2, stop, step) {
    var range2 = [], previous;
    start2 = interval2.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop) || !(step > 0)) return range2;
    do
      range2.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop);
    return range2;
  };
  interval2.filter = function(test) {
    return newInterval(function(date2) {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval2.count = function(start2, end) {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval2.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval2.count(0, d) % step === 0;
      });
    };
  }
  return interval2;
}
var t02, t12;
var init_interval2 = __esm({
  "node_modules/c3/node_modules/d3-time/src/interval.js"() {
    t02 = /* @__PURE__ */ new Date();
    t12 = /* @__PURE__ */ new Date();
  }
});

// node_modules/c3/node_modules/d3-time/src/millisecond.js
var millisecond, millisecond_default, milliseconds;
var init_millisecond = __esm({
  "node_modules/c3/node_modules/d3-time/src/millisecond.js"() {
    init_interval2();
    millisecond = newInterval(function() {
    }, function(date2, step) {
      date2.setTime(+date2 + step);
    }, function(start2, end) {
      return end - start2;
    });
    millisecond.every = function(k2) {
      k2 = Math.floor(k2);
      if (!isFinite(k2) || !(k2 > 0)) return null;
      if (!(k2 > 1)) return millisecond;
      return newInterval(function(date2) {
        date2.setTime(Math.floor(date2 / k2) * k2);
      }, function(date2, step) {
        date2.setTime(+date2 + step * k2);
      }, function(start2, end) {
        return (end - start2) / k2;
      });
    };
    millisecond_default = millisecond;
    milliseconds = millisecond.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/duration.js
var durationSecond, durationMinute, durationHour, durationDay, durationWeek;
var init_duration2 = __esm({
  "node_modules/c3/node_modules/d3-time/src/duration.js"() {
    durationSecond = 1e3;
    durationMinute = 6e4;
    durationHour = 36e5;
    durationDay = 864e5;
    durationWeek = 6048e5;
  }
});

// node_modules/c3/node_modules/d3-time/src/second.js
var second, second_default, seconds;
var init_second = __esm({
  "node_modules/c3/node_modules/d3-time/src/second.js"() {
    init_interval2();
    init_duration2();
    second = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds());
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationSecond);
    }, function(start2, end) {
      return (end - start2) / durationSecond;
    }, function(date2) {
      return date2.getUTCSeconds();
    });
    second_default = second;
    seconds = second.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/minute.js
var minute, minute_default, minutes;
var init_minute = __esm({
  "node_modules/c3/node_modules/d3-time/src/minute.js"() {
    init_interval2();
    init_duration2();
    minute = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationMinute);
    }, function(start2, end) {
      return (end - start2) / durationMinute;
    }, function(date2) {
      return date2.getMinutes();
    });
    minute_default = minute;
    minutes = minute.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/hour.js
var hour, hour_default, hours;
var init_hour = __esm({
  "node_modules/c3/node_modules/d3-time/src/hour.js"() {
    init_interval2();
    init_duration2();
    hour = newInterval(function(date2) {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationHour);
    }, function(start2, end) {
      return (end - start2) / durationHour;
    }, function(date2) {
      return date2.getHours();
    });
    hour_default = hour;
    hours = hour.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/day.js
var day, day_default, days;
var init_day = __esm({
  "node_modules/c3/node_modules/d3-time/src/day.js"() {
    init_interval2();
    init_duration2();
    day = newInterval(function(date2) {
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setDate(date2.getDate() + step);
    }, function(start2, end) {
      return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay;
    }, function(date2) {
      return date2.getDate() - 1;
    });
    day_default = day;
    days = day.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/week.js
function weekday(i) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday, monday, tuesday, wednesday, thursday, friday, saturday, sundays, mondays, tuesdays, wednesdays, thursdays, fridays, saturdays;
var init_week = __esm({
  "node_modules/c3/node_modules/d3-time/src/week.js"() {
    init_interval2();
    init_duration2();
    sunday = weekday(0);
    monday = weekday(1);
    tuesday = weekday(2);
    wednesday = weekday(3);
    thursday = weekday(4);
    friday = weekday(5);
    saturday = weekday(6);
    sundays = sunday.range;
    mondays = monday.range;
    tuesdays = tuesday.range;
    wednesdays = wednesday.range;
    thursdays = thursday.range;
    fridays = friday.range;
    saturdays = saturday.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/month.js
var month, month_default, months;
var init_month = __esm({
  "node_modules/c3/node_modules/d3-time/src/month.js"() {
    init_interval2();
    month = newInterval(function(date2) {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setMonth(date2.getMonth() + step);
    }, function(start2, end) {
      return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
    }, function(date2) {
      return date2.getMonth();
    });
    month_default = month;
    months = month.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/year.js
var year, year_default, years;
var init_year = __esm({
  "node_modules/c3/node_modules/d3-time/src/year.js"() {
    init_interval2();
    year = newInterval(function(date2) {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setFullYear(date2.getFullYear() + step);
    }, function(start2, end) {
      return end.getFullYear() - start2.getFullYear();
    }, function(date2) {
      return date2.getFullYear();
    });
    year.every = function(k2) {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date2) {
        date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, function(date2, step) {
        date2.setFullYear(date2.getFullYear() + step * k2);
      });
    };
    year_default = year;
    years = year.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcMinute.js
var utcMinute, utcMinute_default, utcMinutes;
var init_utcMinute = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcMinute.js"() {
    init_interval2();
    init_duration2();
    utcMinute = newInterval(function(date2) {
      date2.setUTCSeconds(0, 0);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationMinute);
    }, function(start2, end) {
      return (end - start2) / durationMinute;
    }, function(date2) {
      return date2.getUTCMinutes();
    });
    utcMinute_default = utcMinute;
    utcMinutes = utcMinute.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcHour.js
var utcHour, utcHour_default, utcHours;
var init_utcHour = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcHour.js"() {
    init_interval2();
    init_duration2();
    utcHour = newInterval(function(date2) {
      date2.setUTCMinutes(0, 0, 0);
    }, function(date2, step) {
      date2.setTime(+date2 + step * durationHour);
    }, function(start2, end) {
      return (end - start2) / durationHour;
    }, function(date2) {
      return date2.getUTCHours();
    });
    utcHour_default = utcHour;
    utcHours = utcHour.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcDay.js
var utcDay, utcDay_default, utcDays;
var init_utcDay = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcDay.js"() {
    init_interval2();
    init_duration2();
    utcDay = newInterval(function(date2) {
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, function(start2, end) {
      return (end - start2) / durationDay;
    }, function(date2) {
      return date2.getUTCDate() - 1;
    });
    utcDay_default = utcDay;
    utcDays = utcDay.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek;
  });
}
var utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays;
var init_utcWeek = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcWeek.js"() {
    init_interval2();
    init_duration2();
    utcSunday = utcWeekday(0);
    utcMonday = utcWeekday(1);
    utcTuesday = utcWeekday(2);
    utcWednesday = utcWeekday(3);
    utcThursday = utcWeekday(4);
    utcFriday = utcWeekday(5);
    utcSaturday = utcWeekday(6);
    utcSundays = utcSunday.range;
    utcMondays = utcMonday.range;
    utcTuesdays = utcTuesday.range;
    utcWednesdays = utcWednesday.range;
    utcThursdays = utcThursday.range;
    utcFridays = utcFriday.range;
    utcSaturdays = utcSaturday.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcMonth.js
var utcMonth, utcMonth_default, utcMonths;
var init_utcMonth = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcMonth.js"() {
    init_interval2();
    utcMonth = newInterval(function(date2) {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, function(start2, end) {
      return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
    }, function(date2) {
      return date2.getUTCMonth();
    });
    utcMonth_default = utcMonth;
    utcMonths = utcMonth.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/utcYear.js
var utcYear, utcYear_default, utcYears;
var init_utcYear = __esm({
  "node_modules/c3/node_modules/d3-time/src/utcYear.js"() {
    init_interval2();
    utcYear = newInterval(function(date2) {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, function(date2, step) {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, function(start2, end) {
      return end.getUTCFullYear() - start2.getUTCFullYear();
    }, function(date2) {
      return date2.getUTCFullYear();
    });
    utcYear.every = function(k2) {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : newInterval(function(date2) {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, function(date2, step) {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
      });
    };
    utcYear_default = utcYear;
    utcYears = utcYear.range;
  }
});

// node_modules/c3/node_modules/d3-time/src/index.js
var init_src25 = __esm({
  "node_modules/c3/node_modules/d3-time/src/index.js"() {
    init_interval2();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_utcMinute();
    init_utcHour();
    init_utcDay();
    init_utcWeek();
    init_utcMonth();
    init_utcYear();
  }
});

// node_modules/c3/node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date2.setFullYear(d.y);
    return date2;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date2.setUTCFullYear(d.y);
    return date2;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y5, m, d) {
  return { y: y5, m, d, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear2,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i = -1, j = 0, n = specifier.length, c4, pad3, format2;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad3 = pads[c4 = specifier.charAt(++i)]) != null) c4 = specifier.charAt(++i);
          else pad3 = c4 === "e" ? " " : "0";
          if (format2 = formats2[c4]) c4 = format2(date2, pad3);
          string.push(c4);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day2;
      if (i != string.length) return null;
      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
      if (Z && !("Z" in d)) d.Z = 0;
      if ("p" in d) d.H = d.H % 12 + d.p * 12;
      if (d.m === void 0) d.m = "q" in d ? d.q : 0;
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day2 = week.getUTCDay();
          week = day2 > 4 || day2 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day2 = week.getDay();
          week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day2 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day2 + 5) % 7 : d.w + d.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return localDate(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c4, parse;
    while (i < n) {
      if (j >= m) return -1;
      c4 = specifier.charCodeAt(i++);
      if (c4 === 37) {
        c4 = specifier.charAt(i++);
        parse = parses[c4 in pads ? specifier.charAt(i++) : c4];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c4 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", false);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier += "", true);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
function pad2(value, fill, width) {
  var sign3 = value < 0 ? "-" : "", string = (sign3 ? -value : value) + "", length2 = string.length;
  return sign3 + (length2 < width ? new Array(width - length2 + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  var map5 = {}, i = -1, n = names.length;
  while (++i < n) map5[names[i].toLowerCase()] = i;
  return map5;
}
function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
  return pad2(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad2(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad2(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad2(1 + day_default.count(year_default(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad2(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
  return pad2(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad2(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad2(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
  var day2 = d.getDay();
  return day2 === 0 ? 7 : day2;
}
function formatWeekNumberSunday(d, p) {
  return pad2(sunday.count(year_default(d) - 1, d), p, 2);
}
function dISO(d) {
  var day2 = d.getDay();
  return day2 >= 4 || day2 === 0 ? thursday(d) : thursday.ceil(d);
}
function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad2(thursday.count(year_default(d), d) + (year_default(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad2(monday.count(year_default(d) - 1, d), p, 2);
}
function formatYear2(d, p) {
  return pad2(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
  d = dISO(d);
  return pad2(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad2(d.getFullYear() % 1e4, p, 4);
}
function formatFullYearISO(d, p) {
  var day2 = d.getDay();
  d = day2 >= 4 || day2 === 0 ? thursday(d) : thursday.ceil(d);
  return pad2(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad2(z / 60 | 0, "0", 2) + pad2(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad2(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad2(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad2(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad2(1 + utcDay_default.count(utcYear_default(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad2(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
  return pad2(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad2(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad2(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
  return pad2(utcSunday.count(utcYear_default(d) - 1, d), p, 2);
}
function UTCdISO(d) {
  var day2 = d.getUTCDay();
  return day2 >= 4 || day2 === 0 ? utcThursday(d) : utcThursday.ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad2(utcThursday.count(utcYear_default(d), d) + (utcYear_default(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad2(utcMonday.count(utcYear_default(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
  return pad2(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad2(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad2(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCFullYearISO(d, p) {
  var day2 = d.getUTCDay();
  d = day2 >= 4 || day2 === 0 ? utcThursday(d) : utcThursday.ceil(d);
  return pad2(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d) {
  return +d;
}
function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1e3);
}
var pads, numberRe, percentRe, requoteRe;
var init_locale2 = __esm({
  "node_modules/c3/node_modules/d3-time-format/src/locale.js"() {
    init_src25();
    pads = { "-": "", "_": " ", "0": "0" };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\^$*+?|[\]().{}]/g;
  }
});

// node_modules/c3/node_modules/d3-time-format/src/defaultLocale.js
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}
var locale2, timeFormat, timeParse, utcFormat, utcParse;
var init_defaultLocale2 = __esm({
  "node_modules/c3/node_modules/d3-time-format/src/defaultLocale.js"() {
    init_locale2();
    defaultLocale2({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/c3/node_modules/d3-time-format/src/isoFormat.js
function formatIsoNative(date2) {
  return date2.toISOString();
}
var isoSpecifier, formatIso, isoFormat_default;
var init_isoFormat = __esm({
  "node_modules/c3/node_modules/d3-time-format/src/isoFormat.js"() {
    init_defaultLocale2();
    isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
    formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);
    isoFormat_default = formatIso;
  }
});

// node_modules/c3/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso, isoParse_default;
var init_isoParse = __esm({
  "node_modules/c3/node_modules/d3-time-format/src/isoParse.js"() {
    init_isoFormat();
    init_defaultLocale2();
    parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);
    isoParse_default = parseIso;
  }
});

// node_modules/c3/node_modules/d3-time-format/src/index.js
var init_src26 = __esm({
  "node_modules/c3/node_modules/d3-time-format/src/index.js"() {
    init_defaultLocale2();
    init_locale2();
    init_isoFormat();
    init_isoParse();
  }
});

// node_modules/c3/node_modules/d3-scale/src/time.js
function date(t) {
  return new Date(t);
}
function number3(t) {
  return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
}
function calendar(year2, month2, week, day2, hour2, minute2, second2, millisecond2, format2) {
  var scale = continuous(identity2, identity2), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear3 = format2("%Y");
  var tickIntervals = [
    [second2, 1, durationSecond2],
    [second2, 5, 5 * durationSecond2],
    [second2, 15, 15 * durationSecond2],
    [second2, 30, 30 * durationSecond2],
    [minute2, 1, durationMinute2],
    [minute2, 5, 5 * durationMinute2],
    [minute2, 15, 15 * durationMinute2],
    [minute2, 30, 30 * durationMinute2],
    [hour2, 1, durationHour2],
    [hour2, 3, 3 * durationHour2],
    [hour2, 6, 6 * durationHour2],
    [hour2, 12, 12 * durationHour2],
    [day2, 1, durationDay2],
    [day2, 2, 2 * durationDay2],
    [week, 1, durationWeek2],
    [month2, 1, durationMonth],
    [month2, 3, 3 * durationMonth],
    [year2, 1, durationYear]
  ];
  function tickFormat(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear3)(date2);
  }
  function tickInterval(interval2, start2, stop, step) {
    if (interval2 == null) interval2 = 10;
    if (typeof interval2 === "number") {
      var target = Math.abs(stop - start2) / interval2, i = bisector_default(function(i2) {
        return i2[2];
      }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start2 / durationYear, stop / durationYear, interval2);
        interval2 = year2;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval2 = i[0];
      } else {
        step = Math.max(tickStep(start2, stop, interval2), 1);
        interval2 = millisecond2;
      }
    }
    return step == null ? interval2 : interval2.every(step);
  }
  scale.invert = function(y5) {
    return new Date(invert(y5));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(map4.call(_, number3)) : domain().map(date);
  };
  scale.ticks = function(interval2, step) {
    var d = domain(), t03 = d[0], t13 = d[d.length - 1], r = t13 < t03, t;
    if (r) t = t03, t03 = t13, t13 = t;
    t = tickInterval(interval2, t03, t13, step);
    t = t ? t.range(t03, t13 + 1) : [];
    return r ? t.reverse() : t;
  };
  scale.tickFormat = function(count2, specifier) {
    return specifier == null ? tickFormat : format2(specifier);
  };
  scale.nice = function(interval2, step) {
    var d = domain();
    return (interval2 = tickInterval(interval2, d[0], d[d.length - 1], step)) ? domain(nice_default(d, interval2)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(year2, month2, week, day2, hour2, minute2, second2, millisecond2, format2));
  };
  return scale;
}
function time_default() {
  return initRange.apply(calendar(year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, millisecond_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}
var durationSecond2, durationMinute2, durationHour2, durationDay2, durationWeek2, durationMonth, durationYear;
var init_time = __esm({
  "node_modules/c3/node_modules/d3-scale/src/time.js"() {
    init_src();
    init_src25();
    init_src26();
    init_array7();
    init_continuous();
    init_init();
    init_nice();
    durationSecond2 = 1e3;
    durationMinute2 = durationSecond2 * 60;
    durationHour2 = durationMinute2 * 60;
    durationDay2 = durationHour2 * 24;
    durationWeek2 = durationDay2 * 7;
    durationMonth = durationDay2 * 30;
    durationYear = durationDay2 * 365;
  }
});

// node_modules/c3/node_modules/d3-scale/src/utcTime.js
function utcTime_default() {
  return initRange.apply(calendar(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, millisecond_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}
var init_utcTime = __esm({
  "node_modules/c3/node_modules/d3-scale/src/utcTime.js"() {
    init_time();
    init_src26();
    init_src25();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/sequential.js
function transformer3() {
  var x06 = 0, x12 = 1, t03, t13, k10, transform2, interpolator = identity2, clamp = false, unknown;
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : interpolator(k10 === 0 ? 0.5 : (x5 = (transform2(x5) - t03) * k10, clamp ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale.domain = function(_) {
    return arguments.length ? (t03 = transform2(x06 = +_[0]), t13 = transform2(x12 = +_[1]), k10 = t03 === t13 ? 0 : 1 / (t13 - t03), scale) : [x06, x12];
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };
  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t) {
    transform2 = t, t03 = t(x06), t13 = t(x12), k10 = t03 === t13 ? 0 : 1 / (t13 - t03);
    return scale;
  };
}
function copy2(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(transformer3()(identity2));
  scale.copy = function() {
    return copy2(scale, sequential());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialLog() {
  var scale = loggish(transformer3()).domain([1, 10]);
  scale.copy = function() {
    return copy2(scale, sequentialLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSymlog() {
  var scale = symlogish(transformer3());
  scale.copy = function() {
    return copy2(scale, sequentialSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
  var scale = powish(transformer3());
  scale.copy = function() {
    return copy2(scale, sequentialPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
var init_sequential = __esm({
  "node_modules/c3/node_modules/d3-scale/src/sequential.js"() {
    init_continuous();
    init_init();
    init_linear2();
    init_log();
    init_symlog();
    init_pow();
  }
});

// node_modules/c3/node_modules/d3-scale/src/sequentialQuantile.js
function sequentialQuantile() {
  var domain = [], interpolator = identity2;
  function scale(x5) {
    if (!isNaN(x5 = +x5)) return interpolator((bisect_default(domain, x5) - 1) / (domain.length - 1));
  }
  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(ascending_default);
    return scale;
  };
  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };
  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };
  return initInterpolator.apply(scale, arguments);
}
var init_sequentialQuantile = __esm({
  "node_modules/c3/node_modules/d3-scale/src/sequentialQuantile.js"() {
    init_src();
    init_continuous();
    init_init();
  }
});

// node_modules/c3/node_modules/d3-scale/src/diverging.js
function transformer4() {
  var x06 = 0, x12 = 0.5, x22 = 1, t03, t13, t22, k10, k21, interpolator = identity2, transform2, clamp = false, unknown;
  function scale(x5) {
    return isNaN(x5 = +x5) ? unknown : (x5 = 0.5 + ((x5 = +transform2(x5)) - t13) * (x5 < t13 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x5)) : x5));
  }
  scale.domain = function(_) {
    return arguments.length ? (t03 = transform2(x06 = +_[0]), t13 = transform2(x12 = +_[1]), t22 = transform2(x22 = +_[2]), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13), scale) : [x06, x12, x22];
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };
  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t) {
    transform2 = t, t03 = t(x06), t13 = t(x12), t22 = t(x22), k10 = t03 === t13 ? 0 : 0.5 / (t13 - t03), k21 = t13 === t22 ? 0 : 0.5 / (t22 - t13);
    return scale;
  };
}
function diverging() {
  var scale = linearish(transformer4()(identity2));
  scale.copy = function() {
    return copy2(scale, diverging());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingLog() {
  var scale = loggish(transformer4()).domain([0.1, 1, 10]);
  scale.copy = function() {
    return copy2(scale, divergingLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSymlog() {
  var scale = symlogish(transformer4());
  scale.copy = function() {
    return copy2(scale, divergingSymlog()).constant(scale.constant());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingPow() {
  var scale = powish(transformer4());
  scale.copy = function() {
    return copy2(scale, divergingPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
var init_diverging = __esm({
  "node_modules/c3/node_modules/d3-scale/src/diverging.js"() {
    init_continuous();
    init_init();
    init_linear2();
    init_log();
    init_sequential();
    init_symlog();
    init_pow();
  }
});

// node_modules/c3/node_modules/d3-scale/src/index.js
var init_src27 = __esm({
  "node_modules/c3/node_modules/d3-scale/src/index.js"() {
    init_band();
    init_identity6();
    init_linear2();
    init_log();
    init_symlog();
    init_ordinal();
    init_pow();
    init_quantile2();
    init_quantize2();
    init_threshold();
    init_time();
    init_utcTime();
    init_sequential();
    init_sequentialQuantile();
    init_diverging();
    init_tickFormat();
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}
var init_colors = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/colors.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default;
var init_category10 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/category10.js"() {
    init_colors();
    category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default;
var init_Accent = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Accent.js"() {
    init_colors();
    Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default;
var init_Dark2 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Dark2.js"() {
    init_colors();
    Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default;
var init_Paired = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Paired.js"() {
    init_colors();
    Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default;
var init_Pastel1 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js"() {
    init_colors();
    Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default;
var init_Pastel2 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js"() {
    init_colors();
    Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default;
var init_Set1 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set1.js"() {
    init_colors();
    Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default;
var init_Set2 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set2.js"() {
    init_colors();
    Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default;
var init_Set3 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Set3.js"() {
    init_colors();
    Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default;
var init_Tableau10 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js"() {
    init_colors();
    Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/ramp.js
function ramp_default(scheme28) {
  return rgbBasis(scheme28[scheme28.length - 1]);
}
var init_ramp = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/ramp.js"() {
    init_src7();
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme, BrBG_default;
var init_BrBG = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/BrBG.js"() {
    init_colors();
    init_ramp();
    scheme = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors_default);
    BrBG_default = ramp_default(scheme);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2, PRGn_default;
var init_PRGn = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PRGn.js"() {
    init_colors();
    init_ramp();
    scheme2 = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors_default);
    PRGn_default = ramp_default(scheme2);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3, PiYG_default;
var init_PiYG = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PiYG.js"() {
    init_colors();
    init_ramp();
    scheme3 = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors_default);
    PiYG_default = ramp_default(scheme3);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4, PuOr_default;
var init_PuOr = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/PuOr.js"() {
    init_colors();
    init_ramp();
    scheme4 = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors_default);
    PuOr_default = ramp_default(scheme4);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5, RdBu_default;
var init_RdBu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdBu.js"() {
    init_colors();
    init_ramp();
    scheme5 = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors_default);
    RdBu_default = ramp_default(scheme5);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6, RdGy_default;
var init_RdGy = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdGy.js"() {
    init_colors();
    init_ramp();
    scheme6 = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors_default);
    RdGy_default = ramp_default(scheme6);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7, RdYlBu_default;
var init_RdYlBu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js"() {
    init_colors();
    init_ramp();
    scheme7 = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors_default);
    RdYlBu_default = ramp_default(scheme7);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8, RdYlGn_default;
var init_RdYlGn = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js"() {
    init_colors();
    init_ramp();
    scheme8 = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors_default);
    RdYlGn_default = ramp_default(scheme8);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9, Spectral_default;
var init_Spectral = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/diverging/Spectral.js"() {
    init_colors();
    init_ramp();
    scheme9 = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors_default);
    Spectral_default = ramp_default(scheme9);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10, BuGn_default;
var init_BuGn = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js"() {
    init_colors();
    init_ramp();
    scheme10 = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors_default);
    BuGn_default = ramp_default(scheme10);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11, BuPu_default;
var init_BuPu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js"() {
    init_colors();
    init_ramp();
    scheme11 = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors_default);
    BuPu_default = ramp_default(scheme11);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12, GnBu_default;
var init_GnBu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js"() {
    init_colors();
    init_ramp();
    scheme12 = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors_default);
    GnBu_default = ramp_default(scheme12);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13, OrRd_default;
var init_OrRd = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js"() {
    init_colors();
    init_ramp();
    scheme13 = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors_default);
    OrRd_default = ramp_default(scheme13);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14, PuBuGn_default;
var init_PuBuGn = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js"() {
    init_colors();
    init_ramp();
    scheme14 = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors_default);
    PuBuGn_default = ramp_default(scheme14);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15, PuBu_default;
var init_PuBu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js"() {
    init_colors();
    init_ramp();
    scheme15 = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors_default);
    PuBu_default = ramp_default(scheme15);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16, PuRd_default;
var init_PuRd = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js"() {
    init_colors();
    init_ramp();
    scheme16 = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors_default);
    PuRd_default = ramp_default(scheme16);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17, RdPu_default;
var init_RdPu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js"() {
    init_colors();
    init_ramp();
    scheme17 = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors_default);
    RdPu_default = ramp_default(scheme17);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18, YlGnBu_default;
var init_YlGnBu = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js"() {
    init_colors();
    init_ramp();
    scheme18 = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors_default);
    YlGnBu_default = ramp_default(scheme18);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19, YlGn_default;
var init_YlGn = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js"() {
    init_colors();
    init_ramp();
    scheme19 = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors_default);
    YlGn_default = ramp_default(scheme19);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20, YlOrBr_default;
var init_YlOrBr = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js"() {
    init_colors();
    init_ramp();
    scheme20 = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors_default);
    YlOrBr_default = ramp_default(scheme20);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21, YlOrRd_default;
var init_YlOrRd = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js"() {
    init_colors();
    init_ramp();
    scheme21 = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors_default);
    YlOrRd_default = ramp_default(scheme21);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22, Blues_default;
var init_Blues = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js"() {
    init_colors();
    init_ramp();
    scheme22 = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors_default);
    Blues_default = ramp_default(scheme22);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23, Greens_default;
var init_Greens = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js"() {
    init_colors();
    init_ramp();
    scheme23 = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors_default);
    Greens_default = ramp_default(scheme23);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24, Greys_default;
var init_Greys = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js"() {
    init_colors();
    init_ramp();
    scheme24 = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors_default);
    Greys_default = ramp_default(scheme24);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25, Purples_default;
var init_Purples = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js"() {
    init_colors();
    init_ramp();
    scheme25 = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors_default);
    Purples_default = ramp_default(scheme25);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26, Reds_default;
var init_Reds = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js"() {
    init_colors();
    init_ramp();
    scheme26 = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors_default);
    Reds_default = ramp_default(scheme26);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27, Oranges_default;
var init_Oranges = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js"() {
    init_colors();
    init_ramp();
    scheme27 = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors_default);
    Oranges_default = ramp_default(scheme27);
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
var init_cividis = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2;
var init_cubehelix3 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js"() {
    init_src6();
    init_src7();
    cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
function rainbow_default(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}
var warm, cool, c;
var init_rainbow = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js"() {
    init_src6();
    init_src7();
    warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
    c = cubehelix();
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
function sinebow_default(t) {
  var x5;
  t = (0.5 - t) * Math.PI;
  c2.r = 255 * (x5 = Math.sin(t)) * x5;
  c2.g = 255 * (x5 = Math.sin(t + pi_1_3)) * x5;
  c2.b = 255 * (x5 = Math.sin(t + pi_2_3)) * x5;
  return c2 + "";
}
var c2, pi_1_3, pi_2_3;
var init_sinebow = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js"() {
    init_src6();
    c2 = rgb();
    pi_1_3 = Math.PI / 3;
    pi_2_3 = Math.PI * 2 / 3;
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
var init_turbo = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js"() {
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range2) {
  var n = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var viridis_default, magma, inferno, plasma;
var init_viridis = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js"() {
    init_colors();
    viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
    magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
    inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
    plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
  }
});

// node_modules/c3/node_modules/d3-scale-chromatic/src/index.js
var init_src28 = __esm({
  "node_modules/c3/node_modules/d3-scale-chromatic/src/index.js"() {
    init_category10();
    init_Accent();
    init_Dark2();
    init_Paired();
    init_Pastel1();
    init_Pastel2();
    init_Set1();
    init_Set2();
    init_Set3();
    init_Tableau10();
    init_BrBG();
    init_PRGn();
    init_PiYG();
    init_PuOr();
    init_RdBu();
    init_RdGy();
    init_RdYlBu();
    init_RdYlGn();
    init_Spectral();
    init_BuGn();
    init_BuPu();
    init_GnBu();
    init_OrRd();
    init_PuBuGn();
    init_PuBu();
    init_PuRd();
    init_RdPu();
    init_YlGnBu();
    init_YlGn();
    init_YlOrBr();
    init_YlOrRd();
    init_Blues();
    init_Greens();
    init_Greys();
    init_Purples();
    init_Reds();
    init_Oranges();
    init_cividis();
    init_cubehelix3();
    init_rainbow();
    init_sinebow();
    init_turbo();
    init_viridis();
  }
});

// node_modules/c3/node_modules/d3-shape/src/constant.js
function constant_default12(x5) {
  return function constant() {
    return x5;
  };
}
var init_constant12 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/math.js
function acos2(x5) {
  return x5 > 1 ? 0 : x5 < -1 ? pi5 : Math.acos(x5);
}
function asin2(x5) {
  return x5 >= 1 ? halfPi4 : x5 <= -1 ? -halfPi4 : Math.asin(x5);
}
var abs2, atan22, cos3, max2, min, sin3, sqrt3, epsilon5, pi5, halfPi4, tau5;
var init_math5 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/math.js"() {
    abs2 = Math.abs;
    atan22 = Math.atan2;
    cos3 = Math.cos;
    max2 = Math.max;
    min = Math.min;
    sin3 = Math.sin;
    sqrt3 = Math.sqrt;
    epsilon5 = 1e-12;
    pi5 = Math.PI;
    halfPi4 = pi5 / 2;
    tau5 = 2 * pi5;
  }
});

// node_modules/c3/node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x06, y06, x12, y12, x22, y22, x32, y32) {
  var x10 = x12 - x06, y10 = y12 - y06, x322 = x32 - x22, y322 = y32 - y22, t = y322 * x10 - x322 * y10;
  if (t * t < epsilon5) return;
  t = (x322 * (y06 - y22) - y322 * (x06 - x22)) / t;
  return [x06 + t * x10, y06 + t * y10];
}
function cornerTangents(x06, y06, x12, y12, r1, rc, cw) {
  var x01 = x06 - x12, y01 = y06 - y12, lo = (cw ? rc : -rc) / sqrt3(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x06 + ox, y11 = y06 + oy, x10 = x12 + ox, y10 = y12 + oy, x004 = (x11 + x10) / 2, y004 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D2 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt3(max2(0, r * r * d2 - D2 * D2)), cx0 = (D2 * dy - dx * d) / d2, cy0 = (-D2 * dx - dy * d) / d2, cx1 = (D2 * dy + dx * d) / d2, cy1 = (-D2 * dx + dy * d) / d2, dx0 = cx0 - x004, dy0 = cy0 - y004, dx1 = cx1 - x004, dy1 = cy1 - y004;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default12(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi4, a1 = endAngle.apply(this, arguments) - halfPi4, da = abs2(a1 - a0), cw = a1 > a0;
    if (!context) context = buffer = path_default();
    if (r1 < r0) r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon5)) context.moveTo(0, 0);
    else if (da > tau5 - epsilon5) {
      context.moveTo(r1 * cos3(a0), r1 * sin3(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon5) {
        context.moveTo(r0 * cos3(a1), r0 * sin3(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon5 && (padRadius ? +padRadius.apply(this, arguments) : sqrt3(r0 * r0 + r1 * r1)), rc = min(abs2(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t03, t13;
      if (rp > epsilon5) {
        var p02 = asin2(rp / r0 * sin3(ap)), p1 = asin2(rp / r1 * sin3(ap));
        if ((da0 -= p02 * 2) > epsilon5) p02 *= cw ? 1 : -1, a00 += p02, a10 -= p02;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon5) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos3(a01), y01 = r1 * sin3(a01), x10 = r0 * cos3(a10), y10 = r0 * sin3(a10);
      if (rc > epsilon5) {
        var x11 = r1 * cos3(a11), y11 = r1 * sin3(a11), x004 = r0 * cos3(a00), y004 = r0 * sin3(a00), oc;
        if (da < pi5 && (oc = intersect(x01, y01, x004, y004, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin3(acos2((ax * bx + ay * by) / (sqrt3(ax * ax + ay * ay) * sqrt3(bx * bx + by * by))) / 2), lc = sqrt3(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon5)) context.moveTo(x01, y01);
      else if (rc1 > epsilon5) {
        t03 = cornerTangents(x004, y004, x01, y01, r1, rc1, cw);
        t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc1 < rc) context.arc(t03.cx, t03.cy, rc1, atan22(t03.y01, t03.x01), atan22(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc1, atan22(t03.y01, t03.x01), atan22(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r1, atan22(t03.cy + t03.y11, t03.cx + t03.x11), atan22(t13.cy + t13.y11, t13.cx + t13.x11), !cw);
          context.arc(t13.cx, t13.cy, rc1, atan22(t13.y11, t13.x11), atan22(t13.y01, t13.x01), !cw);
        }
      } else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon5) || !(da0 > epsilon5)) context.lineTo(x10, y10);
      else if (rc0 > epsilon5) {
        t03 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t13 = cornerTangents(x01, y01, x004, y004, r0, -rc0, cw);
        context.lineTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc0 < rc) context.arc(t03.cx, t03.cy, rc0, atan22(t03.y01, t03.x01), atan22(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc0, atan22(t03.y01, t03.x01), atan22(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r0, atan22(t03.cy + t03.y11, t03.cx + t03.x11), atan22(t13.cy + t13.y11, t13.cx + t13.x11), cw);
          context.arc(t13.cx, t13.cy, rc0, atan22(t13.y11, t13.x11), atan22(t13.y01, t13.x01), !cw);
        }
      } else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi5 / 2;
    return [cos3(a2) * r, sin3(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default12(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default12(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default12(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default12(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default12(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default12(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default12(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}
var init_arc = __esm({
  "node_modules/c3/node_modules/d3-shape/src/arc.js"() {
    init_src12();
    init_constant12();
    init_math5();
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
function linear_default(context) {
  return new Linear(context);
}
var init_linear3 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/linear.js"() {
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
          // proceed
          default:
            this._context.lineTo(x5, y5);
            break;
        }
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/point.js
function x3(p) {
  return p[0];
}
function y3(p) {
  return p[1];
}
var init_point2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/point.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/line.js
function line_default2() {
  var x5 = x3, y5 = y3, defined = constant_default12(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i, n = data.length, d, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x5(d, i, data), +y5(d, i, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default12(+_), line) : x5;
  };
  line.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default12(+_), line) : y5;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default12(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}
var init_line2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/line.js"() {
    init_src12();
    init_constant12();
    init_linear3();
    init_point2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/area.js
function area_default5() {
  var x06 = x3, x12 = null, y06 = constant_default12(0), y12 = y3, defined = constant_default12(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i, j, k2, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null) output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k2 = i - 1; k2 >= j; --k2) {
            output.point(x0z[k2], y0z[k2]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x06(d, i, data), y0z[i] = +y06(d, i, data);
        output.point(x12 ? +x12(d, i, data) : x0z[i], y12 ? +y12(d, i, data) : y0z[i]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default2().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x06 = typeof _ === "function" ? _ : constant_default12(+_), x12 = null, area) : x06;
  };
  area.x0 = function(_) {
    return arguments.length ? (x06 = typeof _ === "function" ? _ : constant_default12(+_), area) : x06;
  };
  area.x1 = function(_) {
    return arguments.length ? (x12 = _ == null ? null : typeof _ === "function" ? _ : constant_default12(+_), area) : x12;
  };
  area.y = function(_) {
    return arguments.length ? (y06 = typeof _ === "function" ? _ : constant_default12(+_), y12 = null, area) : y06;
  };
  area.y0 = function(_) {
    return arguments.length ? (y06 = typeof _ === "function" ? _ : constant_default12(+_), area) : y06;
  };
  area.y1 = function(_) {
    return arguments.length ? (y12 = _ == null ? null : typeof _ === "function" ? _ : constant_default12(+_), area) : y12;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x06).y(y06);
  };
  area.lineY1 = function() {
    return arealine().x(x06).y(y12);
  };
  area.lineX1 = function() {
    return arealine().x(x12).y(y06);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default12(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}
var init_area5 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/area.js"() {
    init_src12();
    init_constant12();
    init_linear3();
    init_line2();
    init_point2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/descending.js
function descending_default2(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/descending.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/identity.js
function identity_default6(d) {
  return d;
}
var init_identity7 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/identity.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default6, sortValues = descending_default2, sort = null, startAngle = constant_default12(0), endAngle = constant_default12(tau5), padAngle = constant_default12(0);
  function pie(data) {
    var i, n = data.length, j, k2, sum3 = 0, index2 = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau5, Math.max(-tau5, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i = 0; i < n; ++i) {
      if ((v = arcs[index2[i] = i] = +value(data[i], i, data)) > 0) {
        sum3 += v;
      }
    }
    if (sortValues != null) index2.sort(function(i2, j2) {
      return sortValues(arcs[i2], arcs[j2]);
    });
    else if (sort != null) index2.sort(function(i2, j2) {
      return sort(data[i2], data[j2]);
    });
    for (i = 0, k2 = sum3 ? (da - n * pa) / sum3 : 0; i < n; ++i, a0 = a1) {
      j = index2[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default12(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default12(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default12(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default12(+_), pie) : padAngle;
  };
  return pie;
}
var init_pie = __esm({
  "node_modules/c3/node_modules/d3-shape/src/pie.js"() {
    init_constant12();
    init_descending2();
    init_identity7();
    init_math5();
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/radial.js
function Radial(curve) {
  this._curve = curve;
}
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}
var curveRadialLinear;
var init_radial2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/radial.js"() {
    init_linear3();
    curveRadialLinear = curveRadial(linear_default);
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a2, r) {
        this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/lineRadial.js
function lineRadial(l) {
  var c4 = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  l.curve = function(_) {
    return arguments.length ? c4(curveRadial(_)) : c4()._curve;
  };
  return l;
}
function lineRadial_default() {
  return lineRadial(line_default2().curve(curveRadialLinear));
}
var init_lineRadial = __esm({
  "node_modules/c3/node_modules/d3-shape/src/lineRadial.js"() {
    init_radial2();
    init_line2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/areaRadial.js
function areaRadial_default() {
  var a2 = area_default5().curve(curveRadialLinear), c4 = a2.curve, x06 = a2.lineX0, x12 = a2.lineX1, y06 = a2.lineY0, y12 = a2.lineY1;
  a2.angle = a2.x, delete a2.x;
  a2.startAngle = a2.x0, delete a2.x0;
  a2.endAngle = a2.x1, delete a2.x1;
  a2.radius = a2.y, delete a2.y;
  a2.innerRadius = a2.y0, delete a2.y0;
  a2.outerRadius = a2.y1, delete a2.y1;
  a2.lineStartAngle = function() {
    return lineRadial(x06());
  }, delete a2.lineX0;
  a2.lineEndAngle = function() {
    return lineRadial(x12());
  }, delete a2.lineX1;
  a2.lineInnerRadius = function() {
    return lineRadial(y06());
  }, delete a2.lineY0;
  a2.lineOuterRadius = function() {
    return lineRadial(y12());
  }, delete a2.lineY1;
  a2.curve = function(_) {
    return arguments.length ? c4(curveRadial(_)) : c4()._curve;
  };
  return a2;
}
var init_areaRadial = __esm({
  "node_modules/c3/node_modules/d3-shape/src/areaRadial.js"() {
    init_radial2();
    init_area5();
    init_lineRadial();
  }
});

// node_modules/c3/node_modules/d3-shape/src/pointRadial.js
function pointRadial_default(x5, y5) {
  return [(y5 = +y5) * Math.cos(x5 -= Math.PI / 2), y5 * Math.sin(x5)];
}
var init_pointRadial = __esm({
  "node_modules/c3/node_modules/d3-shape/src/pointRadial.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/array.js
var slice7;
var init_array8 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/array.js"() {
    slice7 = Array.prototype.slice;
  }
});

// node_modules/c3/node_modules/d3-shape/src/link/index.js
function linkSource(d) {
  return d.source;
}
function linkTarget(d) {
  return d.target;
}
function link2(curve) {
  var source = linkSource, target = linkTarget, x5 = x3, y5 = y3, context = null;
  function link3() {
    var buffer, argv = slice7.call(arguments), s2 = source.apply(this, argv), t = target.apply(this, argv);
    if (!context) context = buffer = path_default();
    curve(context, +x5.apply(this, (argv[0] = s2, argv)), +y5.apply(this, argv), +x5.apply(this, (argv[0] = t, argv)), +y5.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }
  link3.source = function(_) {
    return arguments.length ? (source = _, link3) : source;
  };
  link3.target = function(_) {
    return arguments.length ? (target = _, link3) : target;
  };
  link3.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default12(+_), link3) : x5;
  };
  link3.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default12(+_), link3) : y5;
  };
  link3.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, link3) : context;
  };
  return link3;
}
function curveHorizontal(context, x06, y06, x12, y12) {
  context.moveTo(x06, y06);
  context.bezierCurveTo(x06 = (x06 + x12) / 2, y06, x06, y12, x12, y12);
}
function curveVertical(context, x06, y06, x12, y12) {
  context.moveTo(x06, y06);
  context.bezierCurveTo(x06, y06 = (y06 + y12) / 2, x12, y06, x12, y12);
}
function curveRadial2(context, x06, y06, x12, y12) {
  var p02 = pointRadial_default(x06, y06), p1 = pointRadial_default(x06, y06 = (y06 + y12) / 2), p2 = pointRadial_default(x12, y06), p3 = pointRadial_default(x12, y12);
  context.moveTo(p02[0], p02[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}
function linkHorizontal() {
  return link2(curveHorizontal);
}
function linkVertical() {
  return link2(curveVertical);
}
function linkRadial() {
  var l = link2(curveRadial2);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
var init_link2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/link/index.js"() {
    init_src12();
    init_array8();
    init_constant12();
    init_point2();
    init_pointRadial();
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/circle.js
var circle_default3;
var init_circle4 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/circle.js"() {
    init_math5();
    circle_default3 = {
      draw: function(context, size) {
        var r = Math.sqrt(size / pi5);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau5);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/cross.js
var cross_default3;
var init_cross3 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/cross.js"() {
    cross_default3 = {
      draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/diamond.js
var tan30, tan30_2, diamond_default;
var init_diamond = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/diamond.js"() {
    tan30 = Math.sqrt(1 / 3);
    tan30_2 = tan30 * 2;
    diamond_default = {
      draw: function(context, size) {
        var y5 = Math.sqrt(size / tan30_2), x5 = y5 * tan30;
        context.moveTo(0, -y5);
        context.lineTo(x5, 0);
        context.lineTo(0, y5);
        context.lineTo(-x5, 0);
        context.closePath();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/star.js
var ka, kr, kx, ky, star_default;
var init_star = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/star.js"() {
    init_math5();
    ka = 0.8908130915292852;
    kr = Math.sin(pi5 / 10) / Math.sin(7 * pi5 / 10);
    kx = Math.sin(tau5 / 10) * kr;
    ky = -Math.cos(tau5 / 10) * kr;
    star_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size * ka), x5 = kx * r, y5 = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x5, y5);
        for (var i = 1; i < 5; ++i) {
          var a2 = tau5 * i / 5, c4 = Math.cos(a2), s2 = Math.sin(a2);
          context.lineTo(s2 * r, -c4 * r);
          context.lineTo(c4 * x5 - s2 * y5, s2 * x5 + c4 * y5);
        }
        context.closePath();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/square.js
var square_default;
var init_square = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/square.js"() {
    square_default = {
      draw: function(context, size) {
        var w = Math.sqrt(size), x5 = -w / 2;
        context.rect(x5, x5, w, w);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/triangle.js
var sqrt32, triangle_default;
var init_triangle = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/triangle.js"() {
    sqrt32 = Math.sqrt(3);
    triangle_default = {
      draw: function(context, size) {
        var y5 = -Math.sqrt(size / (sqrt32 * 3));
        context.moveTo(0, y5 * 2);
        context.lineTo(-sqrt32 * y5, -y5);
        context.lineTo(sqrt32 * y5, -y5);
        context.closePath();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol/wye.js
var c3, s, k, a, wye_default;
var init_wye = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol/wye.js"() {
    c3 = -0.5;
    s = Math.sqrt(3) / 2;
    k = 1 / Math.sqrt(12);
    a = (k / 2 + 1) * 3;
    wye_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size / a), x06 = r / 2, y06 = r * k, x12 = x06, y12 = r * k + r, x22 = -x12, y22 = y12;
        context.moveTo(x06, y06);
        context.lineTo(x12, y12);
        context.lineTo(x22, y22);
        context.lineTo(c3 * x06 - s * y06, s * x06 + c3 * y06);
        context.lineTo(c3 * x12 - s * y12, s * x12 + c3 * y12);
        context.lineTo(c3 * x22 - s * y22, s * x22 + c3 * y22);
        context.lineTo(c3 * x06 + s * y06, c3 * y06 - s * x06);
        context.lineTo(c3 * x12 + s * y12, c3 * y12 - s * x12);
        context.lineTo(c3 * x22 + s * y22, c3 * y22 - s * x22);
        context.closePath();
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/symbol.js
function symbol_default() {
  var type2 = constant_default12(circle_default3), size = constant_default12(64), context = null;
  function symbol() {
    var buffer;
    if (!context) context = buffer = path_default();
    type2.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }
  symbol.type = function(_) {
    return arguments.length ? (type2 = typeof _ === "function" ? _ : constant_default12(_), symbol) : type2;
  };
  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant_default12(+_), symbol) : size;
  };
  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };
  return symbol;
}
var symbols;
var init_symbol = __esm({
  "node_modules/c3/node_modules/d3-shape/src/symbol.js"() {
    init_src12();
    init_circle4();
    init_cross3();
    init_diamond();
    init_star();
    init_square();
    init_triangle();
    init_wye();
    init_constant12();
    symbols = [
      circle_default3,
      cross_default3,
      diamond_default,
      square_default,
      star_default,
      triangle_default,
      wye_default
    ];
  }
});

// node_modules/c3/node_modules/d3-shape/src/noop.js
function noop_default2() {
}
var init_noop3 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/noop.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/basis.js
function point2(that, x5, y5) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x5) / 6,
    (that._y0 + 4 * that._y1 + y5) / 6
  );
}
function Basis(context) {
  this._context = context;
}
function basis_default2(context) {
  return new Basis(context);
}
var init_basis2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/basis.js"() {
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          // proceed
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          // proceed
          default:
            point2(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y5;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
function basisClosed_default2(context) {
  return new BasisClosed(context);
}
var init_basisClosed2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/basisClosed.js"() {
    init_noop3();
    init_basis2();
    BasisClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x5, this._y2 = y5;
            break;
          case 1:
            this._point = 2;
            this._x3 = x5, this._y3 = y5;
            break;
          case 2:
            this._point = 3;
            this._x4 = x5, this._y4 = y5;
            this._context.moveTo((this._x0 + 4 * this._x1 + x5) / 6, (this._y0 + 4 * this._y1 + y5) / 6);
            break;
          default:
            point2(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y5;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
function basisOpen_default(context) {
  return new BasisOpen(context);
}
var init_basisOpen = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/basisOpen.js"() {
    init_basis2();
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x06 = (this._x0 + 4 * this._x1 + x5) / 6, y06 = (this._y0 + 4 * this._y1 + y5) / 6;
            this._line ? this._context.lineTo(x06, y06) : this._context.moveTo(x06, y06);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point2(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y5;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
var bundle_default;
var init_bundle = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/bundle.js"() {
    init_basis2();
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x5 = this._x, y5 = this._y, j = x5.length - 1;
        if (j > 0) {
          var x06 = x5[0], y06 = y5[0], dx = x5[j] - x06, dy = y5[j] - y06, i = -1, t;
          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x5[i] + (1 - this._beta) * (x06 + t * dx),
              this._beta * y5[i] + (1 - this._beta) * (y06 + t * dy)
            );
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x5, y5) {
        this._x.push(+x5);
        this._y.push(+y5);
      }
    };
    bundle_default = function custom12(beta) {
      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }
      bundle.beta = function(beta2) {
        return custom12(+beta2);
      };
      return bundle;
    }(0.85);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x5, y5) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x5),
    that._y2 + that._k * (that._y1 - y5),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinal_default;
var init_cardinal = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/cardinal.js"() {
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point3(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
            this._x1 = x5, this._y1 = y5;
            break;
          case 2:
            this._point = 3;
          // proceed
          default:
            point3(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    cardinal_default = function custom13(tension) {
      function cardinal(context) {
        return new Cardinal(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom13(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalClosed_default;
var init_cardinalClosed = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/cardinalClosed.js"() {
    init_noop3();
    init_cardinal();
    CardinalClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x5, this._y3 = y5;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x5, this._y4 = y5);
            break;
          case 2:
            this._point = 3;
            this._x5 = x5, this._y5 = y5;
            break;
          default:
            point3(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    cardinalClosed_default = function custom14(tension) {
      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom14(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
var cardinalOpen_default;
var init_cardinalOpen = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/cardinalOpen.js"() {
    init_cardinal();
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point3(this, x5, y5);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    cardinalOpen_default = function custom15(tension) {
      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }
      cardinal.tension = function(tension2) {
        return custom15(+tension2);
      };
      return cardinal;
    }(0);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x5, y5) {
  var x12 = that._x1, y12 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon5) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x12 = (x12 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y12 = (y12 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon5) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x5 * that._l12_2a) / m;
    y22 = (y22 * b + that._y1 * that._l23_2a - y5 * that._l12_2a) / m;
  }
  that._context.bezierCurveTo(x12, y12, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRom_default;
var init_catmullRom = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/catmullRom.js"() {
    init_math5();
    init_cardinal();
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y5;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          // proceed
          default:
            point4(this, x5, y5);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    catmullRom_default = function custom16(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom16(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomClosed_default;
var init_catmullRomClosed = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
    init_cardinalClosed();
    init_noop3();
    init_catmullRom();
    CatmullRomClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y5;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x5, this._y3 = y5;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x5, this._y4 = y5);
            break;
          case 2:
            this._point = 3;
            this._x5 = x5, this._y5 = y5;
            break;
          default:
            point4(this, x5, y5);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    catmullRomClosed_default = function custom17(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom17(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
var catmullRomOpen_default;
var init_catmullRomOpen = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
    init_cardinalOpen();
    init_catmullRom();
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        if (this._point) {
          var x23 = this._x2 - x5, y23 = this._y2 - y5;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          // proceed
          default:
            point4(this, x5, y5);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x5;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y5;
      }
    };
    catmullRomOpen_default = function custom18(alpha) {
      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }
      catmullRom.alpha = function(alpha2) {
        return custom18(+alpha2);
      };
      return catmullRom;
    }(0.5);
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
function linearClosed_default(context) {
  return new LinearClosed(context);
}
var init_linearClosed = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/linearClosed.js"() {
    init_noop3();
    LinearClosed.prototype = {
      areaStart: noop_default2,
      areaEnd: noop_default2,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        if (this._point) this._context.lineTo(x5, y5);
        else this._point = 1, this._context.moveTo(x5, y5);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/monotone.js
function sign2(x5) {
  return x5 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign2(s0) + sign2(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point5(that, t03, t13) {
  var x06 = that._x0, y06 = that._y0, x12 = that._x1, y12 = that._y1, dx = (x12 - x06) / 3;
  that._context.bezierCurveTo(x06 + dx, y06 + dx * t03, x12 - dx, y12 - dx * t13, x12, y12);
}
function MonotoneX(context) {
  this._context = context;
}
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
function ReflectContext(context) {
  this._context = context;
}
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
var init_monotone = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/monotone.js"() {
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point5(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        var t13 = NaN;
        x5 = +x5, y5 = +y5;
        if (x5 === this._x1 && y5 === this._y1) return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point5(this, slope2(this, t13 = slope3(this, x5, y5)), t13);
            break;
          default:
            point5(this, this._t0, t13 = slope3(this, x5, y5));
            break;
        }
        this._x0 = this._x1, this._x1 = x5;
        this._y0 = this._y1, this._y1 = y5;
        this._t0 = t13;
      }
    };
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x5, y5) {
      MonotoneX.prototype.point.call(this, y5, x5);
    };
    ReflectContext.prototype = {
      moveTo: function(x5, y5) {
        this._context.moveTo(y5, x5);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x5, y5) {
        this._context.lineTo(y5, x5);
      },
      bezierCurveTo: function(x12, y12, x22, y22, x5, y5) {
        this._context.bezierCurveTo(y12, x12, y22, x22, y5, x5);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
function controlPoints(x5) {
  var i, n = x5.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x5[0] + 2 * x5[1];
  for (i = 1; i < n - 1; ++i) a2[i] = 1, b[i] = 4, r[i] = 4 * x5[i] + 2 * x5[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x5[n - 1] + x5[n];
  for (i = 1; i < n; ++i) m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x5[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x5[i + 1] - a2[i + 1];
  return [a2, b];
}
function natural_default(context) {
  return new Natural(context);
}
var init_natural = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/natural.js"() {
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x5 = this._x, y5 = this._y, n = x5.length;
        if (n) {
          this._line ? this._context.lineTo(x5[0], y5[0]) : this._context.moveTo(x5[0], y5[0]);
          if (n === 2) {
            this._context.lineTo(x5[1], y5[1]);
          } else {
            var px = controlPoints(x5), py = controlPoints(y5);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x5[i1], y5[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x5, y5) {
        this._x.push(+x5);
        this._y.push(+y5);
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
var init_step = __esm({
  "node_modules/c3/node_modules/d3-shape/src/curve/step.js"() {
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x5, y5) {
        x5 = +x5, y5 = +y5;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x5, y5) : this._context.moveTo(x5, y5);
            break;
          case 1:
            this._point = 2;
          // proceed
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y5);
              this._context.lineTo(x5, y5);
            } else {
              var x12 = this._x * (1 - this._t) + x5 * this._t;
              this._context.lineTo(x12, this._y);
              this._context.lineTo(x12, y5);
            }
            break;
          }
        }
        this._x = x5, this._y = y5;
      }
    };
  }
});

// node_modules/c3/node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
var init_none = __esm({
  "node_modules/c3/node_modules/d3-shape/src/offset/none.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}
var init_none2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/none.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/stack.js
function stackValue(d, key) {
  return d[key];
}
function stack_default() {
  var keys = constant_default12([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }
    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant_default12(slice7.call(_)), stack) : keys;
  };
  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default12(+_), stack) : value;
  };
  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default12(slice7.call(_)), stack) : order;
  };
  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
  };
  return stack;
}
var init_stack = __esm({
  "node_modules/c3/node_modules/d3-shape/src/stack.js"() {
    init_array8();
    init_constant12();
    init_none();
    init_none2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y5; j < m; ++j) {
    for (y5 = i = 0; i < n; ++i) y5 += series[i][j][1] || 0;
    if (y5) for (i = 0; i < n; ++i) series[i][j][1] /= y5;
  }
  none_default(series, order);
}
var init_expand = __esm({
  "node_modules/c3/node_modules/d3-shape/src/offset/expand.js"() {
    init_none();
  }
});

// node_modules/c3/node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
var init_diverging2 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/offset/diverging.js"() {
  }
});

// node_modules/c3/node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y5 = 0; i < n; ++i) y5 += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y5 / 2;
  }
  none_default(series, order);
}
var init_silhouette = __esm({
  "node_modules/c3/node_modules/d3-shape/src/offset/silhouette.js"() {
    init_none();
  }
});

// node_modules/c3/node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y5 = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k2 = 0; k2 < i; ++k2) {
        var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y5;
    if (s1) y5 -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y5;
  none_default(series, order);
}
var init_wiggle = __esm({
  "node_modules/c3/node_modules/d3-shape/src/offset/wiggle.js"() {
    init_none();
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a2, b) {
    return peaks[a2] - peaks[b];
  });
}
function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}
var init_appearance = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/appearance.js"() {
    init_none2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/ascending.js
function ascending_default3(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a2, b) {
    return sums[a2] - sums[b];
  });
}
function sum2(series) {
  var s2 = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s2 += v;
  return s2;
}
var init_ascending3 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/ascending.js"() {
    init_none2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/descending.js
function descending_default3(series) {
  return ascending_default3(series).reverse();
}
var init_descending3 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/descending.js"() {
    init_ascending3();
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n = series.length, i, j, sums = series.map(sum2), order = appearance_default(series), top2 = 0, bottom2 = 0, tops = [], bottoms = [];
  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top2 < bottom2) {
      top2 += sums[j];
      tops.push(j);
    } else {
      bottom2 += sums[j];
      bottoms.push(j);
    }
  }
  return bottoms.reverse().concat(tops);
}
var init_insideOut = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/insideOut.js"() {
    init_appearance();
    init_ascending3();
  }
});

// node_modules/c3/node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}
var init_reverse = __esm({
  "node_modules/c3/node_modules/d3-shape/src/order/reverse.js"() {
    init_none2();
  }
});

// node_modules/c3/node_modules/d3-shape/src/index.js
var init_src29 = __esm({
  "node_modules/c3/node_modules/d3-shape/src/index.js"() {
    init_arc();
    init_area5();
    init_line2();
    init_pie();
    init_areaRadial();
    init_lineRadial();
    init_pointRadial();
    init_link2();
    init_symbol();
    init_circle4();
    init_cross3();
    init_diamond();
    init_square();
    init_star();
    init_triangle();
    init_wye();
    init_basisClosed2();
    init_basisOpen();
    init_basis2();
    init_bundle();
    init_cardinalClosed();
    init_cardinalOpen();
    init_cardinal();
    init_catmullRomClosed();
    init_catmullRomOpen();
    init_catmullRom();
    init_linearClosed();
    init_linear3();
    init_monotone();
    init_natural();
    init_step();
    init_stack();
    init_expand();
    init_diverging2();
    init_none();
    init_silhouette();
    init_wiggle();
    init_appearance();
    init_ascending3();
    init_descending3();
    init_insideOut();
    init_none2();
    init_reverse();
  }
});

// node_modules/d3-voronoi/src/constant.js
function constant_default13(x5) {
  return function() {
    return x5;
  };
}
var init_constant13 = __esm({
  "node_modules/d3-voronoi/src/constant.js"() {
  }
});

// node_modules/d3-voronoi/src/point.js
function x4(d) {
  return d[0];
}
function y4(d) {
  return d[1];
}
var init_point3 = __esm({
  "node_modules/d3-voronoi/src/point.js"() {
  }
});

// node_modules/d3-voronoi/src/RedBlackTree.js
function RedBlackTree() {
  this._ = null;
}
function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null;
}
function RedBlackRotateLeft(tree, node) {
  var p = node, q = node.R, parent = p.U;
  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }
  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}
function RedBlackRotateRight(tree, node) {
  var p = node, q = node.L, parent = p.U;
  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }
  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}
function RedBlackFirst(node) {
  while (node.L) node = node.L;
  return node;
}
var RedBlackTree_default;
var init_RedBlackTree = __esm({
  "node_modules/d3-voronoi/src/RedBlackTree.js"() {
    RedBlackTree.prototype = {
      constructor: RedBlackTree,
      insert: function(after, node) {
        var parent, grandpa, uncle;
        if (after) {
          node.P = after;
          node.N = after.N;
          if (after.N) after.N.P = node;
          after.N = node;
          if (after.R) {
            after = after.R;
            while (after.L) after = after.L;
            after.L = node;
          } else {
            after.R = node;
          }
          parent = after;
        } else if (this._) {
          after = RedBlackFirst(this._);
          node.P = null;
          node.N = after;
          after.P = after.L = node;
          parent = after;
        } else {
          node.P = node.N = null;
          this._ = node;
          parent = null;
        }
        node.L = node.R = null;
        node.U = parent;
        node.C = true;
        after = node;
        while (parent && parent.C) {
          grandpa = parent.U;
          if (parent === grandpa.L) {
            uncle = grandpa.R;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.R) {
                RedBlackRotateLeft(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              RedBlackRotateRight(this, grandpa);
            }
          } else {
            uncle = grandpa.L;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.L) {
                RedBlackRotateRight(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              RedBlackRotateLeft(this, grandpa);
            }
          }
          parent = after.U;
        }
        this._.C = false;
      },
      remove: function(node) {
        if (node.N) node.N.P = node.P;
        if (node.P) node.P.N = node.N;
        node.N = node.P = null;
        var parent = node.U, sibling, left2 = node.L, right2 = node.R, next, red;
        if (!left2) next = right2;
        else if (!right2) next = left2;
        else next = RedBlackFirst(right2);
        if (parent) {
          if (parent.L === node) parent.L = next;
          else parent.R = next;
        } else {
          this._ = next;
        }
        if (left2 && right2) {
          red = next.C;
          next.C = node.C;
          next.L = left2;
          left2.U = next;
          if (next !== right2) {
            parent = next.U;
            next.U = node.U;
            node = next.R;
            parent.L = node;
            next.R = right2;
            right2.U = next;
          } else {
            next.U = parent;
            parent = next;
            node = next.R;
          }
        } else {
          red = node.C;
          node = next;
        }
        if (node) node.U = parent;
        if (red) return;
        if (node && node.C) {
          node.C = false;
          return;
        }
        do {
          if (node === this._) break;
          if (node === parent.L) {
            sibling = parent.R;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              RedBlackRotateLeft(this, parent);
              sibling = parent.R;
            }
            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.R || !sibling.R.C) {
                sibling.L.C = false;
                sibling.C = true;
                RedBlackRotateRight(this, sibling);
                sibling = parent.R;
              }
              sibling.C = parent.C;
              parent.C = sibling.R.C = false;
              RedBlackRotateLeft(this, parent);
              node = this._;
              break;
            }
          } else {
            sibling = parent.L;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              RedBlackRotateRight(this, parent);
              sibling = parent.L;
            }
            if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
              if (!sibling.L || !sibling.L.C) {
                sibling.R.C = false;
                sibling.C = true;
                RedBlackRotateLeft(this, sibling);
                sibling = parent.L;
              }
              sibling.C = parent.C;
              parent.C = sibling.L.C = false;
              RedBlackRotateRight(this, parent);
              node = this._;
              break;
            }
          }
          sibling.C = true;
          node = parent;
          parent = parent.U;
        } while (!node.C);
        if (node) node.C = false;
      }
    };
    RedBlackTree_default = RedBlackTree;
  }
});

// node_modules/d3-voronoi/src/Edge.js
function createEdge(left2, right2, v0, v1) {
  var edge = [null, null], index2 = edges.push(edge) - 1;
  edge.left = left2;
  edge.right = right2;
  if (v0) setEdgeEnd(edge, left2, right2, v0);
  if (v1) setEdgeEnd(edge, right2, left2, v1);
  cells[left2.index].halfedges.push(index2);
  cells[right2.index].halfedges.push(index2);
  return edge;
}
function createBorderEdge(left2, v0, v1) {
  var edge = [v0, v1];
  edge.left = left2;
  return edge;
}
function setEdgeEnd(edge, left2, right2, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left2;
    edge.right = right2;
  } else if (edge.left === right2) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}
function clipEdge(edge, x06, y06, x12, y12) {
  var a2 = edge[0], b = edge[1], ax = a2[0], ay = a2[1], bx = b[0], by = b[1], t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
  r = x06 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dx > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = x12 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dx > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  r = y06 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  } else if (dy > 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t13) return;
    if (r > t03) t03 = r;
  } else if (dy > 0) {
    if (r < t03) return;
    if (r < t13) t13 = r;
  }
  if (!(t03 > 0) && !(t13 < 1)) return true;
  if (t03 > 0) edge[0] = [ax + t03 * dx, ay + t03 * dy];
  if (t13 < 1) edge[1] = [ax + t13 * dx, ay + t13 * dy];
  return true;
}
function connectEdge(edge, x06, y06, x12, y12) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0], left2 = edge.left, right2 = edge.right, lx = left2[0], ly = left2[1], rx = right2[0], ry = right2[1], fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
  if (ry === ly) {
    if (fx < x06 || fx >= x12) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y06];
      else if (v0[1] >= y12) return;
      v1 = [fx, y12];
    } else {
      if (!v0) v0 = [fx, y12];
      else if (v0[1] < y06) return;
      v1 = [fx, y06];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y06 - fb) / fm, y06];
        else if (v0[1] >= y12) return;
        v1 = [(y12 - fb) / fm, y12];
      } else {
        if (!v0) v0 = [(y12 - fb) / fm, y12];
        else if (v0[1] < y06) return;
        v1 = [(y06 - fb) / fm, y06];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x06, fm * x06 + fb];
        else if (v0[0] >= x12) return;
        v1 = [x12, fm * x12 + fb];
      } else {
        if (!v0) v0 = [x12, fm * x12 + fb];
        else if (v0[0] < x06) return;
        v1 = [x06, fm * x06 + fb];
      }
    }
  }
  edge[0] = v0;
  edge[1] = v1;
  return true;
}
function clipEdges(x06, y06, x12, y12) {
  var i = edges.length, edge;
  while (i--) {
    if (!connectEdge(edge = edges[i], x06, y06, x12, y12) || !clipEdge(edge, x06, y06, x12, y12) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon6 || Math.abs(edge[0][1] - edge[1][1]) > epsilon6)) {
      delete edges[i];
    }
  }
}
var init_Edge = __esm({
  "node_modules/d3-voronoi/src/Edge.js"() {
    init_Diagram();
  }
});

// node_modules/d3-voronoi/src/Cell.js
function createCell(site) {
  return cells[site.index] = {
    site,
    halfedges: []
  };
}
function cellHalfedgeAngle(cell, edge) {
  var site = cell.site, va = edge.left, vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];
  else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}
function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}
function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}
function sortCellHalfedges() {
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index2 = new Array(m), array4 = new Array(m);
      for (j = 0; j < m; ++j) index2[j] = j, array4[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
      index2.sort(function(i2, j2) {
        return array4[j2] - array4[i2];
      });
      for (j = 0; j < m; ++j) array4[j] = halfedges[index2[j]];
      for (j = 0; j < m; ++j) halfedges[j] = array4[j];
    }
  }
}
function clipCells(x06, y06, x12, y12) {
  var nCells = cells.length, iCell, cell, site, iHalfedge, halfedges, nHalfedges, start2, startX, startY, end, endX, endY, cover = true;
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;
      while (iHalfedge--) {
        if (!edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start2 = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start2[0], startY = start2[1];
        if (Math.abs(endX - startX) > epsilon6 || Math.abs(endY - startY) > epsilon6) {
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(
            site,
            end,
            Math.abs(endX - x06) < epsilon6 && y12 - endY > epsilon6 ? [x06, Math.abs(startX - x06) < epsilon6 ? startY : y12] : Math.abs(endY - y12) < epsilon6 && x12 - endX > epsilon6 ? [Math.abs(startY - y12) < epsilon6 ? startX : x12, y12] : Math.abs(endX - x12) < epsilon6 && endY - y06 > epsilon6 ? [x12, Math.abs(startX - x12) < epsilon6 ? startY : y06] : Math.abs(endY - y06) < epsilon6 && endX - x06 > epsilon6 ? [Math.abs(startY - y06) < epsilon6 ? startX : x06, y06] : null
          )) - 1);
          ++nHalfedges;
        }
      }
      if (nHalfedges) cover = false;
    }
  }
  if (cover) {
    var dx, dy, d2, dc = Infinity;
    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        dx = site[0] - x06;
        dy = site[1] - y06;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }
    if (cover) {
      var v00 = [x06, y06], v01 = [x06, y12], v11 = [x12, y12], v10 = [x12, y06];
      cover.halfedges.push(
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
        edges.push(createBorderEdge(site, v01, v11)) - 1,
        edges.push(createBorderEdge(site, v11, v10)) - 1,
        edges.push(createBorderEdge(site, v10, v00)) - 1
      );
    }
  }
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      if (!cell.halfedges.length) {
        delete cells[iCell];
      }
    }
  }
}
var init_Cell = __esm({
  "node_modules/d3-voronoi/src/Cell.js"() {
    init_Edge();
    init_Diagram();
  }
});

// node_modules/d3-voronoi/src/Circle.js
function Circle() {
  RedBlackNode(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}
function attachCircle(arc) {
  var lArc = arc.P, rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0], by = cSite[1], ax = lSite[0] - bx, ay = lSite[1] - by, cx = rSite[0] - bx, cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -epsilon23) return;
  var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x5 = (cy * ha - ay * hc) / d, y5 = (ax * hc - cx * ha) / d;
  var circle2 = circlePool.pop() || new Circle();
  circle2.arc = arc;
  circle2.site = cSite;
  circle2.x = x5 + bx;
  circle2.y = (circle2.cy = y5 + by) + Math.sqrt(x5 * x5 + y5 * y5);
  arc.circle = circle2;
  var before = null, node = circles._;
  while (node) {
    if (circle2.y < node.y || circle2.y === node.y && circle2.x <= node.x) {
      if (node.L) node = node.L;
      else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;
      else {
        before = node;
        break;
      }
    }
  }
  circles.insert(before, circle2);
  if (!before) firstCircle = circle2;
}
function detachCircle(arc) {
  var circle2 = arc.circle;
  if (circle2) {
    if (!circle2.P) firstCircle = circle2.N;
    circles.remove(circle2);
    circlePool.push(circle2);
    RedBlackNode(circle2);
    arc.circle = null;
  }
}
var circlePool, firstCircle;
var init_Circle = __esm({
  "node_modules/d3-voronoi/src/Circle.js"() {
    init_RedBlackTree();
    init_Diagram();
    circlePool = [];
  }
});

// node_modules/d3-voronoi/src/Beach.js
function Beach() {
  RedBlackNode(this);
  this.edge = this.site = this.circle = null;
}
function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}
function detachBeach(beach) {
  detachCircle(beach);
  beaches.remove(beach);
  beachPool.push(beach);
  RedBlackNode(beach);
}
function removeBeach(beach) {
  var circle2 = beach.circle, x5 = circle2.x, y5 = circle2.cy, vertex = [x5, y5], previous = beach.P, next = beach.N, disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;
  while (lArc.circle && Math.abs(x5 - lArc.circle.x) < epsilon6 && Math.abs(y5 - lArc.circle.cy) < epsilon6) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }
  disappearing.unshift(lArc);
  detachCircle(lArc);
  var rArc = next;
  while (rArc.circle && Math.abs(x5 - rArc.circle.x) < epsilon6 && Math.abs(y5 - rArc.circle.cy) < epsilon6) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }
  disappearing.push(rArc);
  detachCircle(rArc);
  var nArcs = disappearing.length, iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
  }
  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}
function addBeach(site) {
  var x5 = site[0], directrix = site[1], lArc, rArc, dxl, dxr, node = beaches._;
  while (node) {
    dxl = leftBreakPoint(node, directrix) - x5;
    if (dxl > epsilon6) node = node.L;
    else {
      dxr = x5 - rightBreakPoint(node, directrix);
      if (dxr > epsilon6) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -epsilon6) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -epsilon6) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }
  createCell(site);
  var newArc = createBeach(site);
  beaches.insert(lArc, newArc);
  if (!lArc && !rArc) return;
  if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
  }
  if (!rArc) {
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
  }
  detachCircle(lArc);
  detachCircle(rArc);
  var lSite = lArc.site, ax = lSite[0], ay = lSite[1], bx = site[0] - ax, by = site[1] - ay, rSite = rArc.site, cx = rSite[0] - ax, cy = rSite[1] - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
  newArc.edge = createEdge(lSite, site, null, vertex);
  rArc.edge = createEdge(site, rSite, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}
function leftBreakPoint(arc, directrix) {
  var site = arc.site, rfocx = site[0], rfocy = site[1], pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0], lfocy = site[1], plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}
function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
var beachPool;
var init_Beach = __esm({
  "node_modules/d3-voronoi/src/Beach.js"() {
    init_RedBlackTree();
    init_Cell();
    init_Circle();
    init_Edge();
    init_Diagram();
    beachPool = [];
  }
});

// node_modules/d3-voronoi/src/Diagram.js
function triangleArea(a2, b, c4) {
  return (a2[0] - c4[0]) * (b[1] - a2[1]) - (a2[0] - b[0]) * (c4[1] - a2[1]);
}
function lexicographic(a2, b) {
  return b[1] - a2[1] || b[0] - a2[0];
}
function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(), x5, y5, circle2;
  edges = [];
  cells = new Array(sites.length);
  beaches = new RedBlackTree_default();
  circles = new RedBlackTree_default();
  while (true) {
    circle2 = firstCircle;
    if (site && (!circle2 || site[1] < circle2.y || site[1] === circle2.y && site[0] < circle2.x)) {
      if (site[0] !== x5 || site[1] !== y5) {
        addBeach(site);
        x5 = site[0], y5 = site[1];
      }
      site = sites.pop();
    } else if (circle2) {
      removeBeach(circle2.arc);
    } else {
      break;
    }
  }
  sortCellHalfedges();
  if (extent) {
    var x06 = +extent[0][0], y06 = +extent[0][1], x12 = +extent[1][0], y12 = +extent[1][1];
    clipEdges(x06, y06, x12, y12);
    clipCells(x06, y06, x12, y12);
  }
  this.edges = edges;
  this.cells = cells;
  beaches = circles = edges = cells = null;
}
var epsilon6, epsilon23, beaches, cells, circles, edges;
var init_Diagram = __esm({
  "node_modules/d3-voronoi/src/Diagram.js"() {
    init_Beach();
    init_Cell();
    init_Circle();
    init_Edge();
    init_RedBlackTree();
    epsilon6 = 1e-6;
    epsilon23 = 1e-12;
    Diagram.prototype = {
      constructor: Diagram,
      polygons: function() {
        var edges2 = this.edges;
        return this.cells.map(function(cell) {
          var polygon = cell.halfedges.map(function(i) {
            return cellHalfedgeStart(cell, edges2[i]);
          });
          polygon.data = cell.site.data;
          return polygon;
        });
      },
      triangles: function() {
        var triangles = [], edges2 = this.edges;
        this.cells.forEach(function(cell, i) {
          if (!(m = (halfedges = cell.halfedges).length)) return;
          var site = cell.site, halfedges, j = -1, m, s0, e1 = edges2[halfedges[m - 1]], s1 = e1.left === site ? e1.right : e1.left;
          while (++j < m) {
            s0 = s1;
            e1 = edges2[halfedges[j]];
            s1 = e1.left === site ? e1.right : e1.left;
            if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
              triangles.push([site.data, s0.data, s1.data]);
            }
          }
        });
        return triangles;
      },
      links: function() {
        return this.edges.filter(function(edge) {
          return edge.right;
        }).map(function(edge) {
          return {
            source: edge.left.data,
            target: edge.right.data
          };
        });
      },
      find: function(x5, y5, radius) {
        var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;
        while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
        var dx = x5 - cell.site[0], dy = y5 - cell.site[1], d2 = dx * dx + dy * dy;
        do {
          cell = that.cells[i0 = i1], i1 = null;
          cell.halfedges.forEach(function(e) {
            var edge = that.edges[e], v = edge.left;
            if ((v === cell.site || !v) && !(v = edge.right)) return;
            var vx = x5 - v[0], vy = y5 - v[1], v2 = vx * vx + vy * vy;
            if (v2 < d2) d2 = v2, i1 = v.index;
          });
        } while (i1 !== null);
        that._found = i0;
        return radius == null || d2 <= radius * radius ? cell.site : null;
      }
    };
  }
});

// node_modules/d3-voronoi/src/voronoi.js
function voronoi_default() {
  var x5 = x4, y5 = y4, extent = null;
  function voronoi(data) {
    return new Diagram(data.map(function(d, i) {
      var s2 = [Math.round(x5(d, i, data) / epsilon6) * epsilon6, Math.round(y5(d, i, data) / epsilon6) * epsilon6];
      s2.index = i;
      s2.data = d;
      return s2;
    }), extent);
  }
  voronoi.polygons = function(data) {
    return voronoi(data).polygons();
  };
  voronoi.links = function(data) {
    return voronoi(data).links();
  };
  voronoi.triangles = function(data) {
    return voronoi(data).triangles();
  };
  voronoi.x = function(_) {
    return arguments.length ? (x5 = typeof _ === "function" ? _ : constant_default13(+_), voronoi) : x5;
  };
  voronoi.y = function(_) {
    return arguments.length ? (y5 = typeof _ === "function" ? _ : constant_default13(+_), voronoi) : y5;
  };
  voronoi.extent = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };
  voronoi.size = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };
  return voronoi;
}
var init_voronoi = __esm({
  "node_modules/d3-voronoi/src/voronoi.js"() {
    init_constant13();
    init_point3();
    init_Diagram();
  }
});

// node_modules/d3-voronoi/src/index.js
var init_src30 = __esm({
  "node_modules/d3-voronoi/src/index.js"() {
    init_voronoi();
  }
});

// node_modules/c3/node_modules/d3-zoom/src/constant.js
function constant_default14(x5) {
  return function() {
    return x5;
  };
}
var init_constant14 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/constant.js"() {
  }
});

// node_modules/c3/node_modules/d3-zoom/src/event.js
function ZoomEvent(target, type2, transform2) {
  this.target = target;
  this.type = type2;
  this.transform = transform2;
}
var init_event3 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/event.js"() {
  }
});

// node_modules/c3/node_modules/d3-zoom/src/transform.js
function Transform(k2, x5, y5) {
  this.k = k2;
  this.x = x5;
  this.y = y5;
}
function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity4;
  return node.__zoom;
}
var identity4;
var init_transform3 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/transform.js"() {
    Transform.prototype = {
      constructor: Transform,
      scale: function(k2) {
        return k2 === 1 ? this : new Transform(this.k * k2, this.x, this.y);
      },
      translate: function(x5, y5) {
        return x5 === 0 & y5 === 0 ? this : new Transform(this.k, this.x + this.k * x5, this.y + this.k * y5);
      },
      apply: function(point6) {
        return [point6[0] * this.k + this.x, point6[1] * this.k + this.y];
      },
      applyX: function(x5) {
        return x5 * this.k + this.x;
      },
      applyY: function(y5) {
        return y5 * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x5) {
        return (x5 - this.x) / this.k;
      },
      invertY: function(y5) {
        return (y5 - this.y) / this.k;
      },
      rescaleX: function(x5) {
        return x5.copy().domain(x5.range().map(this.invertX, this).map(x5.invert, x5));
      },
      rescaleY: function(y5) {
        return y5.copy().domain(y5.range().map(this.invertY, this).map(y5.invert, y5));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };
    identity4 = new Transform(1, 0, 0);
    transform.prototype = Transform.prototype;
  }
});

// node_modules/c3/node_modules/d3-zoom/src/noevent.js
function nopropagation3() {
  event.stopImmediatePropagation();
}
function noevent_default3() {
  event.preventDefault();
  event.stopImmediatePropagation();
}
var init_noevent3 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/noevent.js"() {
    init_src4();
  }
});

// node_modules/c3/node_modules/d3-zoom/src/zoom.js
function defaultFilter3() {
  return !event.ctrlKey && !event.button;
}
function defaultExtent2() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity4;
}
function defaultWheelDelta() {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3);
}
function defaultTouchable3() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent, translateExtent) {
  var dx0 = transform2.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter = defaultFilter3, extent = defaultExtent2, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable3, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0;
  function zoom(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point6) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule(collection, transform2, point6);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection2, k2, p) {
    zoom.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
      return k0 * k1;
    }, p);
  };
  zoom.scaleTo = function(selection2, k2, p) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t03 = this.__zoom, p02 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t03.invert(p02), k1 = typeof k2 === "function" ? k2.apply(this, arguments) : k2;
      return constrain(translate(scale(t03, k1), p02, p1), e, translateExtent);
    }, p);
  };
  zoom.translateBy = function(selection2, x5, y5) {
    zoom.transform(selection2, function() {
      return constrain(this.__zoom.translate(
        typeof x5 === "function" ? x5.apply(this, arguments) : x5,
        typeof y5 === "function" ? y5.apply(this, arguments) : y5
      ), extent.apply(this, arguments), translateExtent);
    });
  };
  zoom.translateTo = function(selection2, x5, y5, p) {
    zoom.transform(selection2, function() {
      var e = extent.apply(this, arguments), t = this.__zoom, p02 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity4.translate(p02[0], p02[1]).scale(t.k).translate(
        typeof x5 === "function" ? -x5.apply(this, arguments) : -x5,
        typeof y5 === "function" ? -y5.apply(this, arguments) : -y5
      ), e, translateExtent);
    }, p);
  };
  function scale(transform2, k2) {
    k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k2));
    return k2 === transform2.k ? transform2 : new Transform(k2, transform2.x, transform2.y);
  }
  function translate(transform2, p02, p1) {
    var x5 = p02[0] - p1[0] * transform2.k, y5 = p02[1] - p1[1] * transform2.k;
    return x5 === transform2.x && y5 === transform2.y ? transform2 : new Transform(transform2.k, x5, y5);
  }
  function centroid(extent2) {
    return [(+extent2[0][0] + +extent2[1][0]) / 2, (+extent2[0][1] + +extent2[1][1]) / 2];
  }
  function schedule(transition2, transform2, point6) {
    transition2.on("start.zoom", function() {
      gesture(this, arguments).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args), e = extent.apply(that, args), p = point6 == null ? centroid(e) : typeof point6 === "function" ? point6.apply(that, args) : point6, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a2 = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a2.invert(p).concat(w / a2.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1) t = b;
        else {
          var l = i(t), k2 = w / l[2];
          t = new Transform(k2, p[0] - l[0] * k2, p[1] - l[1] * k2);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      customEvent(new ZoomEvent(zoom, type2, this.that.__zoom), listeners.apply, listeners, [type2, this.that, this.args]);
    }
  };
  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments), t = this.__zoom, k2 = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = mouse_default(this);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k2) return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default3();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k2), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true), v = select_default2(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = mouse_default(this), x06 = event.clientX, y06 = event.clientY;
    nodrag_default(event.view);
    nopropagation3();
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved() {
      noevent_default3();
      if (!g.moved) {
        var dx = event.clientX - x06, dy = event.clientY - y06;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse_default(g.that), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event.view, g.moved);
      noevent_default3();
      g.end();
    }
  }
  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t03 = this.__zoom, p02 = mouse_default(this), p1 = t03.invert(p02), k1 = t03.k * (event.shiftKey ? 0.5 : 2), t13 = constrain(translate(scale(t03, k1), p02, p1), extent.apply(this, arguments), translateExtent);
    noevent_default3();
    if (duration > 0) select_default2(this).transition().duration(duration).call(schedule, t13, p02);
    else select_default2(this).call(zoom.transform, t13);
  }
  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = event.touches, n = touches.length, g = gesture(this, arguments, event.changedTouches.length === n), started, i, t, p;
    nopropagation3();
    for (i = 0; i < n; ++i) {
      t = touches[i], p = touch_default(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function() {
        touchstarting = null;
      }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default3();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;
    for (i = 0; i < n; ++i) {
      t = touches[i], p = touch_default(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p02 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p02[0]) * dp + (dp = p1[1] - p02[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p02[0] + p1[0]) / 2, (p02[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation3();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        var p = select_default2(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default14(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant_default14(!!_), zoom) : filter;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default14(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant_default14([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  return zoom;
}
var init_zoom2 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/zoom.js"() {
    init_src3();
    init_src5();
    init_src7();
    init_src4();
    init_src10();
    init_constant14();
    init_event3();
    init_transform3();
    init_noevent3();
  }
});

// node_modules/c3/node_modules/d3-zoom/src/index.js
var init_src31 = __esm({
  "node_modules/c3/node_modules/d3-zoom/src/index.js"() {
    init_zoom2();
    init_transform3();
  }
});

// node_modules/c3/node_modules/d3/index.js
var d3_exports = {};
__export(d3_exports, {
  FormatSpecifier: () => FormatSpecifier,
  active: () => active_default,
  arc: () => arc_default,
  area: () => area_default5,
  areaRadial: () => areaRadial_default,
  ascending: () => ascending_default,
  autoType: () => autoType,
  axisBottom: () => axisBottom,
  axisLeft: () => axisLeft,
  axisRight: () => axisRight,
  axisTop: () => axisTop,
  bisect: () => bisect_default,
  bisectLeft: () => bisectLeft,
  bisectRight: () => bisectRight,
  bisector: () => bisector_default,
  blob: () => blob_default,
  brush: () => brush_default,
  brushSelection: () => brushSelection,
  brushX: () => brushX,
  brushY: () => brushY,
  buffer: () => buffer_default,
  chord: () => chord_default,
  clientPoint: () => point_default,
  cluster: () => cluster_default,
  color: () => color,
  contourDensity: () => density_default,
  contours: () => contours_default,
  create: () => create_default,
  creator: () => creator_default,
  cross: () => cross_default,
  csv: () => csv2,
  csvFormat: () => csvFormat,
  csvFormatBody: () => csvFormatBody,
  csvFormatRow: () => csvFormatRow,
  csvFormatRows: () => csvFormatRows,
  csvFormatValue: () => csvFormatValue,
  csvParse: () => csvParse,
  csvParseRows: () => csvParseRows,
  cubehelix: () => cubehelix,
  curveBasis: () => basis_default2,
  curveBasisClosed: () => basisClosed_default2,
  curveBasisOpen: () => basisOpen_default,
  curveBundle: () => bundle_default,
  curveCardinal: () => cardinal_default,
  curveCardinalClosed: () => cardinalClosed_default,
  curveCardinalOpen: () => cardinalOpen_default,
  curveCatmullRom: () => catmullRom_default,
  curveCatmullRomClosed: () => catmullRomClosed_default,
  curveCatmullRomOpen: () => catmullRomOpen_default,
  curveLinear: () => linear_default,
  curveLinearClosed: () => linearClosed_default,
  curveMonotoneX: () => monotoneX,
  curveMonotoneY: () => monotoneY,
  curveNatural: () => natural_default,
  curveStep: () => step_default,
  curveStepAfter: () => stepAfter,
  curveStepBefore: () => stepBefore,
  customEvent: () => customEvent,
  descending: () => descending_default,
  deviation: () => deviation_default,
  dispatch: () => dispatch_default,
  drag: () => drag_default,
  dragDisable: () => nodrag_default,
  dragEnable: () => yesdrag,
  dsv: () => dsv,
  dsvFormat: () => dsv_default,
  easeBack: () => backInOut,
  easeBackIn: () => backIn,
  easeBackInOut: () => backInOut,
  easeBackOut: () => backOut,
  easeBounce: () => bounceOut,
  easeBounceIn: () => bounceIn,
  easeBounceInOut: () => bounceInOut,
  easeBounceOut: () => bounceOut,
  easeCircle: () => circleInOut,
  easeCircleIn: () => circleIn,
  easeCircleInOut: () => circleInOut,
  easeCircleOut: () => circleOut,
  easeCubic: () => cubicInOut,
  easeCubicIn: () => cubicIn,
  easeCubicInOut: () => cubicInOut,
  easeCubicOut: () => cubicOut,
  easeElastic: () => elasticOut,
  easeElasticIn: () => elasticIn,
  easeElasticInOut: () => elasticInOut,
  easeElasticOut: () => elasticOut,
  easeExp: () => expInOut,
  easeExpIn: () => expIn,
  easeExpInOut: () => expInOut,
  easeExpOut: () => expOut,
  easeLinear: () => linear2,
  easePoly: () => polyInOut,
  easePolyIn: () => polyIn,
  easePolyInOut: () => polyInOut,
  easePolyOut: () => polyOut,
  easeQuad: () => quadInOut,
  easeQuadIn: () => quadIn,
  easeQuadInOut: () => quadInOut,
  easeQuadOut: () => quadOut,
  easeSin: () => sinInOut,
  easeSinIn: () => sinIn,
  easeSinInOut: () => sinInOut,
  easeSinOut: () => sinOut,
  entries: () => entries_default,
  event: () => event,
  extent: () => extent_default,
  forceCenter: () => center_default,
  forceCollide: () => collide_default,
  forceLink: () => link_default,
  forceManyBody: () => manyBody_default,
  forceRadial: () => radial_default,
  forceSimulation: () => simulation_default,
  forceX: () => x_default2,
  forceY: () => y_default2,
  format: () => format,
  formatDefaultLocale: () => defaultLocale,
  formatLocale: () => locale_default,
  formatPrefix: () => formatPrefix,
  formatSpecifier: () => formatSpecifier,
  geoAlbers: () => albers_default,
  geoAlbersUsa: () => albersUsa_default,
  geoArea: () => area_default2,
  geoAzimuthalEqualArea: () => azimuthalEqualArea_default,
  geoAzimuthalEqualAreaRaw: () => azimuthalEqualAreaRaw,
  geoAzimuthalEquidistant: () => azimuthalEquidistant_default,
  geoAzimuthalEquidistantRaw: () => azimuthalEquidistantRaw,
  geoBounds: () => bounds_default,
  geoCentroid: () => centroid_default,
  geoCircle: () => circle_default,
  geoClipAntimeridian: () => antimeridian_default,
  geoClipCircle: () => circle_default2,
  geoClipExtent: () => extent_default3,
  geoClipRectangle: () => clipRectangle,
  geoConicConformal: () => conicConformal_default,
  geoConicConformalRaw: () => conicConformalRaw,
  geoConicEqualArea: () => conicEqualArea_default,
  geoConicEqualAreaRaw: () => conicEqualAreaRaw,
  geoConicEquidistant: () => conicEquidistant_default,
  geoConicEquidistantRaw: () => conicEquidistantRaw,
  geoContains: () => contains_default2,
  geoDistance: () => distance_default,
  geoEqualEarth: () => equalEarth_default,
  geoEqualEarthRaw: () => equalEarthRaw,
  geoEquirectangular: () => equirectangular_default,
  geoEquirectangularRaw: () => equirectangularRaw,
  geoGnomonic: () => gnomonic_default,
  geoGnomonicRaw: () => gnomonicRaw,
  geoGraticule: () => graticule,
  geoGraticule10: () => graticule10,
  geoIdentity: () => identity_default5,
  geoInterpolate: () => interpolate_default2,
  geoLength: () => length_default,
  geoMercator: () => mercator_default,
  geoMercatorRaw: () => mercatorRaw,
  geoNaturalEarth1: () => naturalEarth1_default,
  geoNaturalEarth1Raw: () => naturalEarth1Raw,
  geoOrthographic: () => orthographic_default,
  geoOrthographicRaw: () => orthographicRaw,
  geoPath: () => path_default2,
  geoProjection: () => projection,
  geoProjectionMutator: () => projectionMutator,
  geoRotation: () => rotation_default,
  geoStereographic: () => stereographic_default,
  geoStereographicRaw: () => stereographicRaw,
  geoStream: () => stream_default,
  geoTransform: () => transform_default,
  geoTransverseMercator: () => transverseMercator_default,
  geoTransverseMercatorRaw: () => transverseMercatorRaw,
  gray: () => gray,
  hcl: () => hcl,
  hierarchy: () => hierarchy,
  histogram: () => histogram_default,
  hsl: () => hsl,
  html: () => html,
  image: () => image_default,
  interpolate: () => value_default,
  interpolateArray: () => array_default,
  interpolateBasis: () => basis_default,
  interpolateBasisClosed: () => basisClosed_default,
  interpolateBlues: () => Blues_default,
  interpolateBrBG: () => BrBG_default,
  interpolateBuGn: () => BuGn_default,
  interpolateBuPu: () => BuPu_default,
  interpolateCividis: () => cividis_default,
  interpolateCool: () => cool,
  interpolateCubehelix: () => cubehelix_default,
  interpolateCubehelixDefault: () => cubehelix_default2,
  interpolateCubehelixLong: () => cubehelixLong,
  interpolateDate: () => date_default,
  interpolateDiscrete: () => discrete_default,
  interpolateGnBu: () => GnBu_default,
  interpolateGreens: () => Greens_default,
  interpolateGreys: () => Greys_default,
  interpolateHcl: () => hcl_default,
  interpolateHclLong: () => hclLong,
  interpolateHsl: () => hsl_default,
  interpolateHslLong: () => hslLong,
  interpolateHue: () => hue_default,
  interpolateInferno: () => inferno,
  interpolateLab: () => lab2,
  interpolateMagma: () => magma,
  interpolateNumber: () => number_default2,
  interpolateNumberArray: () => numberArray_default,
  interpolateObject: () => object_default,
  interpolateOrRd: () => OrRd_default,
  interpolateOranges: () => Oranges_default,
  interpolatePRGn: () => PRGn_default,
  interpolatePiYG: () => PiYG_default,
  interpolatePlasma: () => plasma,
  interpolatePuBu: () => PuBu_default,
  interpolatePuBuGn: () => PuBuGn_default,
  interpolatePuOr: () => PuOr_default,
  interpolatePuRd: () => PuRd_default,
  interpolatePurples: () => Purples_default,
  interpolateRainbow: () => rainbow_default,
  interpolateRdBu: () => RdBu_default,
  interpolateRdGy: () => RdGy_default,
  interpolateRdPu: () => RdPu_default,
  interpolateRdYlBu: () => RdYlBu_default,
  interpolateRdYlGn: () => RdYlGn_default,
  interpolateReds: () => Reds_default,
  interpolateRgb: () => rgb_default,
  interpolateRgbBasis: () => rgbBasis,
  interpolateRgbBasisClosed: () => rgbBasisClosed,
  interpolateRound: () => round_default,
  interpolateSinebow: () => sinebow_default,
  interpolateSpectral: () => Spectral_default,
  interpolateString: () => string_default,
  interpolateTransformCss: () => interpolateTransformCss,
  interpolateTransformSvg: () => interpolateTransformSvg,
  interpolateTurbo: () => turbo_default,
  interpolateViridis: () => viridis_default,
  interpolateWarm: () => warm,
  interpolateYlGn: () => YlGn_default,
  interpolateYlGnBu: () => YlGnBu_default,
  interpolateYlOrBr: () => YlOrBr_default,
  interpolateYlOrRd: () => YlOrRd_default,
  interpolateZoom: () => zoom_default,
  interrupt: () => interrupt_default,
  interval: () => interval_default,
  isoFormat: () => isoFormat_default,
  isoParse: () => isoParse_default,
  json: () => json_default,
  keys: () => keys_default,
  lab: () => lab,
  lch: () => lch,
  line: () => line_default2,
  lineRadial: () => lineRadial_default,
  linkHorizontal: () => linkHorizontal,
  linkRadial: () => linkRadial,
  linkVertical: () => linkVertical,
  local: () => local,
  map: () => map_default,
  matcher: () => matcher_default,
  max: () => max_default,
  mean: () => mean_default,
  median: () => median_default,
  merge: () => merge_default,
  min: () => min_default,
  mouse: () => mouse_default,
  namespace: () => namespace_default,
  namespaces: () => namespaces_default,
  nest: () => nest_default,
  now: () => now,
  pack: () => pack_default,
  packEnclose: () => enclose_default,
  packSiblings: () => siblings_default,
  pairs: () => pairs_default,
  partition: () => partition_default,
  path: () => path_default,
  permute: () => permute_default,
  pie: () => pie_default,
  piecewise: () => piecewise,
  pointRadial: () => pointRadial_default,
  polygonArea: () => area_default4,
  polygonCentroid: () => centroid_default3,
  polygonContains: () => contains_default3,
  polygonHull: () => hull_default,
  polygonLength: () => length_default2,
  precisionFixed: () => precisionFixed_default,
  precisionPrefix: () => precisionPrefix_default,
  precisionRound: () => precisionRound_default,
  quadtree: () => quadtree,
  quantile: () => quantile_default,
  quantize: () => quantize_default,
  radialArea: () => areaRadial_default,
  radialLine: () => lineRadial_default,
  randomBates: () => bates_default,
  randomExponential: () => exponential_default,
  randomIrwinHall: () => irwinHall_default,
  randomLogNormal: () => logNormal_default,
  randomNormal: () => normal_default,
  randomUniform: () => uniform_default,
  range: () => range_default,
  rgb: () => rgb,
  ribbon: () => ribbon_default,
  scaleBand: () => band,
  scaleDiverging: () => diverging,
  scaleDivergingLog: () => divergingLog,
  scaleDivergingPow: () => divergingPow,
  scaleDivergingSqrt: () => divergingSqrt,
  scaleDivergingSymlog: () => divergingSymlog,
  scaleIdentity: () => identity3,
  scaleImplicit: () => implicit,
  scaleLinear: () => linear3,
  scaleLog: () => log2,
  scaleOrdinal: () => ordinal,
  scalePoint: () => point,
  scalePow: () => pow2,
  scaleQuantile: () => quantile,
  scaleQuantize: () => quantize,
  scaleSequential: () => sequential,
  scaleSequentialLog: () => sequentialLog,
  scaleSequentialPow: () => sequentialPow,
  scaleSequentialQuantile: () => sequentialQuantile,
  scaleSequentialSqrt: () => sequentialSqrt,
  scaleSequentialSymlog: () => sequentialSymlog,
  scaleSqrt: () => sqrt2,
  scaleSymlog: () => symlog,
  scaleThreshold: () => threshold,
  scaleTime: () => time_default,
  scaleUtc: () => utcTime_default,
  scan: () => scan_default,
  schemeAccent: () => Accent_default,
  schemeBlues: () => scheme22,
  schemeBrBG: () => scheme,
  schemeBuGn: () => scheme10,
  schemeBuPu: () => scheme11,
  schemeCategory10: () => category10_default,
  schemeDark2: () => Dark2_default,
  schemeGnBu: () => scheme12,
  schemeGreens: () => scheme23,
  schemeGreys: () => scheme24,
  schemeOrRd: () => scheme13,
  schemeOranges: () => scheme27,
  schemePRGn: () => scheme2,
  schemePaired: () => Paired_default,
  schemePastel1: () => Pastel1_default,
  schemePastel2: () => Pastel2_default,
  schemePiYG: () => scheme3,
  schemePuBu: () => scheme15,
  schemePuBuGn: () => scheme14,
  schemePuOr: () => scheme4,
  schemePuRd: () => scheme16,
  schemePurples: () => scheme25,
  schemeRdBu: () => scheme5,
  schemeRdGy: () => scheme6,
  schemeRdPu: () => scheme17,
  schemeRdYlBu: () => scheme7,
  schemeRdYlGn: () => scheme8,
  schemeReds: () => scheme26,
  schemeSet1: () => Set1_default,
  schemeSet2: () => Set2_default,
  schemeSet3: () => Set3_default,
  schemeSpectral: () => scheme9,
  schemeTableau10: () => Tableau10_default,
  schemeYlGn: () => scheme19,
  schemeYlGnBu: () => scheme18,
  schemeYlOrBr: () => scheme20,
  schemeYlOrRd: () => scheme21,
  select: () => select_default2,
  selectAll: () => selectAll_default2,
  selection: () => selection_default,
  selector: () => selector_default,
  selectorAll: () => selectorAll_default,
  set: () => set_default,
  shuffle: () => shuffle_default,
  stack: () => stack_default,
  stackOffsetDiverging: () => diverging_default,
  stackOffsetExpand: () => expand_default,
  stackOffsetNone: () => none_default,
  stackOffsetSilhouette: () => silhouette_default,
  stackOffsetWiggle: () => wiggle_default,
  stackOrderAppearance: () => appearance_default,
  stackOrderAscending: () => ascending_default3,
  stackOrderDescending: () => descending_default3,
  stackOrderInsideOut: () => insideOut_default,
  stackOrderNone: () => none_default2,
  stackOrderReverse: () => reverse_default,
  stratify: () => stratify_default,
  style: () => styleValue,
  sum: () => sum_default,
  svg: () => svg,
  symbol: () => symbol_default,
  symbolCircle: () => circle_default3,
  symbolCross: () => cross_default3,
  symbolDiamond: () => diamond_default,
  symbolSquare: () => square_default,
  symbolStar: () => star_default,
  symbolTriangle: () => triangle_default,
  symbolWye: () => wye_default,
  symbols: () => symbols,
  text: () => text_default3,
  thresholdFreedmanDiaconis: () => freedmanDiaconis_default,
  thresholdScott: () => scott_default,
  thresholdSturges: () => sturges_default,
  tickFormat: () => tickFormat_default,
  tickIncrement: () => tickIncrement,
  tickStep: () => tickStep,
  ticks: () => ticks_default,
  timeDay: () => day_default,
  timeDays: () => days,
  timeFormat: () => timeFormat,
  timeFormatDefaultLocale: () => defaultLocale2,
  timeFormatLocale: () => formatLocale,
  timeFriday: () => friday,
  timeFridays: () => fridays,
  timeHour: () => hour_default,
  timeHours: () => hours,
  timeInterval: () => newInterval,
  timeMillisecond: () => millisecond_default,
  timeMilliseconds: () => milliseconds,
  timeMinute: () => minute_default,
  timeMinutes: () => minutes,
  timeMonday: () => monday,
  timeMondays: () => mondays,
  timeMonth: () => month_default,
  timeMonths: () => months,
  timeParse: () => timeParse,
  timeSaturday: () => saturday,
  timeSaturdays: () => saturdays,
  timeSecond: () => second_default,
  timeSeconds: () => seconds,
  timeSunday: () => sunday,
  timeSundays: () => sundays,
  timeThursday: () => thursday,
  timeThursdays: () => thursdays,
  timeTuesday: () => tuesday,
  timeTuesdays: () => tuesdays,
  timeWednesday: () => wednesday,
  timeWednesdays: () => wednesdays,
  timeWeek: () => sunday,
  timeWeeks: () => sundays,
  timeYear: () => year_default,
  timeYears: () => years,
  timeout: () => timeout_default,
  timer: () => timer,
  timerFlush: () => timerFlush,
  touch: () => touch_default,
  touches: () => touches_default,
  transition: () => transition,
  transpose: () => transpose_default,
  tree: () => tree_default,
  treemap: () => treemap_default,
  treemapBinary: () => binary_default,
  treemapDice: () => dice_default,
  treemapResquarify: () => resquarify_default,
  treemapSlice: () => slice_default,
  treemapSliceDice: () => sliceDice_default,
  treemapSquarify: () => squarify_default,
  tsv: () => tsv2,
  tsvFormat: () => tsvFormat,
  tsvFormatBody: () => tsvFormatBody,
  tsvFormatRow: () => tsvFormatRow,
  tsvFormatRows: () => tsvFormatRows,
  tsvFormatValue: () => tsvFormatValue,
  tsvParse: () => tsvParse,
  tsvParseRows: () => tsvParseRows,
  utcDay: () => utcDay_default,
  utcDays: () => utcDays,
  utcFormat: () => utcFormat,
  utcFriday: () => utcFriday,
  utcFridays: () => utcFridays,
  utcHour: () => utcHour_default,
  utcHours: () => utcHours,
  utcMillisecond: () => millisecond_default,
  utcMilliseconds: () => milliseconds,
  utcMinute: () => utcMinute_default,
  utcMinutes: () => utcMinutes,
  utcMonday: () => utcMonday,
  utcMondays: () => utcMondays,
  utcMonth: () => utcMonth_default,
  utcMonths: () => utcMonths,
  utcParse: () => utcParse,
  utcSaturday: () => utcSaturday,
  utcSaturdays: () => utcSaturdays,
  utcSecond: () => second_default,
  utcSeconds: () => seconds,
  utcSunday: () => utcSunday,
  utcSundays: () => utcSundays,
  utcThursday: () => utcThursday,
  utcThursdays: () => utcThursdays,
  utcTuesday: () => utcTuesday,
  utcTuesdays: () => utcTuesdays,
  utcWednesday: () => utcWednesday,
  utcWednesdays: () => utcWednesdays,
  utcWeek: () => utcSunday,
  utcWeeks: () => utcSundays,
  utcYear: () => utcYear_default,
  utcYears: () => utcYears,
  values: () => values_default,
  variance: () => variance_default,
  version: () => version,
  voronoi: () => voronoi_default,
  window: () => window_default,
  xml: () => xml_default,
  zip: () => zip_default,
  zoom: () => zoom_default2,
  zoomIdentity: () => identity4,
  zoomTransform: () => transform
});
var init_d3 = __esm({
  "node_modules/c3/node_modules/d3/index.js"() {
    init_package();
    init_src();
    init_src2();
    init_src11();
    init_src13();
    init_src14();
    init_src6();
    init_src15();
    init_src3();
    init_src5();
    init_src16();
    init_src9();
    init_src17();
    init_src19();
    init_src20();
    init_src21();
    init_src22();
    init_src7();
    init_src12();
    init_src23();
    init_src18();
    init_src24();
    init_src27();
    init_src28();
    init_src4();
    init_src29();
    init_src25();
    init_src26();
    init_src8();
    init_src10();
    init_src30();
    init_src31();
  }
});

// node_modules/c3/c3.js
var require_c3 = __commonJS({
  "node_modules/c3/c3.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = global || self, global.c3 = factory());
    })(exports, function() {
      "use strict";
      function ChartInternal(api) {
        var $$ = this;
        $$.d3 = window.d3 ? window.d3 : typeof __require !== "undefined" ? (init_d3(), __toCommonJS(d3_exports)) : void 0;
        $$.api = api;
        $$.config = $$.getDefaultConfig();
        $$.data = {};
        $$.cache = {};
        $$.axes = {};
      }
      function Chart(config) {
        this.internal = new ChartInternal(this);
        this.internal.loadConfig(config);
        this.internal.beforeInit(config);
        this.internal.init();
        this.internal.afterInit(config);
        (function bindThis(fn, target, argThis) {
          Object.keys(fn).forEach(function(key) {
            target[key] = fn[key].bind(argThis);
            if (Object.keys(fn[key]).length > 0) {
              bindThis(fn[key], target[key], argThis);
            }
          });
        })(Chart.prototype, this, this);
      }
      var asHalfPixel = function(n) {
        return Math.ceil(n) + 0.5;
      };
      var ceil10 = function(v) {
        return Math.ceil(v / 10) * 10;
      };
      var diffDomain = function(d) {
        return d[1] - d[0];
      };
      var getOption = function(options, key, defaultValue) {
        return isDefined(options[key]) ? options[key] : defaultValue;
      };
      var getPathBox = function(path2) {
        var box = getBBox(path2), items = [path2.pathSegList.getItem(0), path2.pathSegList.getItem(1)], minX = items[0].x, minY = Math.min(items[0].y, items[1].y);
        return { x: minX, y: minY, width: box.width, height: box.height };
      };
      var getBBox = function(element) {
        try {
          return element.getBBox();
        } catch (ignore) {
          return { x: 0, y: 0, width: 0, height: 0 };
        }
      };
      var hasValue = function(dict, value) {
        var found = false;
        Object.keys(dict).forEach(function(key) {
          if (dict[key] === value) {
            found = true;
          }
        });
        return found;
      };
      var isArray = function(o) {
        return Array.isArray(o);
      };
      var isDefined = function(v) {
        return typeof v !== "undefined";
      };
      var isEmpty = function(o) {
        return typeof o === "undefined" || o === null || isString(o) && o.length === 0 || typeof o === "object" && Object.keys(o).length === 0;
      };
      var isFunction = function(o) {
        return typeof o === "function";
      };
      var isNumber = function(o) {
        return typeof o === "number";
      };
      var isString = function(o) {
        return typeof o === "string";
      };
      var isUndefined = function(v) {
        return typeof v === "undefined";
      };
      var isValue = function(v) {
        return v || v === 0;
      };
      var notEmpty = function(o) {
        return !isEmpty(o);
      };
      var sanitise = function(str) {
        return typeof str === "string" ? str.replace(/</g, "&lt;").replace(/>/g, "&gt;") : str;
      };
      var flattenArray = function(arr) {
        return Array.isArray(arr) ? [].concat.apply([], arr) : [];
      };
      var isWithinBox = function(point6, box, sensitivity) {
        if (sensitivity === void 0) {
          sensitivity = 0;
        }
        var xStart = box.x - sensitivity;
        var xEnd = box.x + box.width + sensitivity;
        var yStart = box.y + box.height + sensitivity;
        var yEnd = box.y - sensitivity;
        return xStart < point6[0] && point6[0] < xEnd && yEnd < point6[1] && point6[1] < yStart;
      };
      var getIEVersion = function(agent) {
        if (typeof agent === "undefined") {
          agent = window.navigator.userAgent;
        }
        var pos = agent.indexOf("MSIE ");
        if (pos > 0) {
          return parseInt(agent.substring(pos + 5, agent.indexOf(".", pos)), 10);
        }
        pos = agent.indexOf("Trident/");
        if (pos > 0) {
          pos = agent.indexOf("rv:");
          return parseInt(agent.substring(pos + 3, agent.indexOf(".", pos)), 10);
        }
        return false;
      };
      var isIE = function(version2) {
        var ver = getIEVersion();
        if (typeof version2 === "undefined") {
          return !!ver;
        }
        return version2 === ver;
      };
      function AxisInternal(component, params) {
        var internal = this;
        internal.component = component;
        internal.params = params || {};
        internal.d3 = component.d3;
        internal.scale = internal.d3.scaleLinear();
        internal.range;
        internal.orient = "bottom";
        internal.innerTickSize = 6;
        internal.outerTickSize = this.params.withOuterTick ? 6 : 0;
        internal.tickPadding = 3;
        internal.tickValues = null;
        internal.tickFormat;
        internal.tickArguments;
        internal.tickOffset = 0;
        internal.tickCulling = true;
        internal.tickCentered;
        internal.tickTextCharSize;
        internal.tickTextRotate = internal.params.tickTextRotate;
        internal.tickLength;
        internal.axis = internal.generateAxis();
      }
      AxisInternal.prototype.axisX = function(selection2, x5, tickOffset) {
        selection2.attr("transform", function(d) {
          return "translate(" + Math.ceil(x5(d) + tickOffset) + ", 0)";
        });
      };
      AxisInternal.prototype.axisY = function(selection2, y5) {
        selection2.attr("transform", function(d) {
          return "translate(0," + Math.ceil(y5(d)) + ")";
        });
      };
      AxisInternal.prototype.scaleExtent = function(domain) {
        var start2 = domain[0], stop = domain[domain.length - 1];
        return start2 < stop ? [start2, stop] : [stop, start2];
      };
      AxisInternal.prototype.generateTicks = function(scale) {
        var internal = this;
        var i, domain, ticks = [];
        if (scale.ticks) {
          return scale.ticks.apply(scale, internal.tickArguments);
        }
        domain = scale.domain();
        for (i = Math.ceil(domain[0]); i < domain[1]; i++) {
          ticks.push(i);
        }
        if (ticks.length > 0 && ticks[0] > 0) {
          ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));
        }
        return ticks;
      };
      AxisInternal.prototype.copyScale = function() {
        var internal = this;
        var newScale = internal.scale.copy(), domain;
        if (internal.params.isCategory) {
          domain = internal.scale.domain();
          newScale.domain([domain[0], domain[1] - 1]);
        }
        return newScale;
      };
      AxisInternal.prototype.textFormatted = function(v) {
        var internal = this, formatted = internal.tickFormat ? internal.tickFormat(v) : v;
        return typeof formatted !== "undefined" ? formatted : "";
      };
      AxisInternal.prototype.updateRange = function() {
        var internal = this;
        internal.range = internal.scale.rangeExtent ? internal.scale.rangeExtent() : internal.scaleExtent(internal.scale.range());
        return internal.range;
      };
      AxisInternal.prototype.updateTickTextCharSize = function(tick) {
        var internal = this;
        if (internal.tickTextCharSize) {
          return internal.tickTextCharSize;
        }
        var size = {
          h: 11.5,
          w: 5.5
        };
        tick.select("text").text(function(d) {
          return internal.textFormatted(d);
        }).each(function(d) {
          var box = getBBox(this), text = internal.textFormatted(d), h = box.height, w = text ? box.width / text.length : void 0;
          if (h && w) {
            size.h = h;
            size.w = w;
          }
        }).text("");
        internal.tickTextCharSize = size;
        return size;
      };
      AxisInternal.prototype.isVertical = function() {
        return this.orient === "left" || this.orient === "right";
      };
      AxisInternal.prototype.tspanData = function(d, i, scale) {
        var internal = this;
        var splitted = internal.params.tickMultiline ? internal.splitTickText(d, scale) : [].concat(internal.textFormatted(d));
        if (internal.params.tickMultiline && internal.params.tickMultilineMax > 0) {
          splitted = internal.ellipsify(splitted, internal.params.tickMultilineMax);
        }
        return splitted.map(function(s2) {
          return { index: i, splitted: s2, length: splitted.length };
        });
      };
      AxisInternal.prototype.splitTickText = function(d, scale) {
        var internal = this, tickText = internal.textFormatted(d), maxWidth = internal.params.tickWidth, subtext, spaceIndex, textWidth, splitted = [];
        if (Object.prototype.toString.call(tickText) === "[object Array]") {
          return tickText;
        }
        if (!maxWidth || maxWidth <= 0) {
          maxWidth = internal.isVertical() ? 95 : internal.params.isCategory ? Math.ceil(scale(1) - scale(0)) - 12 : 110;
        }
        function split(splitted2, text) {
          spaceIndex = void 0;
          for (var i = 1; i < text.length; i++) {
            if (text.charAt(i) === " ") {
              spaceIndex = i;
            }
            subtext = text.substr(0, i + 1);
            textWidth = internal.tickTextCharSize.w * subtext.length;
            if (maxWidth < textWidth) {
              return split(splitted2.concat(text.substr(0, spaceIndex ? spaceIndex : i)), text.slice(spaceIndex ? spaceIndex + 1 : i));
            }
          }
          return splitted2.concat(text);
        }
        return split(splitted, tickText + "");
      };
      AxisInternal.prototype.ellipsify = function(splitted, max3) {
        if (splitted.length <= max3) {
          return splitted;
        }
        var ellipsified = splitted.slice(0, max3);
        var remaining = 3;
        for (var i = max3 - 1; i >= 0; i--) {
          var available = ellipsified[i].length;
          ellipsified[i] = ellipsified[i].substr(0, available - remaining).padEnd(available, ".");
          remaining -= available;
          if (remaining <= 0) {
            break;
          }
        }
        return ellipsified;
      };
      AxisInternal.prototype.updateTickLength = function() {
        var internal = this;
        internal.tickLength = Math.max(internal.innerTickSize, 0) + internal.tickPadding;
      };
      AxisInternal.prototype.lineY2 = function(d) {
        var internal = this, tickPosition = internal.scale(d) + (internal.tickCentered ? 0 : internal.tickOffset);
        return internal.range[0] < tickPosition && tickPosition < internal.range[1] ? internal.innerTickSize : 0;
      };
      AxisInternal.prototype.textY = function() {
        var internal = this, rotate = internal.tickTextRotate;
        return rotate ? 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1) : internal.tickLength;
      };
      AxisInternal.prototype.textTransform = function() {
        var internal = this, rotate = internal.tickTextRotate;
        return rotate ? "rotate(" + rotate + ")" : "";
      };
      AxisInternal.prototype.textTextAnchor = function() {
        var internal = this, rotate = internal.tickTextRotate;
        return rotate ? rotate > 0 ? "start" : "end" : "middle";
      };
      AxisInternal.prototype.tspanDx = function() {
        var internal = this, rotate = internal.tickTextRotate;
        return rotate ? 8 * Math.sin(Math.PI * (rotate / 180)) : 0;
      };
      AxisInternal.prototype.tspanDy = function(d, i) {
        var internal = this, dy = internal.tickTextCharSize.h;
        if (i === 0) {
          if (internal.isVertical()) {
            dy = -((d.length - 1) * (internal.tickTextCharSize.h / 2) - 3);
          } else {
            dy = ".71em";
          }
        }
        return dy;
      };
      AxisInternal.prototype.generateAxis = function() {
        var internal = this, d3 = internal.d3, params = internal.params;
        function axis2(g, transition2) {
          var self2;
          g.each(function() {
            var g2 = axis2.g = d3.select(this);
            var scale0 = this.__chart__ || internal.scale, scale1 = this.__chart__ = internal.copyScale();
            var ticksValues = internal.tickValues ? internal.tickValues : internal.generateTicks(scale1), ticks = g2.selectAll(".tick").data(ticksValues, scale1), tickEnter = ticks.enter().insert("g", ".domain").attr("class", "tick").style("opacity", 1e-6), tickExit = ticks.exit().remove(), tickUpdate = ticks.merge(tickEnter), tickTransform, tickX, tickY;
            if (params.isCategory) {
              internal.tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);
              tickX = internal.tickCentered ? 0 : internal.tickOffset;
              tickY = internal.tickCentered ? internal.tickOffset : 0;
            } else {
              internal.tickOffset = tickX = 0;
            }
            internal.updateRange();
            internal.updateTickLength();
            internal.updateTickTextCharSize(g2.select(".tick"));
            var lineUpdate = tickUpdate.select("line").merge(tickEnter.append("line")), textUpdate = tickUpdate.select("text").merge(tickEnter.append("text"));
            var tspans = tickUpdate.selectAll("text").selectAll("tspan").data(function(d, i) {
              return internal.tspanData(d, i, scale1);
            }), tspanEnter = tspans.enter().append("tspan"), tspanUpdate = tspanEnter.merge(tspans).text(function(d) {
              return d.splitted;
            });
            tspans.exit().remove();
            var path2 = g2.selectAll(".domain").data([0]), pathUpdate = path2.enter().append("path").merge(path2).attr("class", "domain");
            switch (internal.orient) {
              case "bottom": {
                tickTransform = internal.axisX;
                lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", function(d, i) {
                  return internal.lineY2(d, i);
                });
                textUpdate.attr("x", 0).attr("y", function(d, i) {
                  return internal.textY(d, i);
                }).attr("transform", function(d, i) {
                  return internal.textTransform(d, i);
                }).style("text-anchor", function(d, i) {
                  return internal.textTextAnchor(d, i);
                });
                tspanUpdate.attr("x", 0).attr("dy", function(d, i) {
                  return internal.tspanDy(d, i);
                }).attr("dx", function(d, i) {
                  return internal.tspanDx(d, i);
                });
                pathUpdate.attr("d", "M" + internal.range[0] + "," + internal.outerTickSize + "V0H" + internal.range[1] + "V" + internal.outerTickSize);
                break;
              }
              case "top": {
                tickTransform = internal.axisX;
                lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", function(d, i) {
                  return -1 * internal.lineY2(d, i);
                });
                textUpdate.attr("x", 0).attr("y", function(d, i) {
                  return -1 * internal.textY(d, i) - (params.isCategory ? 2 : internal.tickLength - 2);
                }).attr("transform", function(d, i) {
                  return internal.textTransform(d, i);
                }).style("text-anchor", function(d, i) {
                  return internal.textTextAnchor(d, i);
                });
                tspanUpdate.attr("x", 0).attr("dy", function(d, i) {
                  return internal.tspanDy(d, i);
                }).attr("dx", function(d, i) {
                  return internal.tspanDx(d, i);
                });
                pathUpdate.attr("d", "M" + internal.range[0] + "," + -internal.outerTickSize + "V0H" + internal.range[1] + "V" + -internal.outerTickSize);
                break;
              }
              case "left": {
                tickTransform = internal.axisY;
                lineUpdate.attr("x2", -internal.innerTickSize).attr("y1", tickY).attr("y2", tickY);
                textUpdate.attr("x", -internal.tickLength).attr("y", internal.tickOffset).style("text-anchor", "end");
                tspanUpdate.attr("x", -internal.tickLength).attr("dy", function(d, i) {
                  return internal.tspanDy(d, i);
                });
                pathUpdate.attr("d", "M" + -internal.outerTickSize + "," + internal.range[0] + "H0V" + internal.range[1] + "H" + -internal.outerTickSize);
                break;
              }
              case "right": {
                tickTransform = internal.axisY;
                lineUpdate.attr("x2", internal.innerTickSize).attr("y1", tickY).attr("y2", tickY);
                textUpdate.attr("x", internal.tickLength).attr("y", internal.tickOffset).style("text-anchor", "start");
                tspanUpdate.attr("x", internal.tickLength).attr("dy", function(d, i) {
                  return internal.tspanDy(d, i);
                });
                pathUpdate.attr("d", "M" + internal.outerTickSize + "," + internal.range[0] + "H0V" + internal.range[1] + "H" + internal.outerTickSize);
                break;
              }
            }
            if (scale1.rangeBand) {
              var x5 = scale1, dx = x5.rangeBand() / 2;
              scale0 = scale1 = function(d) {
                return x5(d) + dx;
              };
            } else if (scale0.rangeBand) {
              scale0 = scale1;
            } else {
              tickExit.call(tickTransform, scale1, internal.tickOffset);
            }
            tickEnter.call(tickTransform, scale0, internal.tickOffset);
            self2 = (transition2 ? tickUpdate.transition(transition2) : tickUpdate).style("opacity", 1).call(tickTransform, scale1, internal.tickOffset);
          });
          return self2;
        }
        axis2.scale = function(x5) {
          if (!arguments.length) {
            return internal.scale;
          }
          internal.scale = x5;
          return axis2;
        };
        axis2.orient = function(x5) {
          if (!arguments.length) {
            return internal.orient;
          }
          internal.orient = x5 in { top: 1, right: 1, bottom: 1, left: 1 } ? x5 + "" : "bottom";
          return axis2;
        };
        axis2.tickFormat = function(format2) {
          if (!arguments.length) {
            return internal.tickFormat;
          }
          internal.tickFormat = format2;
          return axis2;
        };
        axis2.tickCentered = function(isCentered) {
          if (!arguments.length) {
            return internal.tickCentered;
          }
          internal.tickCentered = isCentered;
          return axis2;
        };
        axis2.tickOffset = function() {
          return internal.tickOffset;
        };
        axis2.tickInterval = function() {
          var interval2, length2;
          if (params.isCategory) {
            interval2 = internal.tickOffset * 2;
          } else {
            length2 = axis2.g.select("path.domain").node().getTotalLength() - internal.outerTickSize * 2;
            interval2 = length2 / axis2.g.selectAll("line").size();
          }
          return interval2 === Infinity ? 0 : interval2;
        };
        axis2.ticks = function() {
          if (!arguments.length) {
            return internal.tickArguments;
          }
          internal.tickArguments = arguments;
          return axis2;
        };
        axis2.tickCulling = function(culling) {
          if (!arguments.length) {
            return internal.tickCulling;
          }
          internal.tickCulling = culling;
          return axis2;
        };
        axis2.tickValues = function(x5) {
          if (typeof x5 === "function") {
            internal.tickValues = function() {
              return x5(internal.scale.domain());
            };
          } else {
            if (!arguments.length) {
              return internal.tickValues;
            }
            internal.tickValues = x5;
          }
          return axis2;
        };
        return axis2;
      };
      var CLASS = {
        target: "c3-target",
        chart: "c3-chart",
        chartLine: "c3-chart-line",
        chartLines: "c3-chart-lines",
        chartBar: "c3-chart-bar",
        chartBars: "c3-chart-bars",
        chartText: "c3-chart-text",
        chartTexts: "c3-chart-texts",
        chartArc: "c3-chart-arc",
        chartArcs: "c3-chart-arcs",
        chartArcsTitle: "c3-chart-arcs-title",
        chartArcsBackground: "c3-chart-arcs-background",
        chartArcsGaugeUnit: "c3-chart-arcs-gauge-unit",
        chartArcsGaugeMax: "c3-chart-arcs-gauge-max",
        chartArcsGaugeMin: "c3-chart-arcs-gauge-min",
        selectedCircle: "c3-selected-circle",
        selectedCircles: "c3-selected-circles",
        eventRect: "c3-event-rect",
        eventRects: "c3-event-rects",
        eventRectsSingle: "c3-event-rects-single",
        eventRectsMultiple: "c3-event-rects-multiple",
        zoomRect: "c3-zoom-rect",
        brush: "c3-brush",
        dragZoom: "c3-drag-zoom",
        focused: "c3-focused",
        defocused: "c3-defocused",
        region: "c3-region",
        regions: "c3-regions",
        title: "c3-title",
        tooltipContainer: "c3-tooltip-container",
        tooltip: "c3-tooltip",
        tooltipName: "c3-tooltip-name",
        shape: "c3-shape",
        shapes: "c3-shapes",
        line: "c3-line",
        lines: "c3-lines",
        bar: "c3-bar",
        bars: "c3-bars",
        circle: "c3-circle",
        circles: "c3-circles",
        arc: "c3-arc",
        arcLabelLine: "c3-arc-label-line",
        arcs: "c3-arcs",
        area: "c3-area",
        areas: "c3-areas",
        empty: "c3-empty",
        text: "c3-text",
        texts: "c3-texts",
        gaugeValue: "c3-gauge-value",
        grid: "c3-grid",
        gridLines: "c3-grid-lines",
        xgrid: "c3-xgrid",
        xgrids: "c3-xgrids",
        xgridLine: "c3-xgrid-line",
        xgridLines: "c3-xgrid-lines",
        xgridFocus: "c3-xgrid-focus",
        ygrid: "c3-ygrid",
        ygrids: "c3-ygrids",
        ygridLine: "c3-ygrid-line",
        ygridLines: "c3-ygrid-lines",
        colorScale: "c3-colorscale",
        stanfordElements: "c3-stanford-elements",
        stanfordLine: "c3-stanford-line",
        stanfordLines: "c3-stanford-lines",
        stanfordRegion: "c3-stanford-region",
        stanfordRegions: "c3-stanford-regions",
        stanfordText: "c3-stanford-text",
        stanfordTexts: "c3-stanford-texts",
        axis: "c3-axis",
        axisX: "c3-axis-x",
        axisXLabel: "c3-axis-x-label",
        axisY: "c3-axis-y",
        axisYLabel: "c3-axis-y-label",
        axisY2: "c3-axis-y2",
        axisY2Label: "c3-axis-y2-label",
        legendBackground: "c3-legend-background",
        legendItem: "c3-legend-item",
        legendItemEvent: "c3-legend-item-event",
        legendItemTile: "c3-legend-item-tile",
        legendItemHidden: "c3-legend-item-hidden",
        legendItemFocused: "c3-legend-item-focused",
        dragarea: "c3-dragarea",
        EXPANDED: "_expanded_",
        SELECTED: "_selected_",
        INCLUDED: "_included_"
      };
      var AxisClass = (
        /** @class */
        /* @__PURE__ */ function() {
          function AxisClass2(owner) {
            this.owner = owner;
            this.d3 = owner.d3;
            this.internal = AxisInternal;
          }
          return AxisClass2;
        }()
      );
      var Axis = AxisClass;
      Axis.prototype.init = function init2() {
        var $$ = this.owner, config = $$.config, main = $$.main;
        $$.axes.x = main.append("g").attr("class", CLASS.axis + " " + CLASS.axisX).attr("clip-path", config.axis_x_inner ? "" : $$.clipPathForXAxis).attr("transform", $$.getTranslate("x")).style("visibility", config.axis_x_show ? "visible" : "hidden");
        $$.axes.x.append("text").attr("class", CLASS.axisXLabel).attr("transform", config.axis_rotated ? "rotate(-90)" : "").style("text-anchor", this.textAnchorForXAxisLabel.bind(this));
        $$.axes.y = main.append("g").attr("class", CLASS.axis + " " + CLASS.axisY).attr("clip-path", config.axis_y_inner ? "" : $$.clipPathForYAxis).attr("transform", $$.getTranslate("y")).style("visibility", config.axis_y_show ? "visible" : "hidden");
        $$.axes.y.append("text").attr("class", CLASS.axisYLabel).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForYAxisLabel.bind(this));
        $$.axes.y2 = main.append("g").attr("class", CLASS.axis + " " + CLASS.axisY2).attr("transform", $$.getTranslate("y2")).style("visibility", config.axis_y2_show ? "visible" : "hidden");
        $$.axes.y2.append("text").attr("class", CLASS.axisY2Label).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForY2AxisLabel.bind(this));
      };
      Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
        var $$ = this.owner, config = $$.config, axisParams = {
          isCategory: $$.isCategorized(),
          withOuterTick,
          tickMultiline: config.axis_x_tick_multiline,
          tickMultilineMax: config.axis_x_tick_multiline ? Number(config.axis_x_tick_multilineMax) : 0,
          tickWidth: config.axis_x_tick_width,
          tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,
          withoutTransition
        }, axis2 = new this.internal(this, axisParams).axis.scale(scale).orient(orient);
        if ($$.isTimeSeries() && tickValues && typeof tickValues !== "function") {
          tickValues = tickValues.map(function(v) {
            return $$.parseDate(v);
          });
        }
        axis2.tickFormat(tickFormat).tickValues(tickValues);
        if ($$.isCategorized()) {
          axis2.tickCentered(config.axis_x_tick_centered);
          if (isEmpty(config.axis_x_tick_culling)) {
            config.axis_x_tick_culling = false;
          }
        }
        return axis2;
      };
      Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis2) {
        var $$ = this.owner, config = $$.config, tickValues;
        if (config.axis_x_tick_fit || config.axis_x_tick_count) {
          tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());
        }
        if (axis2) {
          axis2.tickValues(tickValues);
        } else {
          $$.xAxis.tickValues(tickValues);
          $$.subXAxis.tickValues(tickValues);
        }
        return tickValues;
      };
      Axis.prototype.getYAxis = function getYAxis(axisId, scale, orient, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
        var $$ = this.owner;
        var config = $$.config;
        var tickFormat = config["axis_" + axisId + "_tick_format"];
        if (!tickFormat && $$.isAxisNormalized(axisId)) {
          tickFormat = function(x5) {
            return x5 + "%";
          };
        }
        var axis2 = new this.internal(this, {
          withOuterTick,
          withoutTransition,
          tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate
        }).axis.scale(scale).orient(orient);
        if (tickFormat) {
          axis2.tickFormat(tickFormat);
        }
        if ($$.isTimeSeriesY()) {
          axis2.ticks(config.axis_y_tick_time_type, config.axis_y_tick_time_interval);
        } else {
          axis2.tickValues(tickValues);
        }
        return axis2;
      };
      Axis.prototype.getId = function getId(id2) {
        var config = this.owner.config;
        return id2 in config.data_axes ? config.data_axes[id2] : "y";
      };
      Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {
        var $$ = this.owner, config = $$.config;
        var format2 = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function(v) {
          return v;
        };
        if (config.axis_x_tick_format) {
          if (isFunction(config.axis_x_tick_format)) {
            format2 = config.axis_x_tick_format;
          } else if ($$.isTimeSeries()) {
            format2 = function(date2) {
              return date2 ? $$.axisTimeFormat(config.axis_x_tick_format)(date2) : "";
            };
          }
        }
        return isFunction(format2) ? function(v) {
          return format2.call($$, v);
        } : format2;
      };
      Axis.prototype.getTickValues = function getTickValues(tickValues, axis2) {
        return tickValues ? tickValues : axis2 ? axis2.tickValues() : void 0;
      };
      Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {
        return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);
      };
      Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {
        return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);
      };
      Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {
        return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);
      };
      Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {
        var $$ = this.owner, config = $$.config, option;
        if (axisId === "y") {
          option = config.axis_y_label;
        } else if (axisId === "y2") {
          option = config.axis_y2_label;
        } else if (axisId === "x") {
          option = config.axis_x_label;
        }
        return option;
      };
      Axis.prototype.getLabelText = function getLabelText(axisId) {
        var option = this.getLabelOptionByAxisId(axisId);
        return isString(option) ? option : option ? option.text : null;
      };
      Axis.prototype.setLabelText = function setLabelText(axisId, text) {
        var $$ = this.owner, config = $$.config, option = this.getLabelOptionByAxisId(axisId);
        if (isString(option)) {
          if (axisId === "y") {
            config.axis_y_label = text;
          } else if (axisId === "y2") {
            config.axis_y2_label = text;
          } else if (axisId === "x") {
            config.axis_x_label = text;
          }
        } else if (option) {
          option.text = text;
        }
      };
      Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {
        var option = this.getLabelOptionByAxisId(axisId), position = option && typeof option === "object" && option.position ? option.position : defaultPosition;
        return {
          isInner: position.indexOf("inner") >= 0,
          isOuter: position.indexOf("outer") >= 0,
          isLeft: position.indexOf("left") >= 0,
          isCenter: position.indexOf("center") >= 0,
          isRight: position.indexOf("right") >= 0,
          isTop: position.indexOf("top") >= 0,
          isMiddle: position.indexOf("middle") >= 0,
          isBottom: position.indexOf("bottom") >= 0
        };
      };
      Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {
        return this.getLabelPosition("x", this.owner.config.axis_rotated ? "inner-top" : "inner-right");
      };
      Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {
        return this.getLabelPosition("y", this.owner.config.axis_rotated ? "inner-right" : "inner-top");
      };
      Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {
        return this.getLabelPosition("y2", this.owner.config.axis_rotated ? "inner-right" : "inner-top");
      };
      Axis.prototype.getLabelPositionById = function getLabelPositionById(id2) {
        return id2 === "y2" ? this.getY2AxisLabelPosition() : id2 === "y" ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();
      };
      Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {
        return this.getLabelText("x");
      };
      Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {
        return this.getLabelText("y");
      };
      Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {
        return this.getLabelText("y2");
      };
      Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {
        var $$ = this.owner;
        if (forHorizontal) {
          return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;
        } else {
          return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;
        }
      };
      Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {
        if (forHorizontal) {
          return position.isLeft ? "0.5em" : position.isRight ? "-0.5em" : "0";
        } else {
          return position.isTop ? "-0.5em" : position.isBottom ? "0.5em" : "0";
        }
      };
      Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {
        if (forHorizontal) {
          return position.isLeft ? "start" : position.isCenter ? "middle" : "end";
        } else {
          return position.isBottom ? "start" : position.isMiddle ? "middle" : "end";
        }
      };
      Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {
        return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
      };
      Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {
        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
      };
      Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {
        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
      };
      Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {
        return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
      };
      Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {
        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
      };
      Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {
        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
      };
      Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {
        var $$ = this.owner, config = $$.config, position = this.getXAxisLabelPosition();
        if (config.axis_rotated) {
          return position.isInner ? "1.2em" : -25 - ($$.config.axis_x_inner ? 0 : this.getMaxTickWidth("x"));
        } else {
          return position.isInner ? "-0.5em" : $$.getHorizontalAxisHeight("x") - 10;
        }
      };
      Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {
        var $$ = this.owner, position = this.getYAxisLabelPosition();
        if ($$.config.axis_rotated) {
          return position.isInner ? "-0.5em" : "3em";
        } else {
          return position.isInner ? "1.2em" : -10 - ($$.config.axis_y_inner ? 0 : this.getMaxTickWidth("y") + 10);
        }
      };
      Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {
        var $$ = this.owner, position = this.getY2AxisLabelPosition();
        if ($$.config.axis_rotated) {
          return position.isInner ? "1.2em" : "-2.2em";
        } else {
          return position.isInner ? "-0.5em" : 15 + ($$.config.axis_y2_inner ? 0 : this.getMaxTickWidth("y2") + 15);
        }
      };
      Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());
      };
      Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());
      };
      Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());
      };
      Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id2, withoutRecompute) {
        var $$ = this.owner, maxWidth = 0, targetsToShow, scale, axis2, dummy, svg2;
        if (withoutRecompute && $$.currentMaxTickWidths[id2]) {
          return $$.currentMaxTickWidths[id2];
        }
        if ($$.svg) {
          targetsToShow = $$.filterTargetsToShow($$.data.targets);
          if (id2 === "y") {
            scale = $$.y.copy().domain($$.getYDomain(targetsToShow, "y"));
            axis2 = this.getYAxis(id2, scale, $$.yOrient, $$.yAxisTickValues, false, true, true);
          } else if (id2 === "y2") {
            scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, "y2"));
            axis2 = this.getYAxis(id2, scale, $$.y2Orient, $$.y2AxisTickValues, false, true, true);
          } else {
            scale = $$.x.copy().domain($$.getXDomain(targetsToShow));
            axis2 = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);
            this.updateXAxisTickValues(targetsToShow, axis2);
          }
          dummy = $$.d3.select("body").append("div").classed("c3", true);
          svg2 = dummy.append("svg").style("visibility", "hidden").style("position", "fixed").style("top", 0).style("left", 0), svg2.append("g").call(axis2).each(function() {
            $$.d3.select(this).selectAll("text").each(function() {
              var box = getBBox(this);
              if (maxWidth < box.width) {
                maxWidth = box.width;
              }
            });
            dummy.remove();
          });
        }
        $$.currentMaxTickWidths[id2] = maxWidth <= 0 ? $$.currentMaxTickWidths[id2] : maxWidth;
        return $$.currentMaxTickWidths[id2];
      };
      Axis.prototype.updateLabels = function updateLabels(withTransition) {
        var $$ = this.owner;
        var axisXLabel = $$.main.select("." + CLASS.axisX + " ." + CLASS.axisXLabel), axisYLabel = $$.main.select("." + CLASS.axisY + " ." + CLASS.axisYLabel), axisY2Label = $$.main.select("." + CLASS.axisY2 + " ." + CLASS.axisY2Label);
        (withTransition ? axisXLabel.transition() : axisXLabel).attr("x", this.xForXAxisLabel.bind(this)).attr("dx", this.dxForXAxisLabel.bind(this)).attr("dy", this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this));
        (withTransition ? axisYLabel.transition() : axisYLabel).attr("x", this.xForYAxisLabel.bind(this)).attr("dx", this.dxForYAxisLabel.bind(this)).attr("dy", this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this));
        (withTransition ? axisY2Label.transition() : axisY2Label).attr("x", this.xForY2AxisLabel.bind(this)).attr("dx", this.dxForY2AxisLabel.bind(this)).attr("dy", this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this));
      };
      Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {
        var p = typeof padding === "number" ? padding : padding[key];
        if (!isValue(p)) {
          return defaultValue;
        }
        if (padding.unit === "ratio") {
          return padding[key] * domainLength;
        }
        return this.convertPixelsToAxisPadding(p, domainLength);
      };
      Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {
        var $$ = this.owner, length2 = $$.config.axis_rotated ? $$.width : $$.height;
        return domainLength * (pixels / length2);
      };
      Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {
        var tickValues = values, targetCount, start2, end, count2, interval2, i, tickValue;
        if (tickCount) {
          targetCount = isFunction(tickCount) ? tickCount() : tickCount;
          if (targetCount === 1) {
            tickValues = [values[0]];
          } else if (targetCount === 2) {
            tickValues = [values[0], values[values.length - 1]];
          } else if (targetCount > 2) {
            count2 = targetCount - 2;
            start2 = values[0];
            end = values[values.length - 1];
            interval2 = (end - start2) / (count2 + 1);
            tickValues = [start2];
            for (i = 0; i < count2; i++) {
              tickValue = +start2 + interval2 * (i + 1);
              tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);
            }
            tickValues.push(end);
          }
        }
        if (!forTimeSeries) {
          tickValues = tickValues.sort(function(a2, b) {
            return a2 - b;
          });
        }
        return tickValues;
      };
      Axis.prototype.generateTransitions = function generateTransitions(duration) {
        var $$ = this.owner, axes = $$.axes;
        return {
          axisX: duration ? axes.x.transition().duration(duration) : axes.x,
          axisY: duration ? axes.y.transition().duration(duration) : axes.y,
          axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,
          axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx
        };
      };
      Axis.prototype.redraw = function redraw(duration, isHidden) {
        var $$ = this.owner, transition2 = duration ? $$.d3.transition().duration(duration) : null;
        $$.axes.x.style("opacity", isHidden ? 0 : 1).call($$.xAxis, transition2);
        $$.axes.y.style("opacity", isHidden ? 0 : 1).call($$.yAxis, transition2);
        $$.axes.y2.style("opacity", isHidden ? 0 : 1).call($$.y2Axis, transition2);
        $$.axes.subx.style("opacity", isHidden ? 0 : 1).call($$.subXAxis, transition2);
      };
      var c32 = {
        version: "0.7.20",
        chart: {
          fn: Chart.prototype,
          internal: {
            fn: ChartInternal.prototype,
            axis: {
              fn: AxisClass.prototype,
              internal: {
                fn: AxisInternal.prototype
              }
            }
          }
        },
        generate: function(config) {
          return new Chart(config);
        }
      };
      ChartInternal.prototype.beforeInit = function() {
      };
      ChartInternal.prototype.afterInit = function() {
      };
      ChartInternal.prototype.init = function() {
        var $$ = this, config = $$.config;
        $$.initParams();
        if (config.data_url) {
          $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);
        } else if (config.data_json) {
          $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));
        } else if (config.data_rows) {
          $$.initWithData($$.convertRowsToData(config.data_rows));
        } else if (config.data_columns) {
          $$.initWithData($$.convertColumnsToData(config.data_columns));
        } else {
          throw Error("url or json or rows or columns is required.");
        }
      };
      ChartInternal.prototype.initParams = function() {
        var $$ = this, d3 = $$.d3, config = $$.config;
        $$.clipId = "c3-" + (/* @__PURE__ */ new Date()).valueOf() + "-clip";
        $$.clipIdForXAxis = $$.clipId + "-xaxis";
        $$.clipIdForYAxis = $$.clipId + "-yaxis";
        $$.clipIdForGrid = $$.clipId + "-grid";
        $$.clipIdForSubchart = $$.clipId + "-subchart";
        $$.clipPath = $$.getClipPath($$.clipId);
        $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis);
        $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);
        $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid);
        $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart);
        $$.dragStart = null;
        $$.dragging = false;
        $$.flowing = false;
        $$.cancelClick = false;
        $$.mouseover = void 0;
        $$.transiting = false;
        $$.color = $$.generateColor();
        $$.levelColor = $$.generateLevelColor();
        $$.dataTimeParse = (config.data_xLocaltime ? d3.timeParse : d3.utcParse)($$.config.data_xFormat);
        $$.axisTimeFormat = config.axis_x_localtime ? d3.timeFormat : d3.utcFormat;
        $$.defaultAxisTimeFormat = function(date2) {
          if (date2.getMilliseconds()) {
            return d3.timeFormat(".%L")(date2);
          }
          if (date2.getSeconds()) {
            return d3.timeFormat(":%S")(date2);
          }
          if (date2.getMinutes()) {
            return d3.timeFormat("%I:%M")(date2);
          }
          if (date2.getHours()) {
            return d3.timeFormat("%I %p")(date2);
          }
          if (date2.getDay() && date2.getDate() !== 1) {
            return d3.timeFormat("%-m/%-d")(date2);
          }
          if (date2.getDate() !== 1) {
            return d3.timeFormat("%-m/%-d")(date2);
          }
          if (date2.getMonth()) {
            return d3.timeFormat("%-m/%-d")(date2);
          }
          return d3.timeFormat("%Y/%-m/%-d")(date2);
        };
        $$.hiddenTargetIds = [];
        $$.hiddenLegendIds = [];
        $$.focusedTargetIds = [];
        $$.defocusedTargetIds = [];
        $$.xOrient = config.axis_rotated ? config.axis_x_inner ? "right" : "left" : config.axis_x_inner ? "top" : "bottom";
        $$.yOrient = config.axis_rotated ? config.axis_y_inner ? "top" : "bottom" : config.axis_y_inner ? "right" : "left";
        $$.y2Orient = config.axis_rotated ? config.axis_y2_inner ? "bottom" : "top" : config.axis_y2_inner ? "left" : "right";
        $$.subXOrient = config.axis_rotated ? "left" : "bottom";
        $$.isLegendRight = config.legend_position === "right";
        $$.isLegendInset = config.legend_position === "inset";
        $$.isLegendTop = config.legend_inset_anchor === "top-left" || config.legend_inset_anchor === "top-right";
        $$.isLegendLeft = config.legend_inset_anchor === "top-left" || config.legend_inset_anchor === "bottom-left";
        $$.legendStep = 0;
        $$.legendItemWidth = 0;
        $$.legendItemHeight = 0;
        $$.currentMaxTickWidths = {
          x: 0,
          y: 0,
          y2: 0
        };
        $$.rotated_padding_left = 30;
        $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;
        $$.rotated_padding_top = 5;
        $$.withoutFadeIn = {};
        $$.intervalForObserveInserted = void 0;
        $$.axes.subx = d3.selectAll([]);
      };
      ChartInternal.prototype.initChartElements = function() {
        if (this.initBar) {
          this.initBar();
        }
        if (this.initLine) {
          this.initLine();
        }
        if (this.initArc) {
          this.initArc();
        }
        if (this.initGauge) {
          this.initGauge();
        }
        if (this.initText) {
          this.initText();
        }
      };
      ChartInternal.prototype.initWithData = function(data) {
        var $$ = this, d3 = $$.d3, config = $$.config;
        var defs, main, binding = true;
        $$.axis = new AxisClass($$);
        if (!config.bindto) {
          $$.selectChart = d3.selectAll([]);
        } else if (typeof config.bindto.node === "function") {
          $$.selectChart = config.bindto;
        } else {
          $$.selectChart = d3.select(config.bindto);
        }
        if ($$.selectChart.empty()) {
          $$.selectChart = d3.select(document.createElement("div")).style("opacity", 0);
          $$.observeInserted($$.selectChart);
          binding = false;
        }
        $$.selectChart.html("").classed("c3", true);
        $$.data.xs = {};
        $$.data.targets = $$.convertDataToTargets(data);
        if (config.data_filter) {
          $$.data.targets = $$.data.targets.filter(config.data_filter);
        }
        if (config.data_hide) {
          $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);
        }
        if (config.legend_hide) {
          $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);
        }
        if ($$.isStanfordGraphType()) {
          $$.initStanfordData();
        }
        $$.updateSizes();
        $$.updateScales();
        $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));
        $$.y.domain($$.getYDomain($$.data.targets, "y"));
        $$.y2.domain($$.getYDomain($$.data.targets, "y2"));
        $$.subX.domain($$.x.domain());
        $$.subY.domain($$.y.domain());
        $$.subY2.domain($$.y2.domain());
        $$.orgXDomain = $$.x.domain();
        $$.svg = $$.selectChart.append("svg").style("overflow", "hidden").on("mouseenter", function() {
          return config.onmouseover.call($$);
        }).on("mouseleave", function() {
          return config.onmouseout.call($$);
        });
        if ($$.config.svg_classname) {
          $$.svg.attr("class", $$.config.svg_classname);
        }
        defs = $$.svg.append("defs");
        $$.clipChart = $$.appendClip(defs, $$.clipId);
        $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);
        $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);
        $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);
        $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);
        $$.updateSvgSize();
        main = $$.main = $$.svg.append("g").attr("transform", $$.getTranslate("main"));
        if ($$.initPie) {
          $$.initPie();
        }
        if ($$.initDragZoom) {
          $$.initDragZoom();
        }
        if (config.subchart_show && $$.initSubchart) {
          $$.initSubchart();
        }
        if ($$.initTooltip) {
          $$.initTooltip();
        }
        if ($$.initLegend) {
          $$.initLegend();
        }
        if ($$.initTitle) {
          $$.initTitle();
        }
        if ($$.initZoom) {
          $$.initZoom();
        }
        if ($$.isStanfordGraphType()) {
          $$.drawColorScale();
        }
        if (config.subchart_show && $$.initSubchartBrush) {
          $$.initSubchartBrush();
        }
        main.append("text").attr("class", CLASS.text + " " + CLASS.empty).attr("text-anchor", "middle").attr("dominant-baseline", "middle");
        $$.initRegion();
        $$.initGrid();
        main.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.chart);
        if (config.grid_lines_front) {
          $$.initGridLines();
        }
        $$.initStanfordElements();
        $$.initEventRect();
        $$.initChartElements();
        $$.axis.init();
        $$.updateTargets($$.data.targets);
        if (config.axis_x_selection) {
          $$.brush.selectionAsValue($$.getDefaultSelection());
        }
        if (binding) {
          $$.updateDimension();
          $$.config.oninit.call($$);
          $$.redraw({
            withTransition: false,
            withTransform: true,
            withUpdateXDomain: true,
            withUpdateOrgXDomain: true,
            withTransitionForAxis: false
          });
        }
        $$.bindResize();
        $$.bindWindowFocus();
        $$.api.element = $$.selectChart.node();
      };
      ChartInternal.prototype.smoothLines = function(el, type2) {
        var $$ = this;
        if (type2 === "grid") {
          el.each(function() {
            var g = $$.d3.select(this), x12 = g.attr("x1"), x22 = g.attr("x2"), y12 = g.attr("y1"), y22 = g.attr("y2");
            g.attr({
              x1: Math.ceil(x12),
              x2: Math.ceil(x22),
              y1: Math.ceil(y12),
              y2: Math.ceil(y22)
            });
          });
        }
      };
      ChartInternal.prototype.updateSizes = function() {
        var $$ = this, config = $$.config;
        var legendHeight = $$.legend ? $$.getLegendHeight() : 0, legendWidth = $$.legend ? $$.getLegendWidth() : 0, legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight, hasArc = $$.hasArcType(), xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight("x"), subchartXAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight("x", true), subchartHeight = config.subchart_show && !hasArc ? config.subchart_size_height + subchartXAxisHeight : 0;
        $$.currentWidth = $$.getCurrentWidth();
        $$.currentHeight = $$.getCurrentHeight();
        $$.margin = config.axis_rotated ? {
          top: $$.getHorizontalAxisHeight("y2") + $$.getCurrentPaddingTop(),
          right: hasArc ? 0 : $$.getCurrentPaddingRight(),
          bottom: $$.getHorizontalAxisHeight("y") + legendHeightForBottom + $$.getCurrentPaddingBottom(),
          left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())
        } : {
          top: 4 + $$.getCurrentPaddingTop(),
          right: hasArc ? 0 : $$.getCurrentPaddingRight(),
          bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),
          left: hasArc ? 0 : $$.getCurrentPaddingLeft()
        };
        $$.margin2 = config.axis_rotated ? {
          top: $$.margin.top,
          right: NaN,
          bottom: 20 + legendHeightForBottom,
          left: $$.rotated_padding_left
        } : {
          top: $$.currentHeight - subchartHeight - legendHeightForBottom,
          right: NaN,
          bottom: subchartXAxisHeight + legendHeightForBottom,
          left: $$.margin.left
        };
        $$.margin3 = {
          top: 0,
          right: NaN,
          bottom: 0,
          left: 0
        };
        if ($$.updateSizeForLegend) {
          $$.updateSizeForLegend(legendHeight, legendWidth);
        }
        $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;
        $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;
        if ($$.width < 0) {
          $$.width = 0;
        }
        if ($$.height < 0) {
          $$.height = 0;
        }
        $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;
        $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;
        if ($$.width2 < 0) {
          $$.width2 = 0;
        }
        if ($$.height2 < 0) {
          $$.height2 = 0;
        }
        $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);
        $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);
        if ($$.hasType("gauge") && !config.gauge_fullCircle) {
          $$.arcHeight += $$.height - $$.getGaugeLabelHeight();
        }
        if ($$.updateRadius) {
          $$.updateRadius();
        }
        if ($$.isLegendRight && hasArc) {
          $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;
        }
      };
      ChartInternal.prototype.updateTargets = function(targets) {
        var $$ = this, config = $$.config;
        $$.updateTargetsForText(targets);
        $$.updateTargetsForBar(targets);
        $$.updateTargetsForLine(targets);
        if ($$.hasArcType() && $$.updateTargetsForArc) {
          $$.updateTargetsForArc(targets);
        }
        if (config.subchart_show && $$.updateTargetsForSubchart) {
          $$.updateTargetsForSubchart(targets);
        }
        $$.showTargets();
      };
      ChartInternal.prototype.showTargets = function() {
        var $$ = this;
        $$.svg.selectAll("." + CLASS.target).filter(function(d) {
          return $$.isTargetToShow(d.id);
        }).transition().duration($$.config.transition_duration).style("opacity", 1);
      };
      ChartInternal.prototype.redraw = function(options, transitions) {
        var $$ = this, main = $$.main, d3 = $$.d3, config = $$.config;
        var areaIndices = $$.getShapeIndices($$.isAreaType), barIndices = $$.getShapeIndices($$.isBarType), lineIndices = $$.getShapeIndices($$.isLineType);
        var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis, withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend, withEventRect, withDimension, withUpdateXAxis;
        var hideAxis = $$.hasArcType();
        var drawArea, drawBar, drawLine, xForText, yForText;
        var duration, durationForExit, durationForAxis;
        var transitionsToWait, waitForDraw, flow, transition2;
        var targetsToShow = $$.filterTargetsToShow($$.data.targets), tickValues, i, intervalForCulling, xDomainForZoom;
        var xv = $$.xv.bind($$), cx, cy;
        options = options || {};
        withY = getOption(options, "withY", true);
        withSubchart = getOption(options, "withSubchart", true);
        withTransition = getOption(options, "withTransition", true);
        withTransform = getOption(options, "withTransform", false);
        withUpdateXDomain = getOption(options, "withUpdateXDomain", false);
        withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", false);
        withTrimXDomain = getOption(options, "withTrimXDomain", true);
        withUpdateXAxis = getOption(options, "withUpdateXAxis", withUpdateXDomain);
        withLegend = getOption(options, "withLegend", false);
        withEventRect = getOption(options, "withEventRect", true);
        withDimension = getOption(options, "withDimension", true);
        withTransitionForExit = getOption(options, "withTransitionForExit", withTransition);
        withTransitionForAxis = getOption(options, "withTransitionForAxis", withTransition);
        duration = withTransition ? config.transition_duration : 0;
        durationForExit = withTransitionForExit ? duration : 0;
        durationForAxis = withTransitionForAxis ? duration : 0;
        transitions = transitions || $$.axis.generateTransitions(durationForAxis);
        if (withLegend && config.legend_show) {
          $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);
        } else if (withDimension) {
          $$.updateDimension(true);
        }
        if ($$.isCategorized() && targetsToShow.length === 0) {
          $$.x.domain([0, $$.axes.x.selectAll(".tick").size()]);
        }
        if (targetsToShow.length) {
          $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);
          if (!config.axis_x_tick_values) {
            tickValues = $$.axis.updateXAxisTickValues(targetsToShow);
          }
        } else {
          $$.xAxis.tickValues([]);
          $$.subXAxis.tickValues([]);
        }
        if (config.zoom_rescale && !options.flow) {
          xDomainForZoom = $$.x.orgDomain();
        }
        $$.y.domain($$.getYDomain(targetsToShow, "y", xDomainForZoom));
        $$.y2.domain($$.getYDomain(targetsToShow, "y2", xDomainForZoom));
        if (!config.axis_y_tick_values && config.axis_y_tick_count) {
          $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));
        }
        if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {
          $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));
        }
        $$.axis.redraw(durationForAxis, hideAxis);
        $$.axis.updateLabels(withTransition);
        if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {
          if (config.axis_x_tick_culling && tickValues) {
            for (i = 1; i < tickValues.length; i++) {
              if (tickValues.length / i < config.axis_x_tick_culling_max) {
                intervalForCulling = i;
                break;
              }
            }
            $$.svg.selectAll("." + CLASS.axisX + " .tick text").each(function(e) {
              var index2 = tickValues.indexOf(e);
              if (index2 >= 0) {
                d3.select(this).style("display", index2 % intervalForCulling ? "none" : "block");
              }
            });
          } else {
            $$.svg.selectAll("." + CLASS.axisX + " .tick text").style("display", "block");
          }
        }
        drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : void 0;
        drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : void 0;
        drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : void 0;
        xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);
        yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);
        $$.updateCircleY();
        cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);
        cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);
        if (withY) {
          $$.subY.domain($$.getYDomain(targetsToShow, "y"));
          $$.subY2.domain($$.getYDomain(targetsToShow, "y2"));
        }
        $$.updateXgridFocus();
        main.select("text." + CLASS.text + "." + CLASS.empty).attr("x", $$.width / 2).attr("y", $$.height / 2).text(config.data_empty_label_text).transition().style("opacity", targetsToShow.length ? 0 : 1);
        if (withEventRect) {
          $$.redrawEventRect();
        }
        $$.updateGrid(duration);
        $$.updateStanfordElements(duration);
        $$.updateRegion(duration);
        $$.updateBar(durationForExit);
        $$.updateLine(durationForExit);
        $$.updateArea(durationForExit);
        $$.updateCircle(cx, cy);
        if ($$.hasDataLabel()) {
          $$.updateText(xForText, yForText, durationForExit);
        }
        if ($$.redrawTitle) {
          $$.redrawTitle();
        }
        if ($$.redrawArc) {
          $$.redrawArc(duration, durationForExit, withTransform);
        }
        if (config.subchart_show && $$.redrawSubchart) {
          $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);
        }
        if ($$.isStanfordGraphType()) {
          $$.drawColorScale();
        }
        main.selectAll("." + CLASS.selectedCircles).filter($$.isBarType.bind($$)).selectAll("circle").remove();
        if (options.flow) {
          flow = $$.generateFlow({
            targets: targetsToShow,
            flow: options.flow,
            duration: options.flow.duration,
            drawBar,
            drawLine,
            drawArea,
            cx,
            cy,
            xv,
            xForText,
            yForText
          });
        }
        if (duration && $$.isTabVisible()) {
          transition2 = d3.transition().duration(duration);
          transitionsToWait = [];
          [
            $$.redrawBar(drawBar, true, transition2),
            $$.redrawLine(drawLine, true, transition2),
            $$.redrawArea(drawArea, true, transition2),
            $$.redrawCircle(cx, cy, true, transition2),
            $$.redrawText(xForText, yForText, options.flow, true, transition2),
            $$.redrawRegion(true, transition2),
            $$.redrawGrid(true, transition2)
          ].forEach(function(transitions2) {
            transitions2.forEach(function(transition3) {
              transitionsToWait.push(transition3);
            });
          });
          waitForDraw = $$.generateWait();
          transitionsToWait.forEach(function(t) {
            waitForDraw.add(t);
          });
          waitForDraw(function() {
            if (flow) {
              flow();
            }
            if (config.onrendered) {
              config.onrendered.call($$);
            }
          });
        } else {
          $$.redrawBar(drawBar);
          $$.redrawLine(drawLine);
          $$.redrawArea(drawArea);
          $$.redrawCircle(cx, cy);
          $$.redrawText(xForText, yForText, options.flow);
          $$.redrawRegion();
          $$.redrawGrid();
          if (flow) {
            flow();
          }
          if (config.onrendered) {
            config.onrendered.call($$);
          }
        }
        $$.mapToIds($$.data.targets).forEach(function(id2) {
          $$.withoutFadeIn[id2] = true;
        });
      };
      ChartInternal.prototype.updateAndRedraw = function(options) {
        var $$ = this, config = $$.config, transitions;
        options = options || {};
        options.withTransition = getOption(options, "withTransition", true);
        options.withTransform = getOption(options, "withTransform", false);
        options.withLegend = getOption(options, "withLegend", false);
        options.withUpdateXDomain = getOption(options, "withUpdateXDomain", true);
        options.withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", true);
        options.withTransitionForExit = false;
        options.withTransitionForTransform = getOption(options, "withTransitionForTransform", options.withTransition);
        $$.updateSizes();
        if (!(options.withLegend && config.legend_show)) {
          transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);
          $$.updateScales();
          $$.updateSvgSize();
          $$.transformAll(options.withTransitionForTransform, transitions);
        }
        $$.redraw(options, transitions);
      };
      ChartInternal.prototype.redrawWithoutRescale = function() {
        this.redraw({
          withY: false,
          withSubchart: false,
          withEventRect: false,
          withTransitionForAxis: false
        });
      };
      ChartInternal.prototype.isTimeSeries = function() {
        return this.config.axis_x_type === "timeseries";
      };
      ChartInternal.prototype.isCategorized = function() {
        return this.config.axis_x_type.indexOf("categor") >= 0;
      };
      ChartInternal.prototype.isCustomX = function() {
        var $$ = this, config = $$.config;
        return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));
      };
      ChartInternal.prototype.isTimeSeriesY = function() {
        return this.config.axis_y_type === "timeseries";
      };
      ChartInternal.prototype.getTranslate = function(target) {
        var $$ = this, config = $$.config, x5, y5;
        if (target === "main") {
          x5 = asHalfPixel($$.margin.left);
          y5 = asHalfPixel($$.margin.top);
        } else if (target === "context") {
          x5 = asHalfPixel($$.margin2.left);
          y5 = asHalfPixel($$.margin2.top);
        } else if (target === "legend") {
          x5 = $$.margin3.left;
          y5 = $$.margin3.top;
        } else if (target === "x") {
          x5 = 0;
          y5 = config.axis_rotated ? 0 : $$.height;
        } else if (target === "y") {
          x5 = 0;
          y5 = config.axis_rotated ? $$.height : 0;
        } else if (target === "y2") {
          x5 = config.axis_rotated ? 0 : $$.width;
          y5 = config.axis_rotated ? 1 : 0;
        } else if (target === "subx") {
          x5 = 0;
          y5 = config.axis_rotated ? 0 : $$.height2;
        } else if (target === "arc") {
          x5 = $$.arcWidth / 2;
          y5 = $$.arcHeight / 2 - ($$.hasType("gauge") ? 6 : 0);
        }
        return "translate(" + x5 + "," + y5 + ")";
      };
      ChartInternal.prototype.initialOpacity = function(d) {
        return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;
      };
      ChartInternal.prototype.initialOpacityForCircle = function(d) {
        return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;
      };
      ChartInternal.prototype.opacityForCircle = function(d) {
        var isPointShouldBeShown = isFunction(this.config.point_show) ? this.config.point_show(d) : this.config.point_show;
        var opacity = isPointShouldBeShown || this.isStanfordType(d) ? 1 : 0;
        return isValue(d.value) ? this.isScatterType(d) ? 0.5 : opacity : 0;
      };
      ChartInternal.prototype.opacityForText = function() {
        return this.hasDataLabel() ? 1 : 0;
      };
      ChartInternal.prototype.xx = function(d) {
        return d ? this.x(d.x) : null;
      };
      ChartInternal.prototype.xvCustom = function(d, xyValue) {
        var $$ = this, value = xyValue ? d[xyValue] : d.value;
        if ($$.isTimeSeries()) {
          value = $$.parseDate(d.value);
        } else if ($$.isCategorized() && typeof d.value === "string") {
          value = $$.config.axis_x_categories.indexOf(d.value);
        }
        return Math.ceil($$.x(value));
      };
      ChartInternal.prototype.yvCustom = function(d, xyValue) {
        var $$ = this, yScale = d.axis && d.axis === "y2" ? $$.y2 : $$.y, value = xyValue ? d[xyValue] : d.value;
        return Math.ceil(yScale(value));
      };
      ChartInternal.prototype.xv = function(d) {
        var $$ = this, value = d.value;
        if ($$.isTimeSeries()) {
          value = $$.parseDate(d.value);
        } else if ($$.isCategorized() && typeof d.value === "string") {
          value = $$.config.axis_x_categories.indexOf(d.value);
        }
        return Math.ceil($$.x(value));
      };
      ChartInternal.prototype.yv = function(d) {
        var $$ = this, yScale = d.axis && d.axis === "y2" ? $$.y2 : $$.y;
        return Math.ceil(yScale(d.value));
      };
      ChartInternal.prototype.subxx = function(d) {
        return d ? this.subX(d.x) : null;
      };
      ChartInternal.prototype.transformMain = function(withTransition, transitions) {
        var $$ = this, xAxis, yAxis, y2Axis;
        if (transitions && transitions.axisX) {
          xAxis = transitions.axisX;
        } else {
          xAxis = $$.main.select("." + CLASS.axisX);
          if (withTransition) {
            xAxis = xAxis.transition();
          }
        }
        if (transitions && transitions.axisY) {
          yAxis = transitions.axisY;
        } else {
          yAxis = $$.main.select("." + CLASS.axisY);
          if (withTransition) {
            yAxis = yAxis.transition();
          }
        }
        if (transitions && transitions.axisY2) {
          y2Axis = transitions.axisY2;
        } else {
          y2Axis = $$.main.select("." + CLASS.axisY2);
          if (withTransition) {
            y2Axis = y2Axis.transition();
          }
        }
        (withTransition ? $$.main.transition() : $$.main).attr("transform", $$.getTranslate("main"));
        xAxis.attr("transform", $$.getTranslate("x"));
        yAxis.attr("transform", $$.getTranslate("y"));
        y2Axis.attr("transform", $$.getTranslate("y2"));
        $$.main.select("." + CLASS.chartArcs).attr("transform", $$.getTranslate("arc"));
      };
      ChartInternal.prototype.transformAll = function(withTransition, transitions) {
        var $$ = this;
        $$.transformMain(withTransition, transitions);
        if ($$.config.subchart_show) {
          $$.transformContext(withTransition, transitions);
        }
        if ($$.legend) {
          $$.transformLegend(withTransition);
        }
      };
      ChartInternal.prototype.updateSvgSize = function() {
        var $$ = this, brush2 = $$.svg.select("." + CLASS.brush + " .overlay");
        $$.svg.attr("width", $$.currentWidth).attr("height", $$.currentHeight);
        $$.svg.selectAll(["#" + $$.clipId, "#" + $$.clipIdForGrid]).select("rect").attr("width", $$.width).attr("height", $$.height);
        $$.svg.select("#" + $$.clipIdForXAxis).select("rect").attr("x", $$.getXAxisClipX.bind($$)).attr("y", $$.getXAxisClipY.bind($$)).attr("width", $$.getXAxisClipWidth.bind($$)).attr("height", $$.getXAxisClipHeight.bind($$));
        $$.svg.select("#" + $$.clipIdForYAxis).select("rect").attr("x", $$.getYAxisClipX.bind($$)).attr("y", $$.getYAxisClipY.bind($$)).attr("width", $$.getYAxisClipWidth.bind($$)).attr("height", $$.getYAxisClipHeight.bind($$));
        $$.svg.select("#" + $$.clipIdForSubchart).select("rect").attr("width", $$.width).attr("height", brush2.size() && brush2.attr("height") || 0);
        $$.selectChart.style("max-height", $$.currentHeight + "px");
      };
      ChartInternal.prototype.updateDimension = function(withoutAxis) {
        var $$ = this;
        if (!withoutAxis) {
          if ($$.config.axis_rotated) {
            $$.axes.x.call($$.xAxis);
            $$.axes.subx.call($$.subXAxis);
          } else {
            $$.axes.y.call($$.yAxis);
            $$.axes.y2.call($$.y2Axis);
          }
        }
        $$.updateSizes();
        $$.updateScales();
        $$.updateSvgSize();
        $$.transformAll(false);
      };
      ChartInternal.prototype.observeInserted = function(selection2) {
        var $$ = this, observer;
        if (typeof MutationObserver === "undefined") {
          window.console.error("MutationObserver not defined.");
          return;
        }
        observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            if (mutation.type === "childList" && mutation.previousSibling) {
              observer.disconnect();
              $$.intervalForObserveInserted = window.setInterval(function() {
                if (selection2.node().parentNode) {
                  window.clearInterval($$.intervalForObserveInserted);
                  $$.updateDimension();
                  if ($$.brush) {
                    $$.brush.update();
                  }
                  $$.config.oninit.call($$);
                  $$.redraw({
                    withTransform: true,
                    withUpdateXDomain: true,
                    withUpdateOrgXDomain: true,
                    withTransition: false,
                    withTransitionForTransform: false,
                    withLegend: true
                  });
                  selection2.transition().style("opacity", 1);
                }
              }, 10);
            }
          });
        });
        observer.observe(selection2.node(), {
          attributes: true,
          childList: true,
          characterData: true
        });
      };
      ChartInternal.prototype.bindResize = function() {
        var $$ = this, config = $$.config;
        $$.resizeFunction = $$.generateResize();
        $$.resizeFunction.add(function() {
          config.onresize.call($$);
        });
        if (config.resize_auto) {
          $$.resizeFunction.add(function() {
            if ($$.resizeTimeout !== void 0) {
              window.clearTimeout($$.resizeTimeout);
            }
            $$.resizeTimeout = window.setTimeout(function() {
              delete $$.resizeTimeout;
              $$.updateAndRedraw({
                withUpdateXDomain: false,
                withUpdateOrgXDomain: false,
                withTransition: false,
                withTransitionForTransform: false,
                withLegend: true
              });
              if ($$.brush) {
                $$.brush.update();
              }
            }, 100);
          });
        }
        $$.resizeFunction.add(function() {
          config.onresized.call($$);
        });
        $$.resizeIfElementDisplayed = function() {
          if ($$.api == null || !$$.api.element.offsetParent) {
            return;
          }
          $$.resizeFunction();
        };
        window.addEventListener("resize", $$.resizeIfElementDisplayed, false);
      };
      ChartInternal.prototype.bindWindowFocus = function() {
        var _this = this;
        if (this.windowFocusHandler) {
          return;
        }
        this.windowFocusHandler = function() {
          _this.redraw();
        };
        window.addEventListener("focus", this.windowFocusHandler);
      };
      ChartInternal.prototype.unbindWindowFocus = function() {
        window.removeEventListener("focus", this.windowFocusHandler);
        delete this.windowFocusHandler;
      };
      ChartInternal.prototype.generateResize = function() {
        var resizeFunctions = [];
        function callResizeFunctions() {
          resizeFunctions.forEach(function(f) {
            f();
          });
        }
        callResizeFunctions.add = function(f) {
          resizeFunctions.push(f);
        };
        callResizeFunctions.remove = function(f) {
          for (var i = 0; i < resizeFunctions.length; i++) {
            if (resizeFunctions[i] === f) {
              resizeFunctions.splice(i, 1);
              break;
            }
          }
        };
        return callResizeFunctions;
      };
      ChartInternal.prototype.endall = function(transition2, callback) {
        var n = 0;
        transition2.each(function() {
          ++n;
        }).on("end", function() {
          if (!--n) {
            callback.apply(this, arguments);
          }
        });
      };
      ChartInternal.prototype.generateWait = function() {
        var $$ = this;
        var transitionsToWait = [], f = function(callback) {
          var timer2 = setInterval(function() {
            if (!$$.isTabVisible()) {
              return;
            }
            var done = 0;
            transitionsToWait.forEach(function(t) {
              if (t.empty()) {
                done += 1;
                return;
              }
              try {
                t.transition();
              } catch (e) {
                done += 1;
              }
            });
            if (done === transitionsToWait.length) {
              clearInterval(timer2);
              if (callback) {
                callback();
              }
            }
          }, 50);
        };
        f.add = function(transition2) {
          transitionsToWait.push(transition2);
        };
        return f;
      };
      ChartInternal.prototype.parseDate = function(date2) {
        var $$ = this, parsedDate;
        if (date2 instanceof Date) {
          parsedDate = date2;
        } else if (typeof date2 === "string") {
          parsedDate = $$.dataTimeParse(date2);
        } else if (typeof date2 === "object") {
          parsedDate = /* @__PURE__ */ new Date(+date2);
        } else if (typeof date2 === "number" && !isNaN(date2)) {
          parsedDate = /* @__PURE__ */ new Date(+date2);
        }
        if (!parsedDate || isNaN(+parsedDate)) {
          window.console.error("Failed to parse x '" + date2 + "' to Date object");
        }
        return parsedDate;
      };
      ChartInternal.prototype.isTabVisible = function() {
        return !document.hidden;
      };
      ChartInternal.prototype.getPathBox = getPathBox;
      ChartInternal.prototype.CLASS = CLASS;
      (function() {
        if (!("SVGPathSeg" in window)) {
          window.SVGPathSeg = function(type2, typeAsLetter, owningPathSegList) {
            this.pathSegType = type2;
            this.pathSegTypeAsLetter = typeAsLetter;
            this._owningPathSegList = owningPathSegList;
          };
          window.SVGPathSeg.prototype.classname = "SVGPathSeg";
          window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
          window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
          window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
          window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
          window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
          window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
          window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
          window.SVGPathSeg.PATHSEG_ARC_REL = 11;
          window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
          window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
          window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
          window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
          window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
          window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;
          window.SVGPathSeg.prototype._segmentChanged = function() {
            if (this._owningPathSegList)
              this._owningPathSegList.segmentChanged(this);
          };
          window.SVGPathSegClosePath = function(owningPathSegList) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
          };
          window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegClosePath.prototype.toString = function() {
            return "[object SVGPathSegClosePath]";
          };
          window.SVGPathSegClosePath.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter;
          };
          window.SVGPathSegClosePath.prototype.clone = function() {
            return new window.SVGPathSegClosePath(void 0);
          };
          window.SVGPathSegMovetoAbs = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegMovetoAbs.prototype.toString = function() {
            return "[object SVGPathSegMovetoAbs]";
          };
          window.SVGPathSegMovetoAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegMovetoAbs.prototype.clone = function() {
            return new window.SVGPathSegMovetoAbs(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegMovetoRel = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegMovetoRel.prototype.toString = function() {
            return "[object SVGPathSegMovetoRel]";
          };
          window.SVGPathSegMovetoRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegMovetoRel.prototype.clone = function() {
            return new window.SVGPathSegMovetoRel(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoAbs = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoAbs.prototype.toString = function() {
            return "[object SVGPathSegLinetoAbs]";
          };
          window.SVGPathSegLinetoAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegLinetoAbs.prototype.clone = function() {
            return new window.SVGPathSegLinetoAbs(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoRel = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoRel.prototype.toString = function() {
            return "[object SVGPathSegLinetoRel]";
          };
          window.SVGPathSegLinetoRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegLinetoRel.prototype.clone = function() {
            return new window.SVGPathSegLinetoRel(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x5, y5, x12, y12, x22, y22) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x1 = x12;
            this._y1 = y12;
            this._x2 = x22;
            this._y2 = y22;
          };
          window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoCubicAbs.prototype.toString = function() {
            return "[object SVGPathSegCurvetoCubicAbs]";
          };
          window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoCubicAbs.prototype.clone = function() {
            return new window.SVGPathSegCurvetoCubicAbs(void 0, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
          };
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x1", {
            get: function() {
              return this._x1;
            },
            set: function(x12) {
              this._x1 = x12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y1", {
            get: function() {
              return this._y1;
            },
            set: function(y12) {
              this._y1 = y12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x2", {
            get: function() {
              return this._x2;
            },
            set: function(x22) {
              this._x2 = x22;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y2", {
            get: function() {
              return this._y2;
            },
            set: function(y22) {
              this._y2 = y22;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x5, y5, x12, y12, x22, y22) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x1 = x12;
            this._y1 = y12;
            this._x2 = x22;
            this._y2 = y22;
          };
          window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoCubicRel.prototype.toString = function() {
            return "[object SVGPathSegCurvetoCubicRel]";
          };
          window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoCubicRel.prototype.clone = function() {
            return new window.SVGPathSegCurvetoCubicRel(void 0, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
          };
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x1", {
            get: function() {
              return this._x1;
            },
            set: function(x12) {
              this._x1 = x12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y1", {
            get: function() {
              return this._y1;
            },
            set: function(y12) {
              this._y1 = y12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x2", {
            get: function() {
              return this._x2;
            },
            set: function(x22) {
              this._x2 = x22;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y2", {
            get: function() {
              return this._y2;
            },
            set: function(y22) {
              this._y2 = y22;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x5, y5, x12, y12) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x1 = x12;
            this._y1 = y12;
          };
          window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() {
            return "[object SVGPathSegCurvetoQuadraticAbs]";
          };
          window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() {
            return new window.SVGPathSegCurvetoQuadraticAbs(void 0, this._x, this._y, this._x1, this._y1);
          };
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x1", {
            get: function() {
              return this._x1;
            },
            set: function(x12) {
              this._x1 = x12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y1", {
            get: function() {
              return this._y1;
            },
            set: function(y12) {
              this._y1 = y12;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x5, y5, x12, y12) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x1 = x12;
            this._y1 = y12;
          };
          window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function() {
            return "[object SVGPathSegCurvetoQuadraticRel]";
          };
          window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function() {
            return new window.SVGPathSegCurvetoQuadraticRel(void 0, this._x, this._y, this._x1, this._y1);
          };
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x1", {
            get: function() {
              return this._x1;
            },
            set: function(x12) {
              this._x1 = x12;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y1", {
            get: function() {
              return this._y1;
            },
            set: function(y12) {
              this._y1 = y12;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegArcAbs = function(owningPathSegList, x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle2;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
          };
          window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegArcAbs.prototype.toString = function() {
            return "[object SVGPathSegArcAbs]";
          };
          window.SVGPathSegArcAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
          };
          window.SVGPathSegArcAbs.prototype.clone = function() {
            return new window.SVGPathSegArcAbs(void 0, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
          };
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r1", {
            get: function() {
              return this._r1;
            },
            set: function(r1) {
              this._r1 = r1;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r2", {
            get: function() {
              return this._r2;
            },
            set: function(r2) {
              this._r2 = r2;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "angle", {
            get: function() {
              return this._angle;
            },
            set: function(angle2) {
              this._angle = angle2;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "largeArcFlag", {
            get: function() {
              return this._largeArcFlag;
            },
            set: function(largeArcFlag) {
              this._largeArcFlag = largeArcFlag;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcAbs.prototype, "sweepFlag", {
            get: function() {
              return this._sweepFlag;
            },
            set: function(sweepFlag) {
              this._sweepFlag = sweepFlag;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegArcRel = function(owningPathSegList, x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle2;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
          };
          window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegArcRel.prototype.toString = function() {
            return "[object SVGPathSegArcRel]";
          };
          window.SVGPathSegArcRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
          };
          window.SVGPathSegArcRel.prototype.clone = function() {
            return new window.SVGPathSegArcRel(void 0, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
          };
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "r1", {
            get: function() {
              return this._r1;
            },
            set: function(r1) {
              this._r1 = r1;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "r2", {
            get: function() {
              return this._r2;
            },
            set: function(r2) {
              this._r2 = r2;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "angle", {
            get: function() {
              return this._angle;
            },
            set: function(angle2) {
              this._angle = angle2;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "largeArcFlag", {
            get: function() {
              return this._largeArcFlag;
            },
            set: function(largeArcFlag) {
              this._largeArcFlag = largeArcFlag;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegArcRel.prototype, "sweepFlag", {
            get: function() {
              return this._sweepFlag;
            },
            set: function(sweepFlag) {
              this._sweepFlag = sweepFlag;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
            this._x = x5;
          };
          window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function() {
            return "[object SVGPathSegLinetoHorizontalAbs]";
          };
          window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x;
          };
          window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function() {
            return new window.SVGPathSegLinetoHorizontalAbs(void 0, this._x);
          };
          Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
            this._x = x5;
          };
          window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoHorizontalRel.prototype.toString = function() {
            return "[object SVGPathSegLinetoHorizontalRel]";
          };
          window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x;
          };
          window.SVGPathSegLinetoHorizontalRel.prototype.clone = function() {
            return new window.SVGPathSegLinetoHorizontalRel(void 0, this._x);
          };
          Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
            this._y = y5;
          };
          window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoVerticalAbs.prototype.toString = function() {
            return "[object SVGPathSegLinetoVerticalAbs]";
          };
          window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._y;
          };
          window.SVGPathSegLinetoVerticalAbs.prototype.clone = function() {
            return new window.SVGPathSegLinetoVerticalAbs(void 0, this._y);
          };
          Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
            this._y = y5;
          };
          window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegLinetoVerticalRel.prototype.toString = function() {
            return "[object SVGPathSegLinetoVerticalRel]";
          };
          window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._y;
          };
          window.SVGPathSegLinetoVerticalRel.prototype.clone = function() {
            return new window.SVGPathSegLinetoVerticalRel(void 0, this._y);
          };
          Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x5, y5, x22, y22) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x2 = x22;
            this._y2 = y22;
          };
          window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() {
            return "[object SVGPathSegCurvetoCubicSmoothAbs]";
          };
          window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0, this._x, this._y, this._x2, this._y2);
          };
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", {
            get: function() {
              return this._x2;
            },
            set: function(x22) {
              this._x2 = x22;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", {
            get: function() {
              return this._y2;
            },
            set: function(y22) {
              this._y2 = y22;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x5, y5, x22, y22) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
            this._x = x5;
            this._y = y5;
            this._x2 = x22;
            this._y2 = y22;
          };
          window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() {
            return "[object SVGPathSegCurvetoCubicSmoothRel]";
          };
          window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() {
            return new window.SVGPathSegCurvetoCubicSmoothRel(void 0, this._x, this._y, this._x2, this._y2);
          };
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", {
            get: function() {
              return this._x2;
            },
            set: function(x22) {
              this._x2 = x22;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", {
            get: function() {
              return this._y2;
            },
            set: function(y22) {
              this._y2 = y22;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() {
            return "[object SVGPathSegCurvetoQuadraticSmoothAbs]";
          };
          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x5, y5) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
            this._x = x5;
            this._y = y5;
          };
          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() {
            return "[object SVGPathSegCurvetoQuadraticSmoothRel]";
          };
          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
          };
          window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0, this._x, this._y);
          };
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", {
            get: function() {
              return this._x;
            },
            set: function(x5) {
              this._x = x5;
              this._segmentChanged();
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", {
            get: function() {
              return this._y;
            },
            set: function(y5) {
              this._y = y5;
              this._segmentChanged();
            },
            enumerable: true
          });
          window.SVGPathElement.prototype.createSVGPathSegClosePath = function() {
            return new window.SVGPathSegClosePath(void 0);
          };
          window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x5, y5) {
            return new window.SVGPathSegMovetoAbs(void 0, x5, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x5, y5) {
            return new window.SVGPathSegMovetoRel(void 0, x5, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x5, y5) {
            return new window.SVGPathSegLinetoAbs(void 0, x5, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x5, y5) {
            return new window.SVGPathSegLinetoRel(void 0, x5, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x5, y5, x12, y12, x22, y22) {
            return new window.SVGPathSegCurvetoCubicAbs(void 0, x5, y5, x12, y12, x22, y22);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x5, y5, x12, y12, x22, y22) {
            return new window.SVGPathSegCurvetoCubicRel(void 0, x5, y5, x12, y12, x22, y22);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x5, y5, x12, y12) {
            return new window.SVGPathSegCurvetoQuadraticAbs(void 0, x5, y5, x12, y12);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x5, y5, x12, y12) {
            return new window.SVGPathSegCurvetoQuadraticRel(void 0, x5, y5, x12, y12);
          };
          window.SVGPathElement.prototype.createSVGPathSegArcAbs = function(x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcAbs(void 0, x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag);
          };
          window.SVGPathElement.prototype.createSVGPathSegArcRel = function(x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcRel(void 0, x5, y5, r1, r2, angle2, largeArcFlag, sweepFlag);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x5) {
            return new window.SVGPathSegLinetoHorizontalAbs(void 0, x5);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x5) {
            return new window.SVGPathSegLinetoHorizontalRel(void 0, x5);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y5) {
            return new window.SVGPathSegLinetoVerticalAbs(void 0, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y5) {
            return new window.SVGPathSegLinetoVerticalRel(void 0, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x5, y5, x22, y22) {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0, x5, y5, x22, y22);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x5, y5, x22, y22) {
            return new window.SVGPathSegCurvetoCubicSmoothRel(void 0, x5, y5, x22, y22);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x5, y5) {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0, x5, y5);
          };
          window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x5, y5) {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0, x5, y5);
          };
          if (!("getPathSegAtLength" in window.SVGPathElement.prototype)) {
            window.SVGPathElement.prototype.getPathSegAtLength = function(distance) {
              if (distance === void 0 || !isFinite(distance))
                throw "Invalid arguments.";
              var measurementElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
              measurementElement.setAttribute("d", this.getAttribute("d"));
              var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;
              if (lastPathSegment <= 0)
                return 0;
              do {
                measurementElement.pathSegList.removeItem(lastPathSegment);
                if (distance > measurementElement.getTotalLength())
                  break;
                lastPathSegment--;
              } while (lastPathSegment > 0);
              return lastPathSegment;
            };
          }
        }
        if (!("SVGPathSegList" in window)) {
          window.SVGPathSegList = function(pathElement) {
            this._pathElement = pathElement;
            this._list = this._parsePath(this._pathElement.getAttribute("d"));
            this._mutationObserverConfig = {
              attributes: true,
              attributeFilter: ["d"]
            };
            this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
          };
          window.SVGPathSegList.prototype.classname = "SVGPathSegList";
          Object.defineProperty(window.SVGPathSegList.prototype, "numberOfItems", {
            get: function() {
              this._checkPathSynchronizedToList();
              return this._list.length;
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathElement.prototype, "pathSegList", {
            get: function() {
              if (!this._pathSegList)
                this._pathSegList = new window.SVGPathSegList(this);
              return this._pathSegList;
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathElement.prototype, "normalizedPathSegList", {
            get: function() {
              return this.pathSegList;
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathElement.prototype, "animatedPathSegList", {
            get: function() {
              return this.pathSegList;
            },
            enumerable: true
          });
          Object.defineProperty(window.SVGPathElement.prototype, "animatedNormalizedPathSegList", {
            get: function() {
              return this.pathSegList;
            },
            enumerable: true
          });
          window.SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
            this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
          };
          window.SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
            if (!this._pathElement)
              return;
            var hasPathMutations = false;
            mutationRecords.forEach(function(record) {
              if (record.attributeName == "d")
                hasPathMutations = true;
            });
            if (hasPathMutations)
              this._list = this._parsePath(this._pathElement.getAttribute("d"));
          };
          window.SVGPathSegList.prototype._writeListToPath = function() {
            this._pathElementMutationObserver.disconnect();
            this._pathElement.setAttribute("d", window.SVGPathSegList._pathSegArrayAsString(this._list));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
          };
          window.SVGPathSegList.prototype.segmentChanged = function(pathSeg) {
            this._writeListToPath();
          };
          window.SVGPathSegList.prototype.clear = function() {
            this._checkPathSynchronizedToList();
            this._list.forEach(function(pathSeg) {
              pathSeg._owningPathSegList = null;
            });
            this._list = [];
            this._writeListToPath();
          };
          window.SVGPathSegList.prototype.initialize = function(newItem) {
            this._checkPathSynchronizedToList();
            this._list = [newItem];
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
          };
          window.SVGPathSegList.prototype._checkValidIndex = function(index2) {
            if (isNaN(index2) || index2 < 0 || index2 >= this.numberOfItems)
              throw "INDEX_SIZE_ERR";
          };
          window.SVGPathSegList.prototype.getItem = function(index2) {
            this._checkPathSynchronizedToList();
            this._checkValidIndex(index2);
            return this._list[index2];
          };
          window.SVGPathSegList.prototype.insertItemBefore = function(newItem, index2) {
            this._checkPathSynchronizedToList();
            if (index2 > this.numberOfItems)
              index2 = this.numberOfItems;
            if (newItem._owningPathSegList) {
              newItem = newItem.clone();
            }
            this._list.splice(index2, 0, newItem);
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
          };
          window.SVGPathSegList.prototype.replaceItem = function(newItem, index2) {
            this._checkPathSynchronizedToList();
            if (newItem._owningPathSegList) {
              newItem = newItem.clone();
            }
            this._checkValidIndex(index2);
            this._list[index2] = newItem;
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
          };
          window.SVGPathSegList.prototype.removeItem = function(index2) {
            this._checkPathSynchronizedToList();
            this._checkValidIndex(index2);
            var item = this._list[index2];
            this._list.splice(index2, 1);
            this._writeListToPath();
            return item;
          };
          window.SVGPathSegList.prototype.appendItem = function(newItem) {
            this._checkPathSynchronizedToList();
            if (newItem._owningPathSegList) {
              newItem = newItem.clone();
            }
            this._list.push(newItem);
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
          };
          window.SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
            var string = "";
            var first = true;
            pathSegArray.forEach(function(pathSeg) {
              if (first) {
                first = false;
                string += pathSeg._asPathString();
              } else {
                string += " " + pathSeg._asPathString();
              }
            });
            return string;
          };
          window.SVGPathSegList.prototype._parsePath = function(string) {
            if (!string || string.length == 0)
              return [];
            var owningPathSegList = this;
            var Builder = function() {
              this.pathSegList = [];
            };
            Builder.prototype.appendSegment = function(pathSeg2) {
              this.pathSegList.push(pathSeg2);
            };
            var Source = function(string2) {
              this._string = string2;
              this._currentIndex = 0;
              this._endIndex = this._string.length;
              this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;
              this._skipOptionalSpaces();
            };
            Source.prototype._isCurrentSpace = function() {
              var character = this._string[this._currentIndex];
              return character <= " " && (character == " " || character == "\n" || character == "	" || character == "\r" || character == "\f");
            };
            Source.prototype._skipOptionalSpaces = function() {
              while (this._currentIndex < this._endIndex && this._isCurrentSpace())
                this._currentIndex++;
              return this._currentIndex < this._endIndex;
            };
            Source.prototype._skipOptionalSpacesOrDelimiter = function() {
              if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",")
                return false;
              if (this._skipOptionalSpaces()) {
                if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
                  this._currentIndex++;
                  this._skipOptionalSpaces();
                }
              }
              return this._currentIndex < this._endIndex;
            };
            Source.prototype.hasMoreData = function() {
              return this._currentIndex < this._endIndex;
            };
            Source.prototype.peekSegmentType = function() {
              var lookahead = this._string[this._currentIndex];
              return this._pathSegTypeFromChar(lookahead);
            };
            Source.prototype._pathSegTypeFromChar = function(lookahead) {
              switch (lookahead) {
                case "Z":
                case "z":
                  return window.SVGPathSeg.PATHSEG_CLOSEPATH;
                case "M":
                  return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
                case "m":
                  return window.SVGPathSeg.PATHSEG_MOVETO_REL;
                case "L":
                  return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                case "l":
                  return window.SVGPathSeg.PATHSEG_LINETO_REL;
                case "C":
                  return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
                case "c":
                  return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
                case "Q":
                  return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
                case "q":
                  return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
                case "A":
                  return window.SVGPathSeg.PATHSEG_ARC_ABS;
                case "a":
                  return window.SVGPathSeg.PATHSEG_ARC_REL;
                case "H":
                  return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
                case "h":
                  return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
                case "V":
                  return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
                case "v":
                  return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
                case "S":
                  return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
                case "s":
                  return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
                case "T":
                  return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
                case "t":
                  return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
                default:
                  return window.SVGPathSeg.PATHSEG_UNKNOWN;
              }
            };
            Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
              if ((lookahead == "+" || lookahead == "-" || lookahead == "." || lookahead >= "0" && lookahead <= "9") && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
                if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS)
                  return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL)
                  return window.SVGPathSeg.PATHSEG_LINETO_REL;
                return previousCommand;
              }
              return window.SVGPathSeg.PATHSEG_UNKNOWN;
            };
            Source.prototype.initialCommandIsMoveTo = function() {
              if (!this.hasMoreData())
                return true;
              var command = this.peekSegmentType();
              return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
            };
            Source.prototype._parseNumber = function() {
              var exponent2 = 0;
              var integer = 0;
              var frac = 1;
              var decimal = 0;
              var sign3 = 1;
              var expsign = 1;
              var startIndex = this._currentIndex;
              this._skipOptionalSpaces();
              if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+")
                this._currentIndex++;
              else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
                this._currentIndex++;
                sign3 = -1;
              }
              if (this._currentIndex == this._endIndex || (this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != ".")
                return void 0;
              var startIntPartIndex = this._currentIndex;
              while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9")
                this._currentIndex++;
              if (this._currentIndex != startIntPartIndex) {
                var scanIntPartIndex = this._currentIndex - 1;
                var multiplier = 1;
                while (scanIntPartIndex >= startIntPartIndex) {
                  integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
                  multiplier *= 10;
                }
              }
              if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
                this._currentIndex++;
                if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
                  return void 0;
                while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                  frac *= 10;
                  decimal += (this._string.charAt(this._currentIndex) - "0") / frac;
                  this._currentIndex += 1;
                }
              }
              if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m") {
                this._currentIndex++;
                if (this._string.charAt(this._currentIndex) == "+") {
                  this._currentIndex++;
                } else if (this._string.charAt(this._currentIndex) == "-") {
                  this._currentIndex++;
                  expsign = -1;
                }
                if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9")
                  return void 0;
                while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                  exponent2 *= 10;
                  exponent2 += this._string.charAt(this._currentIndex) - "0";
                  this._currentIndex++;
                }
              }
              var number4 = integer + decimal;
              number4 *= sign3;
              if (exponent2)
                number4 *= Math.pow(10, expsign * exponent2);
              if (startIndex == this._currentIndex)
                return void 0;
              this._skipOptionalSpacesOrDelimiter();
              return number4;
            };
            Source.prototype._parseArcFlag = function() {
              if (this._currentIndex >= this._endIndex)
                return void 0;
              var flag = false;
              var flagChar = this._string.charAt(this._currentIndex++);
              if (flagChar == "0")
                flag = false;
              else if (flagChar == "1")
                flag = true;
              else
                return void 0;
              this._skipOptionalSpacesOrDelimiter();
              return flag;
            };
            Source.prototype.parseSegment = function() {
              var lookahead = this._string[this._currentIndex];
              var command = this._pathSegTypeFromChar(lookahead);
              if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
                if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN)
                  return null;
                command = this._nextCommandHelper(lookahead, this._previousCommand);
                if (command == window.SVGPathSeg.PATHSEG_UNKNOWN)
                  return null;
              } else {
                this._currentIndex++;
              }
              this._previousCommand = command;
              switch (command) {
                case window.SVGPathSeg.PATHSEG_MOVETO_REL:
                  return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
                  return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_REL:
                  return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_ABS:
                  return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
                  return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
                  return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
                  return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
                case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
                  return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
                case window.SVGPathSeg.PATHSEG_CLOSEPATH:
                  this._skipOptionalSpaces();
                  return new window.SVGPathSegClosePath(owningPathSegList);
                case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    x2: this._parseNumber(),
                    y2: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    x2: this._parseNumber(),
                    y2: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
                  var points = {
                    x2: this._parseNumber(),
                    y2: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
                case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
                  var points = {
                    x2: this._parseNumber(),
                    y2: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
                case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
                case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
                case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
                  return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
                  return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                case window.SVGPathSeg.PATHSEG_ARC_REL:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    arcAngle: this._parseNumber(),
                    arcLarge: this._parseArcFlag(),
                    arcSweep: this._parseArcFlag(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                case window.SVGPathSeg.PATHSEG_ARC_ABS:
                  var points = {
                    x1: this._parseNumber(),
                    y1: this._parseNumber(),
                    arcAngle: this._parseNumber(),
                    arcLarge: this._parseArcFlag(),
                    arcSweep: this._parseArcFlag(),
                    x: this._parseNumber(),
                    y: this._parseNumber()
                  };
                  return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                default:
                  throw "Unknown path seg type.";
              }
            };
            var builder = new Builder();
            var source = new Source(string);
            if (!source.initialCommandIsMoveTo())
              return [];
            while (source.hasMoreData()) {
              var pathSeg = source.parseSegment();
              if (!pathSeg)
                return [];
              builder.appendSegment(pathSeg);
            }
            return builder.pathSegList;
          };
        }
      })();
      if (!String.prototype.padEnd) {
        String.prototype.padEnd = function padEnd(targetLength, padString) {
          targetLength = targetLength >> 0;
          padString = String(typeof padString !== "undefined" ? padString : " ");
          if (this.length > targetLength) {
            return String(this);
          } else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
              padString += padString.repeat(targetLength / padString.length);
            }
            return String(this) + padString.slice(0, targetLength);
          }
        };
      }
      if (typeof Object.assign !== "function") {
        Object.defineProperty(Object, "assign", {
          value: function assign(target, varArgs) {
            if (target === null || target === void 0) {
              throw new TypeError("Cannot convert undefined or null to object");
            }
            var to = Object(target);
            for (var index2 = 1; index2 < arguments.length; index2++) {
              var nextSource = arguments[index2];
              if (nextSource !== null && nextSource !== void 0) {
                for (var nextKey in nextSource) {
                  if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                    to[nextKey] = nextSource[nextKey];
                  }
                }
              }
            }
            return to;
          },
          writable: true,
          configurable: true
        });
      }
      Chart.prototype.axis = function() {
      };
      Chart.prototype.axis.labels = function(labels) {
        var $$ = this.internal;
        if (arguments.length) {
          Object.keys(labels).forEach(function(axisId) {
            $$.axis.setLabelText(axisId, labels[axisId]);
          });
          $$.axis.updateLabels();
        }
      };
      Chart.prototype.axis.max = function(max3) {
        var $$ = this.internal, config = $$.config;
        if (arguments.length) {
          if (typeof max3 === "object") {
            if (isValue(max3.x)) {
              config.axis_x_max = max3.x;
            }
            if (isValue(max3.y)) {
              config.axis_y_max = max3.y;
            }
            if (isValue(max3.y2)) {
              config.axis_y2_max = max3.y2;
            }
          } else {
            config.axis_y_max = config.axis_y2_max = max3;
          }
          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        } else {
          return {
            x: config.axis_x_max,
            y: config.axis_y_max,
            y2: config.axis_y2_max
          };
        }
      };
      Chart.prototype.axis.min = function(min2) {
        var $$ = this.internal, config = $$.config;
        if (arguments.length) {
          if (typeof min2 === "object") {
            if (isValue(min2.x)) {
              config.axis_x_min = min2.x;
            }
            if (isValue(min2.y)) {
              config.axis_y_min = min2.y;
            }
            if (isValue(min2.y2)) {
              config.axis_y2_min = min2.y2;
            }
          } else {
            config.axis_y_min = config.axis_y2_min = min2;
          }
          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        } else {
          return {
            x: config.axis_x_min,
            y: config.axis_y_min,
            y2: config.axis_y2_min
          };
        }
      };
      Chart.prototype.axis.range = function(range2) {
        if (arguments.length) {
          if (isDefined(range2.max)) {
            this.axis.max(range2.max);
          }
          if (isDefined(range2.min)) {
            this.axis.min(range2.min);
          }
        } else {
          return {
            max: this.axis.max(),
            min: this.axis.min()
          };
        }
      };
      Chart.prototype.axis.types = function(types) {
        var $$ = this.internal;
        if (types === void 0) {
          return {
            y: $$.config.axis_y_type,
            y2: $$.config.axis_y2_type
          };
        } else {
          if (isDefined(types.y)) {
            $$.config.axis_y_type = types.y;
          }
          if (isDefined(types.y2)) {
            $$.config.axis_y2_type = types.y2;
          }
          $$.updateScales();
          $$.redraw();
        }
      };
      Chart.prototype.category = function(i, category) {
        var $$ = this.internal, config = $$.config;
        if (arguments.length > 1) {
          config.axis_x_categories[i] = category;
          $$.redraw();
        }
        return config.axis_x_categories[i];
      };
      Chart.prototype.categories = function(categories) {
        var $$ = this.internal, config = $$.config;
        if (!arguments.length) {
          return config.axis_x_categories;
        }
        config.axis_x_categories = categories;
        $$.redraw();
        return config.axis_x_categories;
      };
      Chart.prototype.resize = function(size) {
        var $$ = this.internal, config = $$.config;
        config.size_width = size ? size.width : null;
        config.size_height = size ? size.height : null;
        this.flush();
      };
      Chart.prototype.flush = function() {
        var $$ = this.internal;
        $$.updateAndRedraw({
          withLegend: true,
          withTransition: false,
          withTransitionForTransform: false
        });
      };
      Chart.prototype.destroy = function() {
        var $$ = this.internal;
        window.clearInterval($$.intervalForObserveInserted);
        if ($$.resizeTimeout !== void 0) {
          window.clearTimeout($$.resizeTimeout);
        }
        window.removeEventListener("resize", $$.resizeIfElementDisplayed);
        $$.resizeFunction.remove();
        $$.unbindWindowFocus();
        $$.selectChart.classed("c3", false).html("");
        Object.keys($$).forEach(function(key) {
          $$[key] = null;
        });
        return null;
      };
      Chart.prototype.color = function(id2) {
        var $$ = this.internal;
        return $$.color(id2);
      };
      Chart.prototype.data = function(targetIds) {
        var targets = this.internal.data.targets;
        return typeof targetIds === "undefined" ? targets : targets.filter(function(t) {
          return [].concat(targetIds).indexOf(t.id) >= 0;
        });
      };
      Chart.prototype.data.shown = function(targetIds) {
        return this.internal.filterTargetsToShow(this.data(targetIds));
      };
      Chart.prototype.data.values = function(targetId, flat) {
        if (flat === void 0) {
          flat = true;
        }
        var values = null;
        if (targetId) {
          var targets = this.data(targetId);
          if (targets && isArray(targets)) {
            values = targets.reduce(function(ret, v) {
              var dataValue = v.values.map(function(d) {
                return d.value;
              });
              if (flat) {
                ret = ret.concat(dataValue);
              } else {
                ret.push(dataValue);
              }
              return ret;
            }, []);
          }
        }
        return values;
      };
      Chart.prototype.data.names = function(names) {
        this.internal.clearLegendItemTextBoxCache();
        return this.internal.updateDataAttributes("names", names);
      };
      Chart.prototype.data.colors = function(colors) {
        return this.internal.updateDataAttributes("colors", colors);
      };
      Chart.prototype.data.axes = function(axes) {
        return this.internal.updateDataAttributes("axes", axes);
      };
      Chart.prototype.data.stackNormalized = function(normalized) {
        if (normalized === void 0) {
          return this.internal.isStackNormalized();
        }
        this.internal.config.data_stack_normalize = !!normalized;
        this.internal.redraw();
      };
      Chart.prototype.donut = function() {
      };
      Chart.prototype.donut.padAngle = function(padAngle) {
        if (padAngle === void 0) {
          return this.internal.config.donut_padAngle;
        }
        this.internal.config.donut_padAngle = padAngle;
        this.flush();
      };
      Chart.prototype.flow = function(args) {
        var $$ = this.internal, targets, data, notfoundIds = [], orgDataCount = $$.getMaxDataCount(), dataCount, domain, baseTarget, baseValue, length2 = 0, tail = 0, diff, to;
        if (args.json) {
          data = $$.convertJsonToData(args.json, args.keys);
        } else if (args.rows) {
          data = $$.convertRowsToData(args.rows);
        } else if (args.columns) {
          data = $$.convertColumnsToData(args.columns);
        } else {
          return;
        }
        targets = $$.convertDataToTargets(data, true);
        $$.data.targets.forEach(function(t) {
          var found = false, i, j;
          for (i = 0; i < targets.length; i++) {
            if (t.id === targets[i].id) {
              found = true;
              if (t.values[t.values.length - 1]) {
                tail = t.values[t.values.length - 1].index + 1;
              }
              length2 = targets[i].values.length;
              for (j = 0; j < length2; j++) {
                targets[i].values[j].index = tail + j;
                if (!$$.isTimeSeries()) {
                  targets[i].values[j].x = tail + j;
                }
              }
              t.values = t.values.concat(targets[i].values);
              targets.splice(i, 1);
              break;
            }
          }
          if (!found) {
            notfoundIds.push(t.id);
          }
        });
        $$.data.targets.forEach(function(t) {
          var i, j;
          for (i = 0; i < notfoundIds.length; i++) {
            if (t.id === notfoundIds[i]) {
              tail = t.values[t.values.length - 1].index + 1;
              for (j = 0; j < length2; j++) {
                t.values.push({
                  id: t.id,
                  index: tail + j,
                  x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,
                  value: null
                });
              }
            }
          }
        });
        if ($$.data.targets.length) {
          targets.forEach(function(t) {
            var i, missing = [];
            for (i = $$.data.targets[0].values[0].index; i < tail; i++) {
              missing.push({
                id: t.id,
                index: i,
                x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,
                value: null
              });
            }
            t.values.forEach(function(v) {
              v.index += tail;
              if (!$$.isTimeSeries()) {
                v.x += tail;
              }
            });
            t.values = missing.concat(t.values);
          });
        }
        $$.data.targets = $$.data.targets.concat(targets);
        dataCount = $$.getMaxDataCount();
        baseTarget = $$.data.targets[0];
        baseValue = baseTarget.values[0];
        if (isDefined(args.to)) {
          length2 = 0;
          to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;
          baseTarget.values.forEach(function(v) {
            if (v.x < to) {
              length2++;
            }
          });
        } else if (isDefined(args.length)) {
          length2 = args.length;
        }
        if (!orgDataCount) {
          if ($$.isTimeSeries()) {
            if (baseTarget.values.length > 1) {
              diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;
            } else {
              diff = baseValue.x - $$.getXDomain($$.data.targets)[0];
            }
          } else {
            diff = 1;
          }
          domain = [baseValue.x - diff, baseValue.x];
          $$.updateXDomain(null, true, true, false, domain);
        } else if (orgDataCount === 1) {
          if ($$.isTimeSeries()) {
            diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;
            domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];
            $$.updateXDomain(null, true, true, false, domain);
          }
        }
        $$.updateTargets($$.data.targets);
        $$.redraw({
          flow: {
            index: baseValue.index,
            length: length2,
            duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,
            done: args.done,
            orgDataCount
          },
          withLegend: true,
          withTransition: orgDataCount > 1,
          withTrimXDomain: false,
          withUpdateXAxis: true
        });
      };
      ChartInternal.prototype.generateFlow = function(args) {
        var $$ = this, config = $$.config, d3 = $$.d3;
        return function() {
          var targets = args.targets, flow = args.flow, drawBar = args.drawBar, drawLine = args.drawLine, drawArea = args.drawArea, cx = args.cx, cy = args.cy, xv = args.xv, xForText = args.xForText, yForText = args.yForText, duration = args.duration;
          var translateX2, scaleX = 1, transform2, flowIndex = flow.index, flowLength = flow.length, flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex), flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength), orgDomain = $$.x.domain(), domain, durationForFlow = flow.duration || duration, done = flow.done || function() {
          }, wait = $$.generateWait();
          var xgrid, xgridLines, mainRegion, mainText, mainBar, mainLine, mainArea, mainCircle;
          $$.flowing = true;
          $$.data.targets.forEach(function(d) {
            d.values.splice(0, flowLength);
          });
          domain = $$.updateXDomain(targets, true, true);
          if ($$.updateXGrid) {
            $$.updateXGrid(true);
          }
          xgrid = $$.xgrid || d3.selectAll([]);
          xgridLines = $$.xgridLines || d3.selectAll([]);
          mainRegion = $$.mainRegion || d3.selectAll([]);
          mainText = $$.mainText || d3.selectAll([]);
          mainBar = $$.mainBar || d3.selectAll([]);
          mainLine = $$.mainLine || d3.selectAll([]);
          mainArea = $$.mainArea || d3.selectAll([]);
          mainCircle = $$.mainCircle || d3.selectAll([]);
          if (!flow.orgDataCount) {
            if ($$.data.targets[0].values.length !== 1) {
              translateX2 = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
              if ($$.isTimeSeries()) {
                flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);
                flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);
                translateX2 = $$.x(flowStart.x) - $$.x(flowEnd.x);
              } else {
                translateX2 = diffDomain(domain) / 2;
              }
            }
          } else if (flow.orgDataCount === 1 || (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {
            translateX2 = $$.x(orgDomain[0]) - $$.x(domain[0]);
          } else {
            if ($$.isTimeSeries()) {
              translateX2 = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
              translateX2 = $$.x(flowStart.x) - $$.x(flowEnd.x);
            }
          }
          scaleX = diffDomain(orgDomain) / diffDomain(domain);
          transform2 = "translate(" + translateX2 + ",0) scale(" + scaleX + ",1)";
          $$.hideXGridFocus();
          var flowTransition = d3.transition().ease(d3.easeLinear).duration(durationForFlow);
          wait.add($$.xAxis($$.axes.x, flowTransition));
          wait.add(mainBar.transition(flowTransition).attr("transform", transform2));
          wait.add(mainLine.transition(flowTransition).attr("transform", transform2));
          wait.add(mainArea.transition(flowTransition).attr("transform", transform2));
          wait.add(mainCircle.transition(flowTransition).attr("transform", transform2));
          wait.add(mainText.transition(flowTransition).attr("transform", transform2));
          wait.add(mainRegion.filter($$.isRegionOnX).transition(flowTransition).attr("transform", transform2));
          wait.add(xgrid.transition(flowTransition).attr("transform", transform2));
          wait.add(xgridLines.transition(flowTransition).attr("transform", transform2));
          wait(function() {
            var i, shapes = [], texts = [];
            if (flowLength) {
              for (i = 0; i < flowLength; i++) {
                shapes.push("." + CLASS.shape + "-" + (flowIndex + i));
                texts.push("." + CLASS.text + "-" + (flowIndex + i));
              }
              $$.svg.selectAll("." + CLASS.shapes).selectAll(shapes).remove();
              $$.svg.selectAll("." + CLASS.texts).selectAll(texts).remove();
              $$.svg.select("." + CLASS.xgrid).remove();
            }
            xgrid.attr("transform", null).attr("x1", $$.xgridAttr.x1).attr("x2", $$.xgridAttr.x2).attr("y1", $$.xgridAttr.y1).attr("y2", $$.xgridAttr.y2).style("opacity", $$.xgridAttr.opacity);
            xgridLines.attr("transform", null);
            xgridLines.select("line").attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv);
            xgridLines.select("text").attr("x", config.axis_rotated ? $$.width : 0).attr("y", xv);
            mainBar.attr("transform", null).attr("d", drawBar);
            mainLine.attr("transform", null).attr("d", drawLine);
            mainArea.attr("transform", null).attr("d", drawArea);
            mainCircle.attr("transform", null).attr("cx", cx).attr("cy", cy);
            mainText.attr("transform", null).attr("x", xForText).attr("y", yForText).style("fill-opacity", $$.opacityForText.bind($$));
            mainRegion.attr("transform", null);
            mainRegion.filter($$.isRegionOnX).attr("x", $$.regionX.bind($$)).attr("width", $$.regionWidth.bind($$));
            done();
            $$.flowing = false;
          });
        };
      };
      Chart.prototype.focus = function(targetIds) {
        var $$ = this.internal, candidates;
        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), this.revert();
        this.defocus();
        candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);
        if ($$.hasArcType()) {
          $$.expandArc(targetIds);
        }
        $$.toggleFocusLegend(targetIds, true);
        $$.focusedTargetIds = targetIds;
        $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function(id2) {
          return targetIds.indexOf(id2) < 0;
        });
      };
      Chart.prototype.defocus = function(targetIds) {
        var $$ = this.internal, candidates;
        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);
        if ($$.hasArcType()) {
          $$.unexpandArc(targetIds);
        }
        $$.toggleFocusLegend(targetIds, false);
        $$.focusedTargetIds = $$.focusedTargetIds.filter(function(id2) {
          return targetIds.indexOf(id2) < 0;
        });
        $$.defocusedTargetIds = targetIds;
      };
      Chart.prototype.revert = function(targetIds) {
        var $$ = this.internal, candidates;
        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds));
        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);
        if ($$.hasArcType()) {
          $$.unexpandArc(targetIds);
        }
        if ($$.config.legend_show) {
          $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));
          $$.legend.selectAll($$.selectorLegends(targetIds)).filter(function() {
            return $$.d3.select(this).classed(CLASS.legendItemFocused);
          }).classed(CLASS.legendItemFocused, false);
        }
        $$.focusedTargetIds = [];
        $$.defocusedTargetIds = [];
      };
      Chart.prototype.xgrids = function(grids) {
        var $$ = this.internal, config = $$.config;
        if (!grids) {
          return config.grid_x_lines;
        }
        config.grid_x_lines = grids;
        $$.redrawWithoutRescale();
        return config.grid_x_lines;
      };
      Chart.prototype.xgrids.add = function(grids) {
        var $$ = this.internal;
        return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));
      };
      Chart.prototype.xgrids.remove = function(params) {
        var $$ = this.internal;
        $$.removeGridLines(params, true);
      };
      Chart.prototype.ygrids = function(grids) {
        var $$ = this.internal, config = $$.config;
        if (!grids) {
          return config.grid_y_lines;
        }
        config.grid_y_lines = grids;
        $$.redrawWithoutRescale();
        return config.grid_y_lines;
      };
      Chart.prototype.ygrids.add = function(grids) {
        var $$ = this.internal;
        return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));
      };
      Chart.prototype.ygrids.remove = function(params) {
        var $$ = this.internal;
        $$.removeGridLines(params, false);
      };
      Chart.prototype.groups = function(groups) {
        var $$ = this.internal, config = $$.config;
        if (isUndefined(groups)) {
          return config.data_groups;
        }
        config.data_groups = groups;
        $$.redraw();
        return config.data_groups;
      };
      Chart.prototype.legend = function() {
      };
      Chart.prototype.legend.show = function(targetIds) {
        var $$ = this.internal;
        $$.showLegend($$.mapToTargetIds(targetIds));
        $$.updateAndRedraw({ withLegend: true });
      };
      Chart.prototype.legend.hide = function(targetIds) {
        var $$ = this.internal;
        $$.hideLegend($$.mapToTargetIds(targetIds));
        $$.updateAndRedraw({ withLegend: false });
      };
      Chart.prototype.load = function(args) {
        var $$ = this.internal, config = $$.config;
        if (args.xs) {
          $$.addXs(args.xs);
        }
        if ("names" in args) {
          Chart.prototype.data.names.bind(this)(args.names);
        }
        if ("classes" in args) {
          Object.keys(args.classes).forEach(function(id2) {
            config.data_classes[id2] = args.classes[id2];
          });
        }
        if ("categories" in args && $$.isCategorized()) {
          config.axis_x_categories = args.categories;
        }
        if ("axes" in args) {
          Object.keys(args.axes).forEach(function(id2) {
            config.data_axes[id2] = args.axes[id2];
          });
        }
        if ("colors" in args) {
          Object.keys(args.colors).forEach(function(id2) {
            config.data_colors[id2] = args.colors[id2];
          });
        }
        if ("cacheIds" in args && $$.hasCaches(args.cacheIds)) {
          $$.load($$.getCaches(args.cacheIds), args.done);
          return;
        }
        if (args.unload) {
          $$.unload($$.mapToTargetIds(args.unload === true ? null : args.unload), function() {
            $$.loadFromArgs(args);
          });
        } else {
          $$.loadFromArgs(args);
        }
      };
      Chart.prototype.unload = function(args) {
        var $$ = this.internal;
        args = args || {};
        if (args instanceof Array) {
          args = { ids: args };
        } else if (typeof args === "string") {
          args = { ids: [args] };
        }
        $$.unload($$.mapToTargetIds(args.ids), function() {
          $$.redraw({
            withUpdateOrgXDomain: true,
            withUpdateXDomain: true,
            withLegend: true
          });
          if (args.done) {
            args.done();
          }
        });
      };
      Chart.prototype.pie = function() {
      };
      Chart.prototype.pie.padAngle = function(padAngle) {
        if (padAngle === void 0) {
          return this.internal.config.pie_padAngle;
        }
        this.internal.config.pie_padAngle = padAngle;
        this.flush();
      };
      Chart.prototype.regions = function(regions) {
        var $$ = this.internal, config = $$.config;
        if (!regions) {
          return config.regions;
        }
        config.regions = regions;
        $$.redrawWithoutRescale();
        return config.regions;
      };
      Chart.prototype.regions.add = function(regions) {
        var $$ = this.internal, config = $$.config;
        if (!regions) {
          return config.regions;
        }
        config.regions = config.regions.concat(regions);
        $$.redrawWithoutRescale();
        return config.regions;
      };
      Chart.prototype.regions.remove = function(options) {
        var $$ = this.internal, config = $$.config, duration, classes, regions;
        options = options || {};
        duration = getOption(options, "duration", config.transition_duration);
        classes = getOption(options, "classes", [CLASS.region]);
        regions = $$.main.select("." + CLASS.regions).selectAll(classes.map(function(c4) {
          return "." + c4;
        }));
        (duration ? regions.transition().duration(duration) : regions).style("opacity", 0).remove();
        config.regions = config.regions.filter(function(region) {
          var found = false;
          if (!region["class"]) {
            return true;
          }
          region["class"].split(" ").forEach(function(c4) {
            if (classes.indexOf(c4) >= 0) {
              found = true;
            }
          });
          return !found;
        });
        return config.regions;
      };
      Chart.prototype.selected = function(targetId) {
        var $$ = this.internal, d3 = $$.d3;
        return $$.main.selectAll("." + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll("." + CLASS.shape).filter(function() {
          return d3.select(this).classed(CLASS.SELECTED);
        }).nodes().map(function(d) {
          var data = d.__data__;
          return data.data ? data.data : data;
        });
      };
      Chart.prototype.select = function(ids, indices, resetOther) {
        var $$ = this.internal, d3 = $$.d3, config = $$.config;
        if (!config.data_selection_enabled) {
          return;
        }
        $$.main.selectAll("." + CLASS.shapes).selectAll("." + CLASS.shape).each(function(d, i) {
          var shape = d3.select(this), id2 = d.data ? d.data.id : d.id, toggle = $$.getToggle(this, d).bind($$), isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id2) >= 0, isTargetIndex = !indices || indices.indexOf(i) >= 0, isSelected = shape.classed(CLASS.SELECTED);
          if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
          }
          if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d) && !isSelected) {
              toggle(true, shape.classed(CLASS.SELECTED, true), d, i);
            }
          } else if (isDefined(resetOther) && resetOther) {
            if (isSelected) {
              toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
            }
          }
        });
      };
      Chart.prototype.unselect = function(ids, indices) {
        var $$ = this.internal, d3 = $$.d3, config = $$.config;
        if (!config.data_selection_enabled) {
          return;
        }
        $$.main.selectAll("." + CLASS.shapes).selectAll("." + CLASS.shape).each(function(d, i) {
          var shape = d3.select(this), id2 = d.data ? d.data.id : d.id, toggle = $$.getToggle(this, d).bind($$), isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id2) >= 0, isTargetIndex = !indices || indices.indexOf(i) >= 0, isSelected = shape.classed(CLASS.SELECTED);
          if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
          }
          if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d)) {
              if (isSelected) {
                toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
              }
            }
          }
        });
      };
      Chart.prototype.show = function(targetIds, options) {
        var $$ = this.internal, targets;
        targetIds = $$.mapToTargetIds(targetIds);
        options = options || {};
        $$.removeHiddenTargetIds(targetIds);
        targets = $$.svg.selectAll($$.selectorTargets(targetIds));
        targets.transition().style("display", isIE() ? "block" : "initial", "important").style("opacity", 1, "important").call($$.endall, function() {
          targets.style("opacity", null).style("opacity", 1);
        });
        if (options.withLegend) {
          $$.showLegend(targetIds);
        }
        $$.redraw({
          withUpdateOrgXDomain: true,
          withUpdateXDomain: true,
          withLegend: true
        });
      };
      Chart.prototype.hide = function(targetIds, options) {
        var $$ = this.internal, targets;
        targetIds = $$.mapToTargetIds(targetIds);
        options = options || {};
        $$.addHiddenTargetIds(targetIds);
        targets = $$.svg.selectAll($$.selectorTargets(targetIds));
        targets.transition().style("opacity", 0, "important").call($$.endall, function() {
          targets.style("opacity", null).style("opacity", 0);
          targets.style("display", "none");
        });
        if (options.withLegend) {
          $$.hideLegend(targetIds);
        }
        $$.redraw({
          withUpdateOrgXDomain: true,
          withUpdateXDomain: true,
          withLegend: true
        });
      };
      Chart.prototype.toggle = function(targetIds, options) {
        var that = this, $$ = this.internal;
        $$.mapToTargetIds(targetIds).forEach(function(targetId) {
          $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);
        });
      };
      Chart.prototype.subchart = function() {
      };
      Chart.prototype.subchart.isShown = function() {
        var $$ = this.internal;
        return $$.config.subchart_show;
      };
      Chart.prototype.subchart.show = function() {
        var $$ = this.internal;
        if ($$.config.subchart_show) {
          return;
        }
        $$.config.subchart_show = true;
        $$.initSubchart();
        $$.updateDimension();
        $$.initSubchartBrush();
        $$.updateTargetsForSubchart($$.getTargets());
        $$.mapToIds($$.data.targets).forEach(function(id2) {
          $$.withoutFadeIn[id2] = false;
        });
        $$.updateAndRedraw();
        $$.showTargets();
      };
      Chart.prototype.subchart.hide = function() {
        var $$ = this.internal;
        if (!$$.config.subchart_show) {
          return;
        }
        $$.config.subchart_show = false;
        $$.removeSubchart();
        $$.redraw();
      };
      Chart.prototype.tooltip = function() {
      };
      Chart.prototype.tooltip.show = function(args) {
        var $$ = this.internal, targets, data, mouse = {};
        if (args.mouse) {
          mouse = args.mouse;
        } else {
          if (args.data) {
            data = args.data;
          } else if (typeof args.x !== "undefined") {
            if (args.id) {
              targets = $$.data.targets.filter(function(t) {
                return t.id === args.id;
              });
            } else {
              targets = $$.data.targets;
            }
            data = $$.filterByX(targets, args.x).slice(0, 1)[0];
          }
          mouse = data ? $$.getMousePosition(data) : null;
        }
        $$.dispatchEvent("mousemove", mouse);
        $$.config.tooltip_onshow.call($$, data);
      };
      Chart.prototype.tooltip.hide = function() {
        this.internal.dispatchEvent("mouseout", 0);
        this.internal.config.tooltip_onhide.call(this);
      };
      Chart.prototype.transform = function(type2, targetIds) {
        var $$ = this.internal, options = ["pie", "donut"].indexOf(type2) >= 0 ? { withTransform: true } : null;
        $$.transformTo(targetIds, type2, options);
      };
      ChartInternal.prototype.transformTo = function(targetIds, type2, optionsForRedraw) {
        var $$ = this, withTransitionForAxis = !$$.hasArcType(), options = optionsForRedraw || {
          withTransitionForAxis
        };
        options.withTransitionForTransform = false;
        $$.transiting = false;
        $$.setTargetType(targetIds, type2);
        $$.updateTargets($$.data.targets);
        $$.updateAndRedraw(options);
      };
      Chart.prototype.x = function(x5) {
        var $$ = this.internal;
        if (arguments.length) {
          $$.updateTargetX($$.data.targets, x5);
          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        }
        return $$.data.xs;
      };
      Chart.prototype.xs = function(xs) {
        var $$ = this.internal;
        if (arguments.length) {
          $$.updateTargetXs($$.data.targets, xs);
          $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        }
        return $$.data.xs;
      };
      Chart.prototype.zoom = function(domain) {
        var $$ = this.internal;
        if (domain) {
          if ($$.isTimeSeries()) {
            domain = domain.map(function(x5) {
              return $$.parseDate(x5);
            });
          }
          if ($$.config.subchart_show) {
            $$.brush.selectionAsValue(domain, true);
          } else {
            $$.updateXDomain(null, true, false, false, domain);
            $$.redraw({ withY: $$.config.zoom_rescale, withSubchart: false });
          }
          $$.config.zoom_onzoom.call(this, $$.x.orgDomain());
          return domain;
        } else {
          return $$.x.domain();
        }
      };
      Chart.prototype.zoom.enable = function(enabled) {
        var $$ = this.internal;
        $$.config.zoom_enabled = enabled;
        $$.updateAndRedraw();
      };
      Chart.prototype.unzoom = function() {
        var $$ = this.internal;
        if ($$.config.subchart_show) {
          $$.brush.clear();
        } else {
          $$.updateXDomain(null, true, false, false, $$.subX.domain());
          $$.redraw({ withY: $$.config.zoom_rescale, withSubchart: false });
        }
      };
      Chart.prototype.zoom.max = function(max3) {
        var $$ = this.internal, config = $$.config, d3 = $$.d3;
        if (max3 === 0 || max3) {
          config.zoom_x_max = d3.max([$$.orgXDomain[1], max3]);
        } else {
          return config.zoom_x_max;
        }
      };
      Chart.prototype.zoom.min = function(min2) {
        var $$ = this.internal, config = $$.config, d3 = $$.d3;
        if (min2 === 0 || min2) {
          config.zoom_x_min = d3.min([$$.orgXDomain[0], min2]);
        } else {
          return config.zoom_x_min;
        }
      };
      Chart.prototype.zoom.range = function(range2) {
        if (arguments.length) {
          if (isDefined(range2.max)) {
            this.domain.max(range2.max);
          }
          if (isDefined(range2.min)) {
            this.domain.min(range2.min);
          }
        } else {
          return {
            max: this.domain.max(),
            min: this.domain.min()
          };
        }
      };
      ChartInternal.prototype.initPie = function() {
        var $$ = this, d3 = $$.d3;
        $$.pie = d3.pie().padAngle(this.getPadAngle.bind(this)).value(function(d) {
          return d.values.reduce(function(a2, b) {
            return a2 + b.value;
          }, 0);
        });
        var orderFct = $$.getOrderFunction();
        if (orderFct && ($$.isOrderAsc() || $$.isOrderDesc())) {
          var defaultSort_1 = orderFct;
          orderFct = function(t13, t22) {
            return defaultSort_1(t13, t22) * -1;
          };
        }
        $$.pie.sort(orderFct || null);
      };
      ChartInternal.prototype.updateRadius = function() {
        var $$ = this, config = $$.config, w = config.gauge_width || config.donut_width, gaugeArcWidth = $$.filterTargetsToShow($$.data.targets).length * $$.config.gauge_arcs_minWidth;
        $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2 * ($$.hasType("gauge") ? 0.85 : 1);
        $$.radius = $$.radiusExpanded * 0.95;
        $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;
        $$.innerRadius = $$.hasType("donut") || $$.hasType("gauge") ? $$.radius * $$.innerRadiusRatio : 0;
        $$.gaugeArcWidth = w ? w : gaugeArcWidth <= $$.radius - $$.innerRadius ? $$.radius - $$.innerRadius : gaugeArcWidth <= $$.radius ? gaugeArcWidth : $$.radius;
      };
      ChartInternal.prototype.getPadAngle = function() {
        if (this.hasType("pie")) {
          return this.config.pie_padAngle || 0;
        } else if (this.hasType("donut")) {
          return this.config.donut_padAngle || 0;
        } else {
          return 0;
        }
      };
      ChartInternal.prototype.updateArc = function() {
        var $$ = this;
        $$.svgArc = $$.getSvgArc();
        $$.svgArcExpanded = $$.getSvgArcExpanded();
        $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);
      };
      ChartInternal.prototype.updateAngle = function(d) {
        var $$ = this, config = $$.config, found = false, index2 = 0, gMin, gMax, gTic, gValue;
        if (!config) {
          return null;
        }
        $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function(t) {
          if (!found && t.data.id === d.data.id) {
            found = true;
            d = t;
            d.index = index2;
          }
          index2++;
        });
        if (isNaN(d.startAngle)) {
          d.startAngle = 0;
        }
        if (isNaN(d.endAngle)) {
          d.endAngle = d.startAngle;
        }
        if ($$.isGaugeType(d.data)) {
          gMin = config.gauge_min;
          gMax = config.gauge_max;
          gTic = Math.PI * (config.gauge_fullCircle ? 2 : 1) / (gMax - gMin);
          gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : gMax - gMin;
          d.startAngle = config.gauge_startingAngle;
          d.endAngle = d.startAngle + gTic * gValue;
        }
        return found ? d : null;
      };
      ChartInternal.prototype.getSvgArc = function() {
        var $$ = this, hasGaugeType = $$.hasType("gauge"), singleArcWidth = $$.gaugeArcWidth / $$.filterTargetsToShow($$.data.targets).length, arc = $$.d3.arc().outerRadius(function(d) {
          return hasGaugeType ? $$.radius - singleArcWidth * d.index : $$.radius;
        }).innerRadius(function(d) {
          return hasGaugeType ? $$.radius - singleArcWidth * (d.index + 1) : $$.innerRadius;
        }), newArc = function(d, withoutUpdate) {
          var updated;
          if (withoutUpdate) {
            return arc(d);
          }
          updated = $$.updateAngle(d);
          return updated ? arc(updated) : "M 0 0";
        };
        newArc.centroid = arc.centroid;
        return newArc;
      };
      ChartInternal.prototype.getSvgArcExpanded = function(rate) {
        rate = rate || 1;
        var $$ = this, hasGaugeType = $$.hasType("gauge"), singleArcWidth = $$.gaugeArcWidth / $$.filterTargetsToShow($$.data.targets).length, expandWidth = Math.min($$.radiusExpanded * rate - $$.radius, singleArcWidth * 0.8 - (1 - rate) * 100), arc = $$.d3.arc().outerRadius(function(d) {
          return hasGaugeType ? $$.radius - singleArcWidth * d.index + expandWidth : $$.radiusExpanded * rate;
        }).innerRadius(function(d) {
          return hasGaugeType ? $$.radius - singleArcWidth * (d.index + 1) : $$.innerRadius;
        });
        return function(d) {
          var updated = $$.updateAngle(d);
          return updated ? arc(updated) : "M 0 0";
        };
      };
      ChartInternal.prototype.getArc = function(d, withoutUpdate, force) {
        return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : "M 0 0";
      };
      ChartInternal.prototype.transformForArcLabel = function(d) {
        var $$ = this, config = $$.config, updated = $$.updateAngle(d), c4, x5, y5, h, ratio, translate = "", hasGauge = $$.hasType("gauge");
        if (updated && !hasGauge) {
          c4 = this.svgArc.centroid(updated);
          x5 = isNaN(c4[0]) ? 0 : c4[0];
          y5 = isNaN(c4[1]) ? 0 : c4[1];
          h = Math.sqrt(x5 * x5 + y5 * y5);
          if ($$.hasType("donut") && config.donut_label_ratio) {
            ratio = isFunction(config.donut_label_ratio) ? config.donut_label_ratio(d, $$.radius, h) : config.donut_label_ratio;
          } else if ($$.hasType("pie") && config.pie_label_ratio) {
            ratio = isFunction(config.pie_label_ratio) ? config.pie_label_ratio(d, $$.radius, h) : config.pie_label_ratio;
          } else {
            ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;
          }
          translate = "translate(" + x5 * ratio + "," + y5 * ratio + ")";
        } else if (updated && hasGauge && $$.filterTargetsToShow($$.data.targets).length > 1) {
          var y12 = Math.sin(updated.endAngle - Math.PI / 2);
          x5 = Math.cos(updated.endAngle - Math.PI / 2) * ($$.radiusExpanded + 25);
          y5 = y12 * ($$.radiusExpanded + 15 - Math.abs(y12 * 10)) + 3;
          translate = "translate(" + x5 + "," + y5 + ")";
        }
        return translate;
      };
      ChartInternal.prototype.getArcRatio = function(d) {
        return this.getRatio("arc", d);
      };
      ChartInternal.prototype.convertToArcData = function(d) {
        return this.addName({
          id: d.data.id,
          value: d.value,
          ratio: this.getRatio("arc", d),
          index: d.index
        });
      };
      ChartInternal.prototype.textForArcLabel = function(d) {
        var $$ = this, updated, value, ratio, id2, format2;
        if (!$$.shouldShowArcLabel()) {
          return "";
        }
        updated = $$.updateAngle(d);
        value = updated ? updated.value : null;
        ratio = $$.getRatio("arc", updated);
        id2 = d.data.id;
        if (!$$.hasType("gauge") && !$$.meetsArcLabelThreshold(ratio)) {
          return "";
        }
        format2 = $$.getArcLabelFormat();
        return format2 ? format2(value, ratio, id2) : $$.defaultArcValueFormat(value, ratio);
      };
      ChartInternal.prototype.textForGaugeMinMax = function(value, isMax) {
        var $$ = this, format2 = $$.getGaugeLabelExtents();
        return format2 ? format2(value, isMax) : value;
      };
      ChartInternal.prototype.expandArc = function(targetIds) {
        var $$ = this, interval2;
        if ($$.transiting) {
          interval2 = window.setInterval(function() {
            if (!$$.transiting) {
              window.clearInterval(interval2);
              if ($$.legend.selectAll(".c3-legend-item-focused").size() > 0) {
                $$.expandArc(targetIds);
              }
            }
          }, 10);
          return;
        }
        targetIds = $$.mapToTargetIds(targetIds);
        $$.svg.selectAll($$.selectorTargets(targetIds, "." + CLASS.chartArc)).each(function(d) {
          if (!$$.shouldExpand(d.data.id)) {
            return;
          }
          $$.d3.select(this).selectAll("path").transition().duration($$.expandDuration(d.data.id)).attr("d", $$.svgArcExpanded).transition().duration($$.expandDuration(d.data.id) * 2).attr("d", $$.svgArcExpandedSub).each(function(d2) {
            if ($$.isDonutType(d2.data)) ;
          });
        });
      };
      ChartInternal.prototype.unexpandArc = function(targetIds) {
        var $$ = this;
        if ($$.transiting) {
          return;
        }
        targetIds = $$.mapToTargetIds(targetIds);
        $$.svg.selectAll($$.selectorTargets(targetIds, "." + CLASS.chartArc)).selectAll("path").transition().duration(function(d) {
          return $$.expandDuration(d.data.id);
        }).attr("d", $$.svgArc);
        $$.svg.selectAll("." + CLASS.arc);
      };
      ChartInternal.prototype.expandDuration = function(id2) {
        var $$ = this, config = $$.config;
        if ($$.isDonutType(id2)) {
          return config.donut_expand_duration;
        } else if ($$.isGaugeType(id2)) {
          return config.gauge_expand_duration;
        } else if ($$.isPieType(id2)) {
          return config.pie_expand_duration;
        } else {
          return 50;
        }
      };
      ChartInternal.prototype.shouldExpand = function(id2) {
        var $$ = this, config = $$.config;
        return $$.isDonutType(id2) && config.donut_expand || $$.isGaugeType(id2) && config.gauge_expand || $$.isPieType(id2) && config.pie_expand;
      };
      ChartInternal.prototype.shouldShowArcLabel = function() {
        var $$ = this, config = $$.config, shouldShow = true;
        if ($$.hasType("donut")) {
          shouldShow = config.donut_label_show;
        } else if ($$.hasType("pie")) {
          shouldShow = config.pie_label_show;
        }
        return shouldShow;
      };
      ChartInternal.prototype.meetsArcLabelThreshold = function(ratio) {
        var $$ = this, config = $$.config, threshold2 = $$.hasType("donut") ? config.donut_label_threshold : config.pie_label_threshold;
        return ratio >= threshold2;
      };
      ChartInternal.prototype.getArcLabelFormat = function() {
        var $$ = this, config = $$.config, format2 = config.pie_label_format;
        if ($$.hasType("gauge")) {
          format2 = config.gauge_label_format;
        } else if ($$.hasType("donut")) {
          format2 = config.donut_label_format;
        }
        return format2;
      };
      ChartInternal.prototype.getGaugeLabelExtents = function() {
        var $$ = this, config = $$.config;
        return config.gauge_label_extents;
      };
      ChartInternal.prototype.getArcTitle = function() {
        var $$ = this;
        return $$.hasType("donut") ? $$.config.donut_title : "";
      };
      ChartInternal.prototype.updateTargetsForArc = function(targets) {
        var $$ = this, main = $$.main, mainPies, mainPieEnter, classChartArc = $$.classChartArc.bind($$), classArcs = $$.classArcs.bind($$), classFocus = $$.classFocus.bind($$);
        mainPies = main.select("." + CLASS.chartArcs).selectAll("." + CLASS.chartArc).data($$.pie(targets)).attr("class", function(d) {
          return classChartArc(d) + classFocus(d.data);
        });
        mainPieEnter = mainPies.enter().append("g").attr("class", classChartArc);
        mainPieEnter.append("g").attr("class", classArcs);
        mainPieEnter.append("text").attr("dy", $$.hasType("gauge") ? "-.1em" : ".35em").style("opacity", 0).style("text-anchor", "middle").style("pointer-events", "none");
      };
      ChartInternal.prototype.initArc = function() {
        var $$ = this;
        $$.arcs = $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.chartArcs).attr("transform", $$.getTranslate("arc"));
        $$.arcs.append("text").attr("class", CLASS.chartArcsTitle).style("text-anchor", "middle").text($$.getArcTitle());
      };
      ChartInternal.prototype.redrawArc = function(duration, durationForExit, withTransform) {
        var $$ = this, d3 = $$.d3, config = $$.config, main = $$.main, arcs, mainArc, arcLabelLines, mainArcLabelLine, hasGaugeType = $$.hasType("gauge");
        arcs = main.selectAll("." + CLASS.arcs).selectAll("." + CLASS.arc).data($$.arcData.bind($$));
        mainArc = arcs.enter().append("path").attr("class", $$.classArc.bind($$)).style("fill", function(d) {
          return $$.color(d.data);
        }).style("cursor", function(d) {
          return config.interaction_enabled && config.data_selection_isselectable(d) ? "pointer" : null;
        }).each(function(d) {
          if ($$.isGaugeType(d.data)) {
            d.startAngle = d.endAngle = config.gauge_startingAngle;
          }
          this._current = d;
        }).merge(arcs);
        if (hasGaugeType) {
          arcLabelLines = main.selectAll("." + CLASS.arcs).selectAll("." + CLASS.arcLabelLine).data($$.arcData.bind($$));
          mainArcLabelLine = arcLabelLines.enter().append("rect").attr("class", function(d) {
            return CLASS.arcLabelLine + " " + CLASS.target + " " + CLASS.target + "-" + d.data.id;
          }).merge(arcLabelLines);
          if ($$.filterTargetsToShow($$.data.targets).length === 1) {
            mainArcLabelLine.style("display", "none");
          } else {
            mainArcLabelLine.style("fill", function(d) {
              return $$.levelColor ? $$.levelColor(d.data.values.reduce(function(total, item) {
                return total + item.value;
              }, 0)) : $$.color(d.data);
            }).style("display", config.gauge_labelLine_show ? "" : "none").each(function(d) {
              var lineLength = 0, lineThickness = 2, x5 = 0, y5 = 0, transform2 = "";
              if ($$.hiddenTargetIds.indexOf(d.data.id) < 0) {
                var updated = $$.updateAngle(d), innerLineLength = $$.gaugeArcWidth / $$.filterTargetsToShow($$.data.targets).length * (updated.index + 1), lineAngle = updated.endAngle - Math.PI / 2, arcInnerRadius2 = $$.radius - innerLineLength, linePositioningAngle = lineAngle - (arcInnerRadius2 === 0 ? 0 : 1 / arcInnerRadius2);
                lineLength = $$.radiusExpanded - $$.radius + innerLineLength;
                x5 = Math.cos(linePositioningAngle) * arcInnerRadius2;
                y5 = Math.sin(linePositioningAngle) * arcInnerRadius2;
                transform2 = "rotate(" + lineAngle * 180 / Math.PI + ", " + x5 + ", " + y5 + ")";
              }
              d3.select(this).attr("x", x5).attr("y", y5).attr("width", lineLength).attr("height", lineThickness).attr("transform", transform2).style("stroke-dasharray", "0, " + (lineLength + lineThickness) + ", 0");
            });
          }
        }
        mainArc.attr("transform", function(d) {
          return !$$.isGaugeType(d.data) && withTransform ? "scale(0)" : "";
        }).on("mouseover", config.interaction_enabled ? function(d) {
          var updated, arcData;
          if ($$.transiting) {
            return;
          }
          updated = $$.updateAngle(d);
          if (updated) {
            arcData = $$.convertToArcData(updated);
            $$.expandArc(updated.data.id);
            $$.api.focus(updated.data.id);
            $$.toggleFocusLegend(updated.data.id, true);
            $$.config.data_onmouseover(arcData, this);
          }
        } : null).on("mousemove", config.interaction_enabled ? function(d) {
          var updated = $$.updateAngle(d), arcData, selectedData;
          if (updated) {
            arcData = $$.convertToArcData(updated), selectedData = [arcData];
            $$.showTooltip(selectedData, this);
          }
        } : null).on("mouseout", config.interaction_enabled ? function(d) {
          var updated, arcData;
          if ($$.transiting) {
            return;
          }
          updated = $$.updateAngle(d);
          if (updated) {
            arcData = $$.convertToArcData(updated);
            $$.unexpandArc(updated.data.id);
            $$.api.revert();
            $$.revertLegend();
            $$.hideTooltip();
            $$.config.data_onmouseout(arcData, this);
          }
        } : null).on("click", config.interaction_enabled ? function(d, i) {
          var updated = $$.updateAngle(d), arcData;
          if (updated) {
            arcData = $$.convertToArcData(updated);
            if ($$.toggleShape) {
              $$.toggleShape(this, arcData, i);
            }
            $$.config.data_onclick.call($$.api, arcData, this);
          }
        } : null).each(function() {
          $$.transiting = true;
        }).transition().duration(duration).attrTween("d", function(d) {
          var updated = $$.updateAngle(d), interpolate;
          if (!updated) {
            return function() {
              return "M 0 0";
            };
          }
          if (isNaN(this._current.startAngle)) {
            this._current.startAngle = 0;
          }
          if (isNaN(this._current.endAngle)) {
            this._current.endAngle = this._current.startAngle;
          }
          interpolate = d3.interpolate(this._current, updated);
          this._current = interpolate(0);
          return function(t) {
            if ($$.config === null) {
              return "M 0 0";
            }
            var interpolated = interpolate(t);
            interpolated.data = d.data;
            return $$.getArc(interpolated, true);
          };
        }).attr("transform", withTransform ? "scale(1)" : "").style("fill", function(d) {
          return $$.levelColor ? $$.levelColor(d.data.values.reduce(function(total, item) {
            return total + item.value;
          }, 0)) : $$.color(d.data.id);
        }).call($$.endall, function() {
          $$.transiting = false;
        });
        arcs.exit().transition().duration(durationForExit).style("opacity", 0).remove();
        main.selectAll("." + CLASS.chartArc).select("text").style("opacity", 0).attr("class", function(d) {
          return $$.isGaugeType(d.data) ? CLASS.gaugeValue : "";
        }).text($$.textForArcLabel.bind($$)).attr("transform", $$.transformForArcLabel.bind($$)).style("font-size", function(d) {
          return $$.isGaugeType(d.data) && $$.filterTargetsToShow($$.data.targets).length === 1 ? Math.round($$.radius / 5) + "px" : "";
        }).transition().duration(duration).style("opacity", function(d) {
          return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0;
        });
        main.select("." + CLASS.chartArcsTitle).style("opacity", $$.hasType("donut") || hasGaugeType ? 1 : 0);
        if (hasGaugeType) {
          var index_1 = 0;
          var backgroundArc = $$.arcs.select("g." + CLASS.chartArcsBackground).selectAll("path." + CLASS.chartArcsBackground).data($$.data.targets);
          backgroundArc.enter().append("path").attr("class", function(d, i) {
            return CLASS.chartArcsBackground + " " + CLASS.chartArcsBackground + "-" + i;
          }).merge(backgroundArc).attr("d", function(d1) {
            if ($$.hiddenTargetIds.indexOf(d1.id) >= 0) {
              return "M 0 0";
            }
            var d = {
              data: [{ value: config.gauge_max }],
              startAngle: config.gauge_startingAngle,
              endAngle: -1 * config.gauge_startingAngle * (config.gauge_fullCircle ? Math.PI : 1),
              index: index_1++
            };
            return $$.getArc(d, true, true);
          });
          backgroundArc.exit().remove();
          $$.arcs.select("." + CLASS.chartArcsGaugeUnit).attr("dy", ".75em").text(config.gauge_label_show ? config.gauge_units : "");
          $$.arcs.select("." + CLASS.chartArcsGaugeMin).attr("dx", -1 * ($$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_min, false) : "");
          $$.arcs.select("." + CLASS.chartArcsGaugeMax).attr("dx", $$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_max, true) : "");
        }
      };
      ChartInternal.prototype.initGauge = function() {
        var arcs = this.arcs;
        if (this.hasType("gauge")) {
          arcs.append("g").attr("class", CLASS.chartArcsBackground);
          arcs.append("text").attr("class", CLASS.chartArcsGaugeUnit).style("text-anchor", "middle").style("pointer-events", "none");
          arcs.append("text").attr("class", CLASS.chartArcsGaugeMin).style("text-anchor", "middle").style("pointer-events", "none");
          arcs.append("text").attr("class", CLASS.chartArcsGaugeMax).style("text-anchor", "middle").style("pointer-events", "none");
        }
      };
      ChartInternal.prototype.getGaugeLabelHeight = function() {
        return this.config.gauge_label_show ? 20 : 0;
      };
      ChartInternal.prototype.addToCache = function(key, value) {
        this.cache["$" + key] = value;
      };
      ChartInternal.prototype.getFromCache = function(key) {
        return this.cache["$" + key];
      };
      ChartInternal.prototype.resetCache = function() {
        var _this = this;
        Object.keys(this.cache).filter(function(key) {
          return /^\$/.test(key);
        }).forEach(function(key) {
          delete _this.cache[key];
        });
      };
      ChartInternal.prototype.hasCaches = function(ids) {
        for (var i = 0; i < ids.length; i++) {
          if (!(ids[i] in this.cache)) {
            return false;
          }
        }
        return true;
      };
      ChartInternal.prototype.addCache = function(id2, target) {
        this.cache[id2] = this.cloneTarget(target);
      };
      ChartInternal.prototype.getCaches = function(ids) {
        var targets = [], i;
        for (i = 0; i < ids.length; i++) {
          if (ids[i] in this.cache) {
            targets.push(this.cloneTarget(this.cache[ids[i]]));
          }
        }
        return targets;
      };
      ChartInternal.prototype.categoryName = function(i) {
        var config = this.config;
        return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;
      };
      ChartInternal.prototype.generateTargetClass = function(targetId) {
        return targetId || targetId === 0 ? ("-" + targetId).replace(/\s/g, "-") : "";
      };
      ChartInternal.prototype.generateClass = function(prefix2, targetId) {
        return " " + prefix2 + " " + prefix2 + this.generateTargetClass(targetId);
      };
      ChartInternal.prototype.classText = function(d) {
        return this.generateClass(CLASS.text, d.index);
      };
      ChartInternal.prototype.classTexts = function(d) {
        return this.generateClass(CLASS.texts, d.id);
      };
      ChartInternal.prototype.classShape = function(d) {
        return this.generateClass(CLASS.shape, d.index);
      };
      ChartInternal.prototype.classShapes = function(d) {
        return this.generateClass(CLASS.shapes, d.id);
      };
      ChartInternal.prototype.classLine = function(d) {
        return this.classShape(d) + this.generateClass(CLASS.line, d.id);
      };
      ChartInternal.prototype.classLines = function(d) {
        return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);
      };
      ChartInternal.prototype.classCircle = function(d) {
        return this.classShape(d) + this.generateClass(CLASS.circle, d.index);
      };
      ChartInternal.prototype.classCircles = function(d) {
        return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);
      };
      ChartInternal.prototype.classBar = function(d) {
        return this.classShape(d) + this.generateClass(CLASS.bar, d.index);
      };
      ChartInternal.prototype.classBars = function(d) {
        return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);
      };
      ChartInternal.prototype.classArc = function(d) {
        return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);
      };
      ChartInternal.prototype.classArcs = function(d) {
        return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);
      };
      ChartInternal.prototype.classArea = function(d) {
        return this.classShape(d) + this.generateClass(CLASS.area, d.id);
      };
      ChartInternal.prototype.classAreas = function(d) {
        return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);
      };
      ChartInternal.prototype.classRegion = function(d, i) {
        return this.generateClass(CLASS.region, i) + " " + ("class" in d ? d["class"] : "");
      };
      ChartInternal.prototype.classEvent = function(d) {
        return this.generateClass(CLASS.eventRect, d.index);
      };
      ChartInternal.prototype.classTarget = function(id2) {
        var $$ = this;
        var additionalClassSuffix = $$.config.data_classes[id2], additionalClass = "";
        if (additionalClassSuffix) {
          additionalClass = " " + CLASS.target + "-" + additionalClassSuffix;
        }
        return $$.generateClass(CLASS.target, id2) + additionalClass;
      };
      ChartInternal.prototype.classFocus = function(d) {
        return this.classFocused(d) + this.classDefocused(d);
      };
      ChartInternal.prototype.classFocused = function(d) {
        return " " + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : "");
      };
      ChartInternal.prototype.classDefocused = function(d) {
        return " " + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : "");
      };
      ChartInternal.prototype.classChartText = function(d) {
        return CLASS.chartText + this.classTarget(d.id);
      };
      ChartInternal.prototype.classChartLine = function(d) {
        return CLASS.chartLine + this.classTarget(d.id);
      };
      ChartInternal.prototype.classChartBar = function(d) {
        return CLASS.chartBar + this.classTarget(d.id);
      };
      ChartInternal.prototype.classChartArc = function(d) {
        return CLASS.chartArc + this.classTarget(d.data.id);
      };
      ChartInternal.prototype.getTargetSelectorSuffix = function(targetId) {
        var targetClass = this.generateTargetClass(targetId);
        if (window.CSS && window.CSS.escape) {
          return window.CSS.escape(targetClass);
        }
        return targetClass.replace(/([?!@#$%^&*()=+,.<>'":;\[\]\/|~`{}\\])/g, "\\$1");
      };
      ChartInternal.prototype.selectorTarget = function(id2, prefix2) {
        return (prefix2 || "") + "." + CLASS.target + this.getTargetSelectorSuffix(id2);
      };
      ChartInternal.prototype.selectorTargets = function(ids, prefix2) {
        var $$ = this;
        ids = ids || [];
        return ids.length ? ids.map(function(id2) {
          return $$.selectorTarget(id2, prefix2);
        }) : null;
      };
      ChartInternal.prototype.selectorLegend = function(id2) {
        return "." + CLASS.legendItem + this.getTargetSelectorSuffix(id2);
      };
      ChartInternal.prototype.selectorLegends = function(ids) {
        var $$ = this;
        return ids && ids.length ? ids.map(function(id2) {
          return $$.selectorLegend(id2);
        }) : null;
      };
      ChartInternal.prototype.getClipPath = function(id2) {
        return "url(" + (isIE(9) ? "" : document.URL.split("#")[0]) + "#" + id2 + ")";
      };
      ChartInternal.prototype.appendClip = function(parent, id2) {
        return parent.append("clipPath").attr("id", id2).append("rect");
      };
      ChartInternal.prototype.getAxisClipX = function(forHorizontal) {
        var left2 = Math.max(30, this.margin.left);
        return forHorizontal ? -(1 + left2) : -(left2 - 1);
      };
      ChartInternal.prototype.getAxisClipY = function(forHorizontal) {
        return forHorizontal ? -20 : -this.margin.top;
      };
      ChartInternal.prototype.getXAxisClipX = function() {
        var $$ = this;
        return $$.getAxisClipX(!$$.config.axis_rotated);
      };
      ChartInternal.prototype.getXAxisClipY = function() {
        var $$ = this;
        return $$.getAxisClipY(!$$.config.axis_rotated);
      };
      ChartInternal.prototype.getYAxisClipX = function() {
        var $$ = this;
        return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);
      };
      ChartInternal.prototype.getYAxisClipY = function() {
        var $$ = this;
        return $$.getAxisClipY($$.config.axis_rotated);
      };
      ChartInternal.prototype.getAxisClipWidth = function(forHorizontal) {
        var $$ = this, left2 = Math.max(30, $$.margin.left), right2 = Math.max(30, $$.margin.right);
        return forHorizontal ? $$.width + 2 + left2 + right2 : $$.margin.left + 20;
      };
      ChartInternal.prototype.getAxisClipHeight = function(forHorizontal) {
        return (forHorizontal ? this.margin.bottom : this.margin.top + this.height) + 20;
      };
      ChartInternal.prototype.getXAxisClipWidth = function() {
        var $$ = this;
        return $$.getAxisClipWidth(!$$.config.axis_rotated);
      };
      ChartInternal.prototype.getXAxisClipHeight = function() {
        var $$ = this;
        return $$.getAxisClipHeight(!$$.config.axis_rotated);
      };
      ChartInternal.prototype.getYAxisClipWidth = function() {
        var $$ = this;
        return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);
      };
      ChartInternal.prototype.getYAxisClipHeight = function() {
        var $$ = this;
        return $$.getAxisClipHeight($$.config.axis_rotated);
      };
      ChartInternal.prototype.generateColor = function() {
        var $$ = this, config = $$.config, d3 = $$.d3, colors = config.data_colors, pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.schemeCategory10, callback = config.data_color, ids = [];
        return function(d) {
          var id2 = d.id || d.data && d.data.id || d, color2;
          if (colors[id2] instanceof Function) {
            color2 = colors[id2](d);
          } else if (colors[id2]) {
            color2 = colors[id2];
          } else {
            if (ids.indexOf(id2) < 0) {
              ids.push(id2);
            }
            color2 = pattern[ids.indexOf(id2) % pattern.length];
            colors[id2] = color2;
          }
          return callback instanceof Function ? callback(color2, d) : color2;
        };
      };
      ChartInternal.prototype.generateLevelColor = function() {
        var $$ = this, config = $$.config, colors = config.color_pattern, threshold2 = config.color_threshold, asValue = threshold2.unit === "value", values = threshold2.values && threshold2.values.length ? threshold2.values : [], max3 = threshold2.max || 100;
        return notEmpty(threshold2) && notEmpty(colors) ? function(value) {
          var i, v, color2 = colors[colors.length - 1];
          for (i = 0; i < values.length; i++) {
            v = asValue ? value : value * 100 / max3;
            if (v < values[i]) {
              color2 = colors[i];
              break;
            }
          }
          return color2;
        } : null;
      };
      ChartInternal.prototype.getDefaultConfig = function() {
        var config = {
          bindto: "#chart",
          svg_classname: void 0,
          size_width: void 0,
          size_height: void 0,
          padding_left: void 0,
          padding_right: void 0,
          padding_top: void 0,
          padding_bottom: void 0,
          resize_auto: true,
          zoom_enabled: false,
          zoom_initialRange: void 0,
          zoom_type: "scroll",
          zoom_disableDefaultBehavior: false,
          zoom_privileged: false,
          zoom_rescale: false,
          zoom_onzoom: function() {
          },
          zoom_onzoomstart: function() {
          },
          zoom_onzoomend: function() {
          },
          zoom_x_min: void 0,
          zoom_x_max: void 0,
          interaction_brighten: true,
          interaction_enabled: true,
          onmouseover: function() {
          },
          onmouseout: function() {
          },
          onresize: function() {
          },
          onresized: function() {
          },
          oninit: function() {
          },
          onrendered: function() {
          },
          transition_duration: 350,
          data_epochs: "epochs",
          data_x: void 0,
          data_xs: {},
          data_xFormat: "%Y-%m-%d",
          data_xLocaltime: true,
          data_xSort: true,
          data_idConverter: function(id2) {
            return id2;
          },
          data_names: {},
          data_classes: {},
          data_groups: [],
          data_axes: {},
          data_type: void 0,
          data_types: {},
          data_labels: {},
          data_order: "desc",
          data_regions: {},
          data_color: void 0,
          data_colors: {},
          data_hide: false,
          data_filter: void 0,
          data_selection_enabled: false,
          data_selection_grouped: false,
          data_selection_isselectable: function() {
            return true;
          },
          data_selection_multiple: true,
          data_selection_draggable: false,
          data_stack_normalize: false,
          data_onclick: function() {
          },
          data_onmouseover: function() {
          },
          data_onmouseout: function() {
          },
          data_onselected: function() {
          },
          data_onunselected: function() {
          },
          data_url: void 0,
          data_headers: void 0,
          data_json: void 0,
          data_rows: void 0,
          data_columns: void 0,
          data_mimeType: void 0,
          data_keys: void 0,
          // configuration for no plot-able data supplied.
          data_empty_label_text: "",
          // subchart
          subchart_show: false,
          subchart_size_height: 60,
          subchart_axis_x_show: true,
          subchart_onbrush: function() {
          },
          // color
          color_pattern: [],
          color_threshold: {},
          // legend
          legend_show: true,
          legend_hide: false,
          legend_position: "bottom",
          legend_inset_anchor: "top-left",
          legend_inset_x: 10,
          legend_inset_y: 0,
          legend_inset_step: void 0,
          legend_item_onclick: void 0,
          legend_item_onmouseover: void 0,
          legend_item_onmouseout: void 0,
          legend_equally: false,
          legend_padding: 0,
          legend_item_tile_width: 10,
          legend_item_tile_height: 10,
          // axis
          axis_rotated: false,
          axis_x_show: true,
          axis_x_type: "indexed",
          axis_x_localtime: true,
          axis_x_categories: [],
          axis_x_tick_centered: false,
          axis_x_tick_format: void 0,
          axis_x_tick_culling: {},
          axis_x_tick_culling_max: 10,
          axis_x_tick_count: void 0,
          axis_x_tick_fit: true,
          axis_x_tick_values: null,
          axis_x_tick_rotate: 0,
          axis_x_tick_outer: true,
          axis_x_tick_multiline: true,
          axis_x_tick_multilineMax: 0,
          axis_x_tick_width: null,
          axis_x_max: void 0,
          axis_x_min: void 0,
          axis_x_padding: {},
          axis_x_height: void 0,
          axis_x_selection: void 0,
          axis_x_label: {},
          axis_x_inner: void 0,
          axis_y_show: true,
          axis_y_type: "linear",
          axis_y_max: void 0,
          axis_y_min: void 0,
          axis_y_inverted: false,
          axis_y_center: void 0,
          axis_y_inner: void 0,
          axis_y_label: {},
          axis_y_tick_format: void 0,
          axis_y_tick_outer: true,
          axis_y_tick_values: null,
          axis_y_tick_rotate: 0,
          axis_y_tick_count: void 0,
          axis_y_tick_time_type: void 0,
          axis_y_tick_time_interval: void 0,
          axis_y_padding: {},
          axis_y_default: void 0,
          axis_y2_show: false,
          axis_y2_type: "linear",
          axis_y2_max: void 0,
          axis_y2_min: void 0,
          axis_y2_inverted: false,
          axis_y2_center: void 0,
          axis_y2_inner: void 0,
          axis_y2_label: {},
          axis_y2_tick_format: void 0,
          axis_y2_tick_outer: true,
          axis_y2_tick_values: null,
          axis_y2_tick_count: void 0,
          axis_y2_padding: {},
          axis_y2_default: void 0,
          // grid
          grid_x_show: false,
          grid_x_type: "tick",
          grid_x_lines: [],
          grid_y_show: false,
          // not used
          // grid_y_type: 'tick',
          grid_y_lines: [],
          grid_y_ticks: 10,
          grid_focus_show: true,
          grid_lines_front: true,
          // point - point of each data
          point_show: true,
          point_r: 2.5,
          point_sensitivity: 10,
          point_focus_expand_enabled: true,
          point_focus_expand_r: void 0,
          point_select_r: void 0,
          // line
          line_connectNull: false,
          line_step_type: "step",
          // bar
          bar_width: void 0,
          bar_width_ratio: 0.6,
          bar_width_max: void 0,
          bar_zerobased: true,
          bar_space: 0,
          // area
          area_zerobased: true,
          area_above: false,
          // pie
          pie_label_show: true,
          pie_label_format: void 0,
          pie_label_threshold: 0.05,
          pie_label_ratio: void 0,
          pie_expand: {},
          pie_expand_duration: 50,
          pie_padAngle: 0,
          // gauge
          gauge_fullCircle: false,
          gauge_label_show: true,
          gauge_labelLine_show: true,
          gauge_label_format: void 0,
          gauge_min: 0,
          gauge_max: 100,
          gauge_startingAngle: -1 * Math.PI / 2,
          gauge_label_extents: void 0,
          gauge_units: void 0,
          gauge_width: void 0,
          gauge_arcs_minWidth: 5,
          gauge_expand: {},
          gauge_expand_duration: 50,
          // donut
          donut_label_show: true,
          donut_label_format: void 0,
          donut_label_threshold: 0.05,
          donut_label_ratio: void 0,
          donut_width: void 0,
          donut_title: "",
          donut_expand: {},
          donut_expand_duration: 50,
          donut_padAngle: 0,
          // spline
          spline_interpolation_type: "cardinal",
          // stanford
          stanford_lines: [],
          stanford_regions: [],
          stanford_texts: [],
          stanford_scaleMin: void 0,
          stanford_scaleMax: void 0,
          stanford_scaleWidth: void 0,
          stanford_scaleFormat: void 0,
          stanford_scaleValues: void 0,
          stanford_colors: void 0,
          stanford_padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          },
          // region - region to change style
          regions: [],
          // tooltip - show when mouseover on each data
          tooltip_show: true,
          tooltip_grouped: true,
          tooltip_order: void 0,
          tooltip_format_title: void 0,
          tooltip_format_name: void 0,
          tooltip_format_value: void 0,
          tooltip_horizontal: void 0,
          tooltip_position: void 0,
          tooltip_contents: function(d, defaultTitleFormat, defaultValueFormat, color2) {
            return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color2) : "";
          },
          tooltip_init_show: false,
          tooltip_init_x: 0,
          tooltip_init_position: { top: "0px", left: "50px" },
          tooltip_onshow: function() {
          },
          tooltip_onhide: function() {
          },
          // title
          title_text: void 0,
          title_padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          },
          title_position: "top-center"
        };
        Object.keys(this.additionalConfig).forEach(function(key) {
          config[key] = this.additionalConfig[key];
        }, this);
        return config;
      };
      ChartInternal.prototype.additionalConfig = {};
      ChartInternal.prototype.loadConfig = function(config) {
        var this_config = this.config, target, keys, read;
        function find2() {
          var key = keys.shift();
          if (key && target && typeof target === "object" && key in target) {
            target = target[key];
            return find2();
          } else if (!key) {
            return target;
          } else {
            return void 0;
          }
        }
        Object.keys(this_config).forEach(function(key) {
          target = config;
          keys = key.split("_");
          read = find2();
          if (isDefined(read)) {
            this_config[key] = read;
          }
        });
      };
      ChartInternal.prototype.convertUrlToData = function(url, mimeType, headers, keys, done) {
        var $$ = this, type2 = mimeType ? mimeType : "csv", f, converter;
        if (type2 === "json") {
          f = $$.d3.json;
          converter = $$.convertJsonToData;
        } else if (type2 === "tsv") {
          f = $$.d3.tsv;
          converter = $$.convertXsvToData;
        } else {
          f = $$.d3.csv;
          converter = $$.convertXsvToData;
        }
        f(url, headers).then(function(data) {
          done.call($$, converter.call($$, data, keys));
        }).catch(function(error) {
          throw error;
        });
      };
      ChartInternal.prototype.convertXsvToData = function(xsv) {
        var keys = xsv.columns, rows = xsv;
        if (rows.length === 0) {
          return {
            keys,
            rows: [keys.reduce(function(row, key) {
              var _a;
              return Object.assign(row, (_a = {}, _a[key] = null, _a));
            }, {})]
          };
        } else {
          return { keys, rows: [].concat(xsv) };
        }
      };
      ChartInternal.prototype.convertJsonToData = function(json, keys) {
        var $$ = this, new_rows = [], targetKeys, data;
        if (keys) {
          if (keys.x) {
            targetKeys = keys.value.concat(keys.x);
            $$.config.data_x = keys.x;
          } else {
            targetKeys = keys.value;
          }
          new_rows.push(targetKeys);
          json.forEach(function(o) {
            var new_row = [];
            targetKeys.forEach(function(key) {
              var v = $$.findValueInJson(o, key);
              if (isUndefined(v)) {
                v = null;
              }
              new_row.push(v);
            });
            new_rows.push(new_row);
          });
          data = $$.convertRowsToData(new_rows);
        } else {
          Object.keys(json).forEach(function(key) {
            new_rows.push([key].concat(json[key]));
          });
          data = $$.convertColumnsToData(new_rows);
        }
        return data;
      };
      ChartInternal.prototype.findValueInJson = function(object2, path2) {
        if (path2 in object2) {
          return object2[path2];
        }
        path2 = path2.replace(/\[(\w+)\]/g, ".$1");
        path2 = path2.replace(/^\./, "");
        var pathArray = path2.split(".");
        for (var i = 0; i < pathArray.length; ++i) {
          var k2 = pathArray[i];
          if (k2 in object2) {
            object2 = object2[k2];
          } else {
            return;
          }
        }
        return object2;
      };
      ChartInternal.prototype.convertRowsToData = function(rows) {
        var newRows = [];
        var keys = rows[0];
        for (var i = 1; i < rows.length; i++) {
          var newRow = {};
          for (var j = 0; j < rows[i].length; j++) {
            if (isUndefined(rows[i][j])) {
              throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRow[keys[j]] = rows[i][j];
          }
          newRows.push(newRow);
        }
        return { keys, rows: newRows };
      };
      ChartInternal.prototype.convertColumnsToData = function(columns) {
        var newRows = [];
        var keys = [];
        for (var i = 0; i < columns.length; i++) {
          var key = columns[i][0];
          for (var j = 1; j < columns[i].length; j++) {
            if (isUndefined(newRows[j - 1])) {
              newRows[j - 1] = {};
            }
            if (isUndefined(columns[i][j])) {
              throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRows[j - 1][key] = columns[i][j];
          }
          keys.push(key);
        }
        return { keys, rows: newRows };
      };
      ChartInternal.prototype.convertDataToTargets = function(data, appendXs) {
        var $$ = this, config = $$.config, targets, ids, xs, keys, epochs;
        if (isArray(data)) {
          keys = Object.keys(data[0]);
        } else {
          keys = data.keys;
          data = data.rows;
        }
        xs = keys.filter($$.isX, $$);
        if (!$$.isStanfordGraphType()) {
          ids = keys.filter($$.isNotX, $$);
        } else {
          epochs = keys.filter($$.isEpochs, $$);
          ids = keys.filter($$.isNotXAndNotEpochs, $$);
          if (xs.length !== 1 || epochs.length !== 1 || ids.length !== 1) {
            throw new Error("You must define the 'x' key name and the 'epochs' for Stanford Diagrams");
          }
        }
        ids.forEach(function(id2) {
          var xKey = $$.getXKey(id2);
          if ($$.isCustomX() || $$.isTimeSeries()) {
            if (xs.indexOf(xKey) >= 0) {
              $$.data.xs[id2] = (appendXs && $$.data.xs[id2] ? $$.data.xs[id2] : []).concat(data.map(function(d) {
                return d[xKey];
              }).filter(isValue).map(function(rawX, i) {
                return $$.generateTargetX(rawX, id2, i);
              }));
            } else if (config.data_x) {
              $$.data.xs[id2] = $$.getOtherTargetXs();
            } else if (notEmpty(config.data_xs)) {
              $$.data.xs[id2] = $$.getXValuesOfXKey(xKey, $$.data.targets);
            }
          } else {
            $$.data.xs[id2] = data.map(function(d, i) {
              return i;
            });
          }
        });
        ids.forEach(function(id2) {
          if (!$$.data.xs[id2]) {
            throw new Error('x is not defined for id = "' + id2 + '".');
          }
        });
        targets = ids.map(function(id2, index2) {
          var convertedId = config.data_idConverter(id2);
          return {
            id: convertedId,
            id_org: id2,
            values: data.map(function(d, i) {
              var xKey = $$.getXKey(id2), rawX = d[xKey], value = d[id2] !== null && !isNaN(d[id2]) ? +d[id2] : null, x5, returnData;
              if ($$.isCustomX() && $$.isCategorized() && !isUndefined(rawX)) {
                if (index2 === 0 && i === 0) {
                  config.axis_x_categories = [];
                }
                x5 = config.axis_x_categories.indexOf(rawX);
                if (x5 === -1) {
                  x5 = config.axis_x_categories.length;
                  config.axis_x_categories.push(rawX);
                }
              } else {
                x5 = $$.generateTargetX(rawX, id2, i);
              }
              if (isUndefined(d[id2]) || $$.data.xs[id2].length <= i) {
                x5 = void 0;
              }
              returnData = { x: x5, value, id: convertedId };
              if ($$.isStanfordGraphType()) {
                returnData.epochs = d[epochs];
              }
              return returnData;
            }).filter(function(v) {
              return isDefined(v.x);
            })
          };
        });
        targets.forEach(function(t) {
          var i;
          if (config.data_xSort) {
            t.values = t.values.sort(function(v1, v2) {
              var x12 = v1.x || v1.x === 0 ? v1.x : Infinity, x22 = v2.x || v2.x === 0 ? v2.x : Infinity;
              return x12 - x22;
            });
          }
          i = 0;
          t.values.forEach(function(v) {
            v.index = i++;
          });
          $$.data.xs[t.id].sort(function(v1, v2) {
            return v1 - v2;
          });
        });
        $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);
        $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);
        if (config.data_type) {
          $$.setTargetType($$.mapToIds(targets).filter(function(id2) {
            return !(id2 in config.data_types);
          }), config.data_type);
        }
        targets.forEach(function(d) {
          $$.addCache(d.id_org, d);
        });
        return targets;
      };
      ChartInternal.prototype.isEpochs = function(key) {
        var $$ = this, config = $$.config;
        return config.data_epochs && key === config.data_epochs;
      };
      ChartInternal.prototype.isX = function(key) {
        var $$ = this, config = $$.config;
        return config.data_x && key === config.data_x || notEmpty(config.data_xs) && hasValue(config.data_xs, key);
      };
      ChartInternal.prototype.isNotX = function(key) {
        return !this.isX(key);
      };
      ChartInternal.prototype.isNotXAndNotEpochs = function(key) {
        return !this.isX(key) && !this.isEpochs(key);
      };
      ChartInternal.prototype.isStackNormalized = function() {
        return this.config.data_stack_normalize && this.config.data_groups.length > 0;
      };
      ChartInternal.prototype.isAxisNormalized = function(axisId) {
        var $$ = this;
        if (!$$.isStackNormalized()) {
          return false;
        }
        return $$.data.targets.filter(function(target) {
          return $$.axis.getId(target.id) === axisId;
        }).some(function(target) {
          return $$.isTargetNormalized(target.id);
        });
      };
      ChartInternal.prototype.isTargetNormalized = function(targetId) {
        var $$ = this;
        return $$.isStackNormalized() && $$.config.data_groups.some(function(group) {
          return group.includes(targetId);
        });
      };
      ChartInternal.prototype.getXKey = function(id2) {
        var $$ = this, config = $$.config;
        return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id2] : null;
      };
      ChartInternal.prototype.getTotalPerIndex = function(axisId) {
        var $$ = this;
        if (!$$.isStackNormalized()) {
          return null;
        }
        var cached = $$.getFromCache("getTotalPerIndex");
        if (cached !== void 0) {
          return cached[axisId];
        }
        var sum3 = { y: [], y2: [] };
        $$.data.targets.filter(function(target) {
          return $$.isTargetNormalized(target.id);
        }).filter(function(target) {
          return $$.isTargetToShow(target.id);
        }).forEach(function(target) {
          var sumByAxis = sum3[$$.axis.getId(target.id)];
          target.values.forEach(function(v, i) {
            if (!sumByAxis[i]) {
              sumByAxis[i] = 0;
            }
            sumByAxis[i] += isNumber(v.value) ? v.value : 0;
          });
        });
        $$.addToCache("getTotalPerIndex", sum3);
        return sum3[axisId];
      };
      ChartInternal.prototype.getTotalDataSum = function() {
        var $$ = this;
        var cached = $$.getFromCache("getTotalDataSum");
        if (cached !== void 0) {
          return cached;
        }
        var totalDataSum = flattenArray($$.data.targets.filter(function(target) {
          return $$.isTargetToShow(target.id);
        }).map(function(target) {
          return target.values;
        })).map(function(d) {
          return d.value;
        }).reduce(function(p, c4) {
          return p + c4;
        }, 0);
        $$.addToCache("getTotalDataSum", totalDataSum);
        return totalDataSum;
      };
      ChartInternal.prototype.getXValuesOfXKey = function(key, targets) {
        var $$ = this, xValues, ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];
        ids.forEach(function(id2) {
          if ($$.getXKey(id2) === key) {
            xValues = $$.data.xs[id2];
          }
        });
        return xValues;
      };
      ChartInternal.prototype.getXValue = function(id2, i) {
        var $$ = this;
        return id2 in $$.data.xs && $$.data.xs[id2] && isValue($$.data.xs[id2][i]) ? $$.data.xs[id2][i] : i;
      };
      ChartInternal.prototype.getOtherTargetXs = function() {
        var $$ = this, idsForX = Object.keys($$.data.xs);
        return idsForX.length ? $$.data.xs[idsForX[0]] : null;
      };
      ChartInternal.prototype.getOtherTargetX = function(index2) {
        var xs = this.getOtherTargetXs();
        return xs && index2 < xs.length ? xs[index2] : null;
      };
      ChartInternal.prototype.addXs = function(xs) {
        var $$ = this;
        Object.keys(xs).forEach(function(id2) {
          $$.config.data_xs[id2] = xs[id2];
        });
      };
      ChartInternal.prototype.addName = function(data) {
        var $$ = this, name;
        if (data) {
          name = $$.config.data_names[data.id];
          data.name = name !== void 0 ? name : data.id;
        }
        return data;
      };
      ChartInternal.prototype.getValueOnIndex = function(values, index2) {
        var valueOnIndex = values.filter(function(v) {
          return v.index === index2;
        });
        return valueOnIndex.length ? valueOnIndex[0] : null;
      };
      ChartInternal.prototype.updateTargetX = function(targets, x5) {
        var $$ = this;
        targets.forEach(function(t) {
          t.values.forEach(function(v, i) {
            v.x = $$.generateTargetX(x5[i], t.id, i);
          });
          $$.data.xs[t.id] = x5;
        });
      };
      ChartInternal.prototype.updateTargetXs = function(targets, xs) {
        var $$ = this;
        targets.forEach(function(t) {
          if (xs[t.id]) {
            $$.updateTargetX([t], xs[t.id]);
          }
        });
      };
      ChartInternal.prototype.generateTargetX = function(rawX, id2, index2) {
        var $$ = this, x5;
        if ($$.isTimeSeries()) {
          x5 = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id2, index2));
        } else if ($$.isCustomX() && !$$.isCategorized()) {
          x5 = isValue(rawX) ? +rawX : $$.getXValue(id2, index2);
        } else {
          x5 = index2;
        }
        return x5;
      };
      ChartInternal.prototype.cloneTarget = function(target) {
        return {
          id: target.id,
          id_org: target.id_org,
          values: target.values.map(function(d) {
            return {
              x: d.x,
              value: d.value,
              id: d.id
            };
          })
        };
      };
      ChartInternal.prototype.getMaxDataCount = function() {
        var $$ = this;
        return $$.d3.max($$.data.targets, function(t) {
          return t.values.length;
        });
      };
      ChartInternal.prototype.mapToIds = function(targets) {
        return targets.map(function(d) {
          return d.id;
        });
      };
      ChartInternal.prototype.mapToTargetIds = function(ids) {
        var $$ = this;
        return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);
      };
      ChartInternal.prototype.hasTarget = function(targets, id2) {
        var ids = this.mapToIds(targets), i;
        for (i = 0; i < ids.length; i++) {
          if (ids[i] === id2) {
            return true;
          }
        }
        return false;
      };
      ChartInternal.prototype.isTargetToShow = function(targetId) {
        return this.hiddenTargetIds.indexOf(targetId) < 0;
      };
      ChartInternal.prototype.isLegendToShow = function(targetId) {
        return this.hiddenLegendIds.indexOf(targetId) < 0;
      };
      ChartInternal.prototype.getTargetsToShow = function() {
        var $$ = this;
        return $$.filterTargetsToShow($$.data.targets);
      };
      ChartInternal.prototype.filterTargetsToShow = function(targets) {
        var $$ = this;
        return targets.filter(function(t) {
          return $$.isTargetToShow(t.id);
        });
      };
      ChartInternal.prototype.getTargets = function() {
        var $$ = this;
        return $$.data.targets;
      };
      ChartInternal.prototype.mapTargetsToUniqueXs = function(targets) {
        var $$ = this;
        var xs = $$.d3.set($$.d3.merge(targets.map(function(t) {
          return t.values.map(function(v) {
            return +v.x;
          });
        }))).values();
        xs = $$.isTimeSeries() ? xs.map(function(x5) {
          return /* @__PURE__ */ new Date(+x5);
        }) : xs.map(function(x5) {
          return +x5;
        });
        return xs.sort(function(a2, b) {
          return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
        });
      };
      ChartInternal.prototype.addHiddenTargetIds = function(targetIds) {
        targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
        for (var i = 0; i < targetIds.length; i++) {
          if (this.hiddenTargetIds.indexOf(targetIds[i]) < 0) {
            this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds[i]);
          }
        }
        this.resetCache();
      };
      ChartInternal.prototype.removeHiddenTargetIds = function(targetIds) {
        this.hiddenTargetIds = this.hiddenTargetIds.filter(function(id2) {
          return targetIds.indexOf(id2) < 0;
        });
        this.resetCache();
      };
      ChartInternal.prototype.addHiddenLegendIds = function(targetIds) {
        targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
        for (var i = 0; i < targetIds.length; i++) {
          if (this.hiddenLegendIds.indexOf(targetIds[i]) < 0) {
            this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds[i]);
          }
        }
      };
      ChartInternal.prototype.removeHiddenLegendIds = function(targetIds) {
        this.hiddenLegendIds = this.hiddenLegendIds.filter(function(id2) {
          return targetIds.indexOf(id2) < 0;
        });
      };
      ChartInternal.prototype.getValuesAsIdKeyed = function(targets) {
        var ys = {};
        targets.forEach(function(t) {
          ys[t.id] = [];
          t.values.forEach(function(v) {
            ys[t.id].push(v.value);
          });
        });
        return ys;
      };
      ChartInternal.prototype.checkValueInTargets = function(targets, checker) {
        var ids = Object.keys(targets), i, j, values;
        for (i = 0; i < ids.length; i++) {
          values = targets[ids[i]].values;
          for (j = 0; j < values.length; j++) {
            if (checker(values[j].value)) {
              return true;
            }
          }
        }
        return false;
      };
      ChartInternal.prototype.hasNegativeValueInTargets = function(targets) {
        return this.checkValueInTargets(targets, function(v) {
          return v < 0;
        });
      };
      ChartInternal.prototype.hasPositiveValueInTargets = function(targets) {
        return this.checkValueInTargets(targets, function(v) {
          return v > 0;
        });
      };
      ChartInternal.prototype.isOrderDesc = function() {
        var config = this.config;
        return typeof config.data_order === "string" && config.data_order.toLowerCase() === "desc";
      };
      ChartInternal.prototype.isOrderAsc = function() {
        var config = this.config;
        return typeof config.data_order === "string" && config.data_order.toLowerCase() === "asc";
      };
      ChartInternal.prototype.getOrderFunction = function() {
        var $$ = this, config = $$.config, orderAsc = $$.isOrderAsc(), orderDesc = $$.isOrderDesc();
        if (orderAsc || orderDesc) {
          var reducer = function(p, c4) {
            return p + Math.abs(c4.value);
          };
          return function(t13, t22) {
            var t1Sum = t13.values.reduce(reducer, 0), t2Sum = t22.values.reduce(reducer, 0);
            return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;
          };
        } else if (isFunction(config.data_order)) {
          return config.data_order;
        } else if (isArray(config.data_order)) {
          var order = config.data_order;
          return function(t13, t22) {
            return order.indexOf(t13.id) - order.indexOf(t22.id);
          };
        }
      };
      ChartInternal.prototype.orderTargets = function(targets) {
        var fct = this.getOrderFunction();
        if (fct) {
          targets.sort(fct);
        }
        return targets;
      };
      ChartInternal.prototype.filterByIndex = function(targets, index2) {
        return this.d3.merge(targets.map(function(t) {
          return t.values.filter(function(v) {
            return v.index === index2;
          });
        }));
      };
      ChartInternal.prototype.filterByX = function(targets, x5) {
        return this.d3.merge(targets.map(function(t) {
          return t.values;
        })).filter(function(v) {
          return v.x - x5 === 0;
        });
      };
      ChartInternal.prototype.filterRemoveNull = function(data) {
        return data.filter(function(d) {
          return isValue(d.value);
        });
      };
      ChartInternal.prototype.filterByXDomain = function(targets, xDomain) {
        return targets.map(function(t) {
          return {
            id: t.id,
            id_org: t.id_org,
            values: t.values.filter(function(v) {
              return xDomain[0] <= v.x && v.x <= xDomain[1];
            })
          };
        });
      };
      ChartInternal.prototype.hasDataLabel = function() {
        var config = this.config;
        if (typeof config.data_labels === "boolean" && config.data_labels) {
          return true;
        } else if (typeof config.data_labels === "object" && notEmpty(config.data_labels)) {
          return true;
        }
        return false;
      };
      ChartInternal.prototype.getDataLabelLength = function(min2, max3, key) {
        var $$ = this, lengths = [0, 0], paddingCoef = 1.3;
        $$.selectChart.select("svg").selectAll(".dummy").data([min2, max3]).enter().append("text").text(function(d) {
          return $$.dataLabelFormat(d.id)(d);
        }).each(function(d, i) {
          lengths[i] = getBBox(this)[key] * paddingCoef;
        }).remove();
        return lengths;
      };
      ChartInternal.prototype.isNoneArc = function(d) {
        return this.hasTarget(this.data.targets, d.id);
      };
      ChartInternal.prototype.isArc = function(d) {
        return "data" in d && this.hasTarget(this.data.targets, d.data.id);
      };
      ChartInternal.prototype.findClosestFromTargets = function(targets, pos) {
        var $$ = this;
        var candidates = targets.map(function(t) {
          return $$.findClosest(t.values, pos, $$.config.tooltip_horizontal ? $$.horizontalDistance.bind($$) : $$.dist.bind($$), $$.config.point_sensitivity);
        }).filter(function(v) {
          return v;
        });
        if (candidates.length === 0) {
          return void 0;
        } else if (candidates.length === 1) {
          return candidates[0];
        } else {
          return $$.findClosest(candidates, pos, $$.dist.bind($$));
        }
      };
      ChartInternal.prototype.findClosestFromTargetsByX = function(targets, x5) {
        var closest;
        var diff;
        targets.forEach(function(t) {
          t.values.forEach(function(d) {
            var newDiff = Math.abs(x5 - d.x);
            if (diff === void 0 || newDiff < diff) {
              closest = d;
              diff = newDiff;
            }
          });
        });
        return closest;
      };
      ChartInternal.prototype.findClosest = function(dataPoints, pos, computeDist, minDist) {
        if (minDist === void 0) {
          minDist = Infinity;
        }
        var $$ = this;
        var closest;
        dataPoints.filter(function(v) {
          return v && $$.isBarType(v.id);
        }).forEach(function(v) {
          if (!closest) {
            var shape = $$.main.select("." + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + " ." + CLASS.bar + "-" + v.index).node();
            if ($$.isWithinBar(pos, shape)) {
              closest = v;
            }
          }
        });
        dataPoints.filter(function(v) {
          return v && !$$.isBarType(v.id);
        }).forEach(function(v) {
          var d = computeDist(v, pos);
          if (d < minDist) {
            minDist = d;
            closest = v;
          }
        });
        return closest;
      };
      ChartInternal.prototype.dist = function(data, pos) {
        var $$ = this, config = $$.config, xIndex = config.axis_rotated ? 1 : 0, yIndex = config.axis_rotated ? 0 : 1, y5 = $$.circleY(data, data.index), x5 = $$.x(data.x);
        return Math.sqrt(Math.pow(x5 - pos[xIndex], 2) + Math.pow(y5 - pos[yIndex], 2));
      };
      ChartInternal.prototype.horizontalDistance = function(data, pos) {
        var $$ = this, config = $$.config, xIndex = config.axis_rotated ? 1 : 0, x5 = $$.x(data.x);
        return Math.abs(x5 - pos[xIndex]);
      };
      ChartInternal.prototype.convertValuesToStep = function(values) {
        var converted = [].concat(values), i;
        if (!this.isCategorized()) {
          return values;
        }
        for (i = values.length + 1; 0 < i; i--) {
          converted[i] = converted[i - 1];
        }
        converted[0] = {
          x: converted[0].x - 1,
          value: converted[0].value,
          id: converted[0].id
        };
        converted[values.length + 1] = {
          x: converted[values.length].x + 1,
          value: converted[values.length].value,
          id: converted[values.length].id
        };
        return converted;
      };
      ChartInternal.prototype.getRatio = function(type2, d, asPercent) {
        if (asPercent === void 0) {
          asPercent = false;
        }
        var $$ = this;
        var api = $$.api;
        var ratio = 0;
        if (d && api.data.shown.call(api).length) {
          ratio = d.ratio || d.value;
          if (type2 === "arc") {
            if ($$.hasType("gauge")) {
              ratio = (d.endAngle - d.startAngle) / (Math.PI * ($$.config.gauge_fullCircle ? 2 : 1));
            } else {
              var total = $$.getTotalDataSum();
              ratio = d.value / total;
            }
          } else if (type2 === "index") {
            var total = $$.getTotalPerIndex($$.axis.getId(d.id));
            d.ratio = isNumber(d.value) && total && total[d.index] > 0 ? d.value / total[d.index] : 0;
            ratio = d.ratio;
          }
        }
        return asPercent && ratio ? ratio * 100 : ratio;
      };
      ChartInternal.prototype.updateDataAttributes = function(name, attrs) {
        var $$ = this, config = $$.config, current = config["data_" + name];
        if (typeof attrs === "undefined") {
          return current;
        }
        Object.keys(attrs).forEach(function(id2) {
          current[id2] = attrs[id2];
        });
        $$.redraw({
          withLegend: true
        });
        return current;
      };
      ChartInternal.prototype.load = function(targets, args) {
        var $$ = this;
        if (targets) {
          if (args.filter) {
            targets = targets.filter(args.filter);
          }
          if (args.type || args.types) {
            targets.forEach(function(t) {
              var type2 = args.types && args.types[t.id] ? args.types[t.id] : args.type;
              $$.setTargetType(t.id, type2);
            });
          }
          $$.data.targets.forEach(function(d) {
            for (var i = 0; i < targets.length; i++) {
              if (d.id === targets[i].id) {
                d.values = targets[i].values;
                targets.splice(i, 1);
                break;
              }
            }
          });
          $$.data.targets = $$.data.targets.concat(targets);
        }
        $$.updateTargets($$.data.targets);
        $$.redraw({
          withUpdateOrgXDomain: true,
          withUpdateXDomain: true,
          withLegend: true
        });
        if (args.done) {
          args.done();
        }
      };
      ChartInternal.prototype.loadFromArgs = function(args) {
        var $$ = this;
        $$.resetCache();
        if (args.data) {
          $$.load($$.convertDataToTargets(args.data), args);
        } else if (args.url) {
          $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function(data) {
            $$.load($$.convertDataToTargets(data), args);
          });
        } else if (args.json) {
          $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);
        } else if (args.rows) {
          $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);
        } else if (args.columns) {
          $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);
        } else {
          $$.load(null, args);
        }
      };
      ChartInternal.prototype.unload = function(targetIds, done) {
        var $$ = this;
        $$.resetCache();
        if (!done) {
          done = function() {
          };
        }
        targetIds = targetIds.filter(function(id2) {
          return $$.hasTarget($$.data.targets, id2);
        });
        if (!targetIds || targetIds.length === 0) {
          done();
          return;
        }
        $$.svg.selectAll(targetIds.map(function(id2) {
          return $$.selectorTarget(id2);
        })).transition().style("opacity", 0).remove().call($$.endall, done);
        targetIds.forEach(function(id2) {
          $$.withoutFadeIn[id2] = false;
          if ($$.legend) {
            $$.legend.selectAll("." + CLASS.legendItem + $$.getTargetSelectorSuffix(id2)).remove();
          }
          $$.data.targets = $$.data.targets.filter(function(t) {
            return t.id !== id2;
          });
        });
      };
      ChartInternal.prototype.getYDomainMin = function(targets) {
        var $$ = this, config = $$.config, ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets), j, k2, baseId, idsInGroup, id2, hasNegativeValue;
        if (config.data_groups.length > 0) {
          hasNegativeValue = $$.hasNegativeValueInTargets(targets);
          for (j = 0; j < config.data_groups.length; j++) {
            idsInGroup = config.data_groups[j].filter(function(id3) {
              return ids.indexOf(id3) >= 0;
            });
            if (idsInGroup.length === 0) {
              continue;
            }
            baseId = idsInGroup[0];
            if (hasNegativeValue && ys[baseId]) {
              ys[baseId].forEach(function(v, i) {
                ys[baseId][i] = v < 0 ? v : 0;
              });
            }
            for (k2 = 1; k2 < idsInGroup.length; k2++) {
              id2 = idsInGroup[k2];
              if (!ys[id2]) {
                continue;
              }
              ys[id2].forEach(function(v, i) {
                if ($$.axis.getId(id2) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {
                  ys[baseId][i] += +v;
                }
              });
            }
          }
        }
        return $$.d3.min(Object.keys(ys).map(function(key) {
          return $$.d3.min(ys[key]);
        }));
      };
      ChartInternal.prototype.getYDomainMax = function(targets) {
        var $$ = this, config = $$.config, ids = $$.mapToIds(targets), ys = $$.getValuesAsIdKeyed(targets), j, k2, baseId, idsInGroup, id2, hasPositiveValue;
        if (config.data_groups.length > 0) {
          hasPositiveValue = $$.hasPositiveValueInTargets(targets);
          for (j = 0; j < config.data_groups.length; j++) {
            idsInGroup = config.data_groups[j].filter(function(id3) {
              return ids.indexOf(id3) >= 0;
            });
            if (idsInGroup.length === 0) {
              continue;
            }
            baseId = idsInGroup[0];
            if (hasPositiveValue && ys[baseId]) {
              ys[baseId].forEach(function(v, i) {
                ys[baseId][i] = v > 0 ? v : 0;
              });
            }
            for (k2 = 1; k2 < idsInGroup.length; k2++) {
              id2 = idsInGroup[k2];
              if (!ys[id2]) {
                continue;
              }
              ys[id2].forEach(function(v, i) {
                if ($$.axis.getId(id2) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {
                  ys[baseId][i] += +v;
                }
              });
            }
          }
        }
        return $$.d3.max(Object.keys(ys).map(function(key) {
          return $$.d3.max(ys[key]);
        }));
      };
      ChartInternal.prototype.getYDomain = function(targets, axisId, xDomain) {
        var $$ = this, config = $$.config;
        if ($$.isAxisNormalized(axisId)) {
          return [0, 100];
        }
        var targetsByAxisId = targets.filter(function(t) {
          return $$.axis.getId(t.id) === axisId;
        }), yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId, yMin = axisId === "y2" ? config.axis_y2_min : config.axis_y_min, yMax = axisId === "y2" ? config.axis_y2_max : config.axis_y_max, yDomainMin = $$.getYDomainMin(yTargets), yDomainMax = $$.getYDomainMax(yTargets), domain, domainLength, padding_top, padding_bottom, center2 = axisId === "y2" ? config.axis_y2_center : config.axis_y_center, yDomainAbs, lengths, diff, ratio, isAllPositive, isAllNegative, isZeroBased = $$.hasType("bar", yTargets) && config.bar_zerobased || $$.hasType("area", yTargets) && config.area_zerobased, isInverted = axisId === "y2" ? config.axis_y2_inverted : config.axis_y_inverted, showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated, showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;
        yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? yDomainMin < yMax ? yDomainMin : yMax - 10 : yDomainMin;
        yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? yMin < yDomainMax ? yDomainMax : yMin + 10 : yDomainMax;
        if (yTargets.length === 0) {
          return axisId === "y2" ? $$.y2.domain() : $$.y.domain();
        }
        if (isNaN(yDomainMin)) {
          yDomainMin = 0;
        }
        if (isNaN(yDomainMax)) {
          yDomainMax = yDomainMin;
        }
        if (yDomainMin === yDomainMax) {
          yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;
        }
        isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;
        isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;
        if (isValue(yMin) && isAllPositive || isValue(yMax) && isAllNegative) {
          isZeroBased = false;
        }
        if (isZeroBased) {
          if (isAllPositive) {
            yDomainMin = 0;
          }
          if (isAllNegative) {
            yDomainMax = 0;
          }
        }
        domainLength = Math.abs(yDomainMax - yDomainMin);
        padding_top = padding_bottom = domainLength * 0.1;
        if (typeof center2 !== "undefined") {
          yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));
          yDomainMax = center2 + yDomainAbs;
          yDomainMin = center2 - yDomainAbs;
        }
        if (showHorizontalDataLabel) {
          lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, "width");
          diff = diffDomain($$.y.range());
          ratio = [lengths[0] / diff, lengths[1] / diff];
          padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));
          padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));
        } else if (showVerticalDataLabel) {
          lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, "height");
          var pixelsToAxisPadding = $$.getY(
            config["axis_" + axisId + "_type"],
            // input domain as pixels
            [0, config.axis_rotated ? $$.width : $$.height],
            // output range as axis padding
            [0, domainLength]
          );
          padding_top += pixelsToAxisPadding(lengths[1]);
          padding_bottom += pixelsToAxisPadding(lengths[0]);
        }
        if (axisId === "y" && notEmpty(config.axis_y_padding)) {
          padding_top = $$.axis.getPadding(config.axis_y_padding, "top", padding_top, domainLength);
          padding_bottom = $$.axis.getPadding(config.axis_y_padding, "bottom", padding_bottom, domainLength);
        }
        if (axisId === "y2" && notEmpty(config.axis_y2_padding)) {
          padding_top = $$.axis.getPadding(config.axis_y2_padding, "top", padding_top, domainLength);
          padding_bottom = $$.axis.getPadding(config.axis_y2_padding, "bottom", padding_bottom, domainLength);
        }
        if (isZeroBased) {
          if (isAllPositive) {
            padding_bottom = yDomainMin;
          }
          if (isAllNegative) {
            padding_top = -yDomainMax;
          }
        }
        domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];
        return isInverted ? domain.reverse() : domain;
      };
      ChartInternal.prototype.getXDomainMin = function(targets) {
        var $$ = this, config = $$.config;
        return isDefined(config.axis_x_min) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min : $$.d3.min(targets, function(t) {
          return $$.d3.min(t.values, function(v) {
            return v.x;
          });
        });
      };
      ChartInternal.prototype.getXDomainMax = function(targets) {
        var $$ = this, config = $$.config;
        return isDefined(config.axis_x_max) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max : $$.d3.max(targets, function(t) {
          return $$.d3.max(t.values, function(v) {
            return v.x;
          });
        });
      };
      ChartInternal.prototype.getXDomainPadding = function(domain) {
        var $$ = this, config = $$.config, diff = domain[1] - domain[0], maxDataCount, padding, paddingLeft, paddingRight;
        if ($$.isCategorized()) {
          padding = 0;
        } else if ($$.hasType("bar")) {
          maxDataCount = $$.getMaxDataCount();
          padding = maxDataCount > 1 ? diff / (maxDataCount - 1) / 2 : 0.5;
        } else {
          padding = diff * 0.01;
        }
        if (typeof config.axis_x_padding === "object" && notEmpty(config.axis_x_padding)) {
          paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;
          paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;
        } else if (typeof config.axis_x_padding === "number") {
          paddingLeft = paddingRight = config.axis_x_padding;
        } else {
          paddingLeft = paddingRight = padding;
        }
        return { left: paddingLeft, right: paddingRight };
      };
      ChartInternal.prototype.getXDomain = function(targets) {
        var $$ = this, xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)], firstX = xDomain[0], lastX = xDomain[1], padding = $$.getXDomainPadding(xDomain), min2 = 0, max3 = 0;
        if (firstX - lastX === 0 && !$$.isCategorized()) {
          if ($$.isTimeSeries()) {
            firstX = new Date(firstX.getTime() * 0.5);
            lastX = new Date(lastX.getTime() * 1.5);
          } else {
            firstX = firstX === 0 ? 1 : firstX * 0.5;
            lastX = lastX === 0 ? -1 : lastX * 1.5;
          }
        }
        if (firstX || firstX === 0) {
          min2 = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;
        }
        if (lastX || lastX === 0) {
          max3 = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;
        }
        return [min2, max3];
      };
      ChartInternal.prototype.updateXDomain = function(targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {
        var $$ = this, config = $$.config;
        if (withUpdateOrgXDomain) {
          $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));
          $$.orgXDomain = $$.x.domain();
          if (config.zoom_enabled) {
            $$.zoom.update();
          }
          $$.subX.domain($$.x.domain());
          if ($$.brush) {
            $$.brush.updateScale($$.subX);
          }
        }
        if (withUpdateXDomain) {
          $$.x.domain(domain ? domain : !$$.brush || $$.brush.empty() ? $$.orgXDomain : $$.brush.selectionAsValue());
        }
        if (withTrim) {
          $$.x.domain($$.trimXDomain($$.x.orgDomain()));
        }
        return $$.x.domain();
      };
      ChartInternal.prototype.trimXDomain = function(domain) {
        var zoomDomain = this.getZoomDomain(), min2 = zoomDomain[0], max3 = zoomDomain[1];
        if (domain[0] <= min2) {
          domain[1] = +domain[1] + (min2 - domain[0]);
          domain[0] = min2;
        }
        if (max3 <= domain[1]) {
          domain[0] = +domain[0] - (domain[1] - max3);
          domain[1] = max3;
        }
        return domain;
      };
      ChartInternal.prototype.drag = function(mouse) {
        var $$ = this, config = $$.config, main = $$.main, d3 = $$.d3;
        var sx, sy, mx, my, minX, maxX, minY, maxY2;
        if ($$.hasArcType()) {
          return;
        }
        if (!config.data_selection_enabled) {
          return;
        }
        if (!config.data_selection_multiple) {
          return;
        }
        sx = $$.dragStart[0];
        sy = $$.dragStart[1];
        mx = mouse[0];
        my = mouse[1];
        minX = Math.min(sx, mx);
        maxX = Math.max(sx, mx);
        minY = config.data_selection_grouped ? $$.margin.top : Math.min(sy, my);
        maxY2 = config.data_selection_grouped ? $$.height : Math.max(sy, my);
        main.select("." + CLASS.dragarea).attr("x", minX).attr("y", minY).attr("width", maxX - minX).attr("height", maxY2 - minY);
        main.selectAll("." + CLASS.shapes).selectAll("." + CLASS.shape).each(function(d, i) {
          if (!config.data_selection_isselectable(d)) {
            return;
          }
          var shape = d3.select(this), isSelected = shape.classed(CLASS.SELECTED), isIncluded = shape.classed(CLASS.INCLUDED), _x, _y, _w, _h, toggle, isWithin = false, box;
          if (shape.classed(CLASS.circle)) {
            _x = shape.attr("cx") * 1;
            _y = shape.attr("cy") * 1;
            toggle = $$.togglePoint;
            isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY2;
          } else if (shape.classed(CLASS.bar)) {
            box = getPathBox(this);
            _x = box.x;
            _y = box.y;
            _w = box.width;
            _h = box.height;
            toggle = $$.togglePath;
            isWithin = !(maxX < _x || _x + _w < minX) && !(maxY2 < _y || _y + _h < minY);
          } else {
            return;
          }
          if (isWithin ^ isIncluded) {
            shape.classed(CLASS.INCLUDED, !isIncluded);
            shape.classed(CLASS.SELECTED, !isSelected);
            toggle.call($$, !isSelected, shape, d, i);
          }
        });
      };
      ChartInternal.prototype.dragstart = function(mouse) {
        var $$ = this, config = $$.config;
        if ($$.hasArcType()) {
          return;
        }
        if (!config.data_selection_enabled) {
          return;
        }
        $$.dragStart = mouse;
        $$.main.select("." + CLASS.chart).append("rect").attr("class", CLASS.dragarea).style("opacity", 0.1);
        $$.dragging = true;
      };
      ChartInternal.prototype.dragend = function() {
        var $$ = this, config = $$.config;
        if ($$.hasArcType()) {
          return;
        }
        if (!config.data_selection_enabled) {
          return;
        }
        $$.main.select("." + CLASS.dragarea).transition().duration(100).style("opacity", 0).remove();
        $$.main.selectAll("." + CLASS.shape).classed(CLASS.INCLUDED, false);
        $$.dragging = false;
      };
      ChartInternal.prototype.getYFormat = function(forArc) {
        var $$ = this, formatForY = forArc && !$$.hasType("gauge") ? $$.defaultArcValueFormat : $$.yFormat, formatForY2 = forArc && !$$.hasType("gauge") ? $$.defaultArcValueFormat : $$.y2Format;
        return function(v, ratio, id2) {
          var format2 = $$.axis.getId(id2) === "y2" ? formatForY2 : formatForY;
          return format2.call($$, v, ratio);
        };
      };
      ChartInternal.prototype.yFormat = function(v) {
        var $$ = this, config = $$.config, format2 = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;
        return format2(v);
      };
      ChartInternal.prototype.y2Format = function(v) {
        var $$ = this, config = $$.config, format2 = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;
        return format2(v);
      };
      ChartInternal.prototype.defaultValueFormat = function(v) {
        return isValue(v) ? +v : "";
      };
      ChartInternal.prototype.defaultArcValueFormat = function(v, ratio) {
        return (ratio * 100).toFixed(1) + "%";
      };
      ChartInternal.prototype.dataLabelFormat = function(targetId) {
        var $$ = this, data_labels = $$.config.data_labels, format2, defaultFormat = function(v) {
          return isValue(v) ? +v : "";
        };
        if (typeof data_labels.format === "function") {
          format2 = data_labels.format;
        } else if (typeof data_labels.format === "object") {
          if (data_labels.format[targetId]) {
            format2 = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];
          } else {
            format2 = function() {
              return "";
            };
          }
        } else {
          format2 = defaultFormat;
        }
        return format2;
      };
      ChartInternal.prototype.initGrid = function() {
        var $$ = this, config = $$.config, d3 = $$.d3;
        $$.grid = $$.main.append("g").attr("clip-path", $$.clipPathForGrid).attr("class", CLASS.grid);
        if (config.grid_x_show) {
          $$.grid.append("g").attr("class", CLASS.xgrids);
        }
        if (config.grid_y_show) {
          $$.grid.append("g").attr("class", CLASS.ygrids);
        }
        if (config.grid_focus_show) {
          $$.grid.append("g").attr("class", CLASS.xgridFocus).append("line").attr("class", CLASS.xgridFocus);
        }
        $$.xgrid = d3.selectAll([]);
        if (!config.grid_lines_front) {
          $$.initGridLines();
        }
      };
      ChartInternal.prototype.initGridLines = function() {
        var $$ = this, d3 = $$.d3;
        $$.gridLines = $$.main.append("g").attr("clip-path", $$.clipPathForGrid).attr("class", CLASS.grid + " " + CLASS.gridLines);
        $$.gridLines.append("g").attr("class", CLASS.xgridLines);
        $$.gridLines.append("g").attr("class", CLASS.ygridLines);
        $$.xgridLines = d3.selectAll([]);
      };
      ChartInternal.prototype.updateXGrid = function(withoutUpdate) {
        var $$ = this, config = $$.config, d3 = $$.d3, xgridData = $$.generateGridData(config.grid_x_type, $$.x), tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;
        $$.xgridAttr = config.axis_rotated ? {
          x1: 0,
          x2: $$.width,
          y1: function(d) {
            return $$.x(d) - tickOffset;
          },
          y2: function(d) {
            return $$.x(d) - tickOffset;
          }
        } : {
          x1: function(d) {
            return $$.x(d) + tickOffset;
          },
          x2: function(d) {
            return $$.x(d) + tickOffset;
          },
          y1: 0,
          y2: $$.height
        };
        $$.xgridAttr.opacity = function() {
          var pos = +d3.select(this).attr(config.axis_rotated ? "y1" : "x1");
          return pos === (config.axis_rotated ? $$.height : 0) ? 0 : 1;
        };
        var xgrid = $$.main.select("." + CLASS.xgrids).selectAll("." + CLASS.xgrid).data(xgridData);
        var xgridEnter = xgrid.enter().append("line").attr("class", CLASS.xgrid).attr("x1", $$.xgridAttr.x1).attr("x2", $$.xgridAttr.x2).attr("y1", $$.xgridAttr.y1).attr("y2", $$.xgridAttr.y2).style("opacity", 0);
        $$.xgrid = xgridEnter.merge(xgrid);
        if (!withoutUpdate) {
          $$.xgrid.attr("x1", $$.xgridAttr.x1).attr("x2", $$.xgridAttr.x2).attr("y1", $$.xgridAttr.y1).attr("y2", $$.xgridAttr.y2).style("opacity", $$.xgridAttr.opacity);
        }
        xgrid.exit().remove();
      };
      ChartInternal.prototype.updateYGrid = function() {
        var $$ = this, config = $$.config, gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);
        var ygrid = $$.main.select("." + CLASS.ygrids).selectAll("." + CLASS.ygrid).data(gridValues);
        var ygridEnter = ygrid.enter().append("line").attr("class", CLASS.ygrid);
        $$.ygrid = ygridEnter.merge(ygrid);
        $$.ygrid.attr("x1", config.axis_rotated ? $$.y : 0).attr("x2", config.axis_rotated ? $$.y : $$.width).attr("y1", config.axis_rotated ? 0 : $$.y).attr("y2", config.axis_rotated ? $$.height : $$.y);
        ygrid.exit().remove();
        $$.smoothLines($$.ygrid, "grid");
      };
      ChartInternal.prototype.gridTextAnchor = function(d) {
        return d.position ? d.position : "end";
      };
      ChartInternal.prototype.gridTextDx = function(d) {
        return d.position === "start" ? 4 : d.position === "middle" ? 0 : -4;
      };
      ChartInternal.prototype.xGridTextX = function(d) {
        return d.position === "start" ? -this.height : d.position === "middle" ? -this.height / 2 : 0;
      };
      ChartInternal.prototype.yGridTextX = function(d) {
        return d.position === "start" ? 0 : d.position === "middle" ? this.width / 2 : this.width;
      };
      ChartInternal.prototype.updateGrid = function(duration) {
        var $$ = this, main = $$.main, config = $$.config, xgridLine, xgridLineEnter, ygridLine, ygridLineEnter, xv = $$.xv.bind($$), yv = $$.yv.bind($$), xGridTextX = $$.xGridTextX.bind($$), yGridTextX = $$.yGridTextX.bind($$);
        $$.grid.style("visibility", $$.hasArcType() ? "hidden" : "visible");
        main.select("line." + CLASS.xgridFocus).style("visibility", "hidden");
        if (config.grid_x_show) {
          $$.updateXGrid();
        }
        xgridLine = main.select("." + CLASS.xgridLines).selectAll("." + CLASS.xgridLine).data(config.grid_x_lines);
        xgridLineEnter = xgridLine.enter().append("g").attr("class", function(d) {
          return CLASS.xgridLine + (d["class"] ? " " + d["class"] : "");
        });
        xgridLineEnter.append("line").attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv).attr("y1", config.axis_rotated ? xv : 0).attr("y2", config.axis_rotated ? xv : $$.height).style("opacity", 0);
        xgridLineEnter.append("text").attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "" : "rotate(-90)").attr("x", config.axis_rotated ? yGridTextX : xGridTextX).attr("y", xv).attr("dx", $$.gridTextDx).attr("dy", -5).style("opacity", 0);
        $$.xgridLines = xgridLineEnter.merge(xgridLine);
        xgridLine.exit().transition().duration(duration).style("opacity", 0).remove();
        if (config.grid_y_show) {
          $$.updateYGrid();
        }
        ygridLine = main.select("." + CLASS.ygridLines).selectAll("." + CLASS.ygridLine).data(config.grid_y_lines);
        ygridLineEnter = ygridLine.enter().append("g").attr("class", function(d) {
          return CLASS.ygridLine + (d["class"] ? " " + d["class"] : "");
        });
        ygridLineEnter.append("line").attr("x1", config.axis_rotated ? yv : 0).attr("x2", config.axis_rotated ? yv : $$.width).attr("y1", config.axis_rotated ? 0 : yv).attr("y2", config.axis_rotated ? $$.height : yv).style("opacity", 0);
        ygridLineEnter.append("text").attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "rotate(-90)" : "").attr("x", config.axis_rotated ? xGridTextX : yGridTextX).attr("y", yv).attr("dx", $$.gridTextDx).attr("dy", -5).style("opacity", 0);
        $$.ygridLines = ygridLineEnter.merge(ygridLine);
        $$.ygridLines.select("line").transition().duration(duration).attr("x1", config.axis_rotated ? yv : 0).attr("x2", config.axis_rotated ? yv : $$.width).attr("y1", config.axis_rotated ? 0 : yv).attr("y2", config.axis_rotated ? $$.height : yv).style("opacity", 1);
        $$.ygridLines.select("text").transition().duration(duration).attr("x", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$)).attr("y", yv).text(function(d) {
          return d.text;
        }).style("opacity", 1);
        ygridLine.exit().transition().duration(duration).style("opacity", 0).remove();
      };
      ChartInternal.prototype.redrawGrid = function(withTransition, transition2) {
        var $$ = this, config = $$.config, xv = $$.xv.bind($$), lines = $$.xgridLines.select("line"), texts = $$.xgridLines.select("text");
        return [
          (withTransition ? lines.transition(transition2) : lines).attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv).attr("y1", config.axis_rotated ? xv : 0).attr("y2", config.axis_rotated ? xv : $$.height).style("opacity", 1),
          (withTransition ? texts.transition(transition2) : texts).attr("x", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$)).attr("y", xv).text(function(d) {
            return d.text;
          }).style("opacity", 1)
        ];
      };
      ChartInternal.prototype.showXGridFocus = function(selectedData) {
        var $$ = this, config = $$.config, dataToShow = selectedData.filter(function(d) {
          return d && isValue(d.value);
        }), focusEl = $$.main.selectAll("line." + CLASS.xgridFocus), xx = $$.xx.bind($$);
        if (!config.tooltip_show) {
          return;
        }
        if ($$.hasType("stanford") || $$.hasArcType()) {
          return;
        }
        focusEl.style("visibility", "visible").data([dataToShow[0]]).attr(config.axis_rotated ? "y1" : "x1", xx).attr(config.axis_rotated ? "y2" : "x2", xx);
        $$.smoothLines(focusEl, "grid");
      };
      ChartInternal.prototype.hideXGridFocus = function() {
        this.main.select("line." + CLASS.xgridFocus).style("visibility", "hidden");
      };
      ChartInternal.prototype.updateXgridFocus = function() {
        var $$ = this, config = $$.config;
        $$.main.select("line." + CLASS.xgridFocus).attr("x1", config.axis_rotated ? 0 : -10).attr("x2", config.axis_rotated ? $$.width : -10).attr("y1", config.axis_rotated ? -10 : 0).attr("y2", config.axis_rotated ? -10 : $$.height);
      };
      ChartInternal.prototype.generateGridData = function(type2, scale) {
        var $$ = this, gridData = [], xDomain, firstYear, lastYear, i, tickNum = $$.main.select("." + CLASS.axisX).selectAll(".tick").size();
        if (type2 === "year") {
          xDomain = $$.getXDomain();
          firstYear = xDomain[0].getFullYear();
          lastYear = xDomain[1].getFullYear();
          for (i = firstYear; i <= lastYear; i++) {
            gridData.push(/* @__PURE__ */ new Date(i + "-01-01 00:00:00"));
          }
        } else {
          gridData = scale.ticks(10);
          if (gridData.length > tickNum) {
            gridData = gridData.filter(function(d) {
              return ("" + d).indexOf(".") < 0;
            });
          }
        }
        return gridData;
      };
      ChartInternal.prototype.getGridFilterToRemove = function(params) {
        return params ? function(line) {
          var found = false;
          [].concat(params).forEach(function(param) {
            if ("value" in param && line.value === param.value || "class" in param && line["class"] === param["class"]) {
              found = true;
            }
          });
          return found;
        } : function() {
          return true;
        };
      };
      ChartInternal.prototype.removeGridLines = function(params, forX) {
        var $$ = this, config = $$.config, toRemove = $$.getGridFilterToRemove(params), toShow = function(line) {
          return !toRemove(line);
        }, classLines = forX ? CLASS.xgridLines : CLASS.ygridLines, classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;
        $$.main.select("." + classLines).selectAll("." + classLine).filter(toRemove).transition().duration(config.transition_duration).style("opacity", 0).remove();
        if (forX) {
          config.grid_x_lines = config.grid_x_lines.filter(toShow);
        } else {
          config.grid_y_lines = config.grid_y_lines.filter(toShow);
        }
      };
      ChartInternal.prototype.initEventRect = function() {
        var $$ = this, config = $$.config;
        $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.eventRects).style("fill-opacity", 0);
        $$.eventRect = $$.main.select("." + CLASS.eventRects).append("rect").attr("class", CLASS.eventRect);
        if (config.zoom_enabled && $$.zoom) {
          $$.eventRect.call($$.zoom).on("dblclick.zoom", null);
          if (config.zoom_initialRange) {
            $$.eventRect.transition().duration(0).call($$.zoom.transform, $$.zoomTransform(config.zoom_initialRange));
          }
        }
      };
      ChartInternal.prototype.redrawEventRect = function() {
        var $$ = this, d3 = $$.d3, config = $$.config;
        function mouseout() {
          $$.svg.select("." + CLASS.eventRect).style("cursor", null);
          $$.hideXGridFocus();
          $$.hideTooltip();
          $$.unexpandCircles();
          $$.unexpandBars();
        }
        var isHoveringDataPoint = function(mouse, closest) {
          return closest && ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity);
        };
        var withName = function(d) {
          return d ? $$.addName(Object.assign({}, d)) : null;
        };
        $$.main.select("." + CLASS.eventRects).style("cursor", config.zoom_enabled ? config.axis_rotated ? "ns-resize" : "ew-resize" : null);
        $$.eventRect.attr("x", 0).attr("y", 0).attr("width", $$.width).attr("height", $$.height).on("mouseout", config.interaction_enabled ? function() {
          if (!config) {
            return;
          }
          if ($$.hasArcType()) {
            return;
          }
          if ($$.mouseover) {
            config.data_onmouseout.call($$.api, $$.mouseover);
            $$.mouseover = void 0;
          }
          mouseout();
        } : null).on("mousemove", config.interaction_enabled ? function() {
          if ($$.dragging) {
            return;
          }
          var targetsToShow = $$.getTargetsToShow();
          if ($$.hasArcType(targetsToShow)) {
            return;
          }
          var mouse = d3.mouse(this);
          var closest = withName($$.findClosestFromTargets(targetsToShow, mouse));
          var isMouseCloseToDataPoint = isHoveringDataPoint(mouse, closest);
          if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id || closest.index !== $$.mouseover.index)) {
            config.data_onmouseout.call($$.api, $$.mouseover);
            $$.mouseover = void 0;
          }
          if (closest && !$$.mouseover) {
            config.data_onmouseover.call($$.api, closest);
            $$.mouseover = closest;
          }
          $$.svg.select("." + CLASS.eventRect).style("cursor", isMouseCloseToDataPoint ? "pointer" : null);
          var showSingleDataPoint = !config.tooltip_grouped || $$.hasType("stanford", targetsToShow);
          var selectedData;
          if (showSingleDataPoint) {
            if (closest) {
              selectedData = [closest];
            }
          } else {
            var closestByX = void 0;
            if (closest) {
              closestByX = closest;
            } else {
              var mouseX = config.axis_rotated ? mouse[1] : mouse[0];
              closestByX = $$.findClosestFromTargetsByX(targetsToShow, $$.x.invert(mouseX));
            }
            if (closestByX) {
              selectedData = $$.filterByX(targetsToShow, closestByX.x);
            }
          }
          if (!selectedData || selectedData.length === 0) {
            return mouseout();
          }
          selectedData = selectedData.map(withName);
          $$.showTooltip(selectedData, this);
          if (config.point_focus_expand_enabled) {
            $$.unexpandCircles();
            selectedData.forEach(function(d) {
              $$.expandCircles(d.index, d.id, false);
            });
          }
          $$.unexpandBars();
          selectedData.forEach(function(d) {
            $$.expandBars(d.index, d.id, false);
          });
          $$.showXGridFocus(selectedData);
        } : null).on("click", config.interaction_enabled ? function() {
          var targetsToShow = $$.getTargetsToShow();
          if ($$.hasArcType(targetsToShow)) {
            return;
          }
          var mouse = d3.mouse(this);
          var closest = withName($$.findClosestFromTargets(targetsToShow, mouse));
          if (!isHoveringDataPoint(mouse, closest)) {
            return;
          }
          var sameXData;
          if (!config.data_selection_grouped || $$.isStanfordType(closest)) {
            sameXData = [closest];
          } else {
            sameXData = $$.filterByX(targetsToShow, closest.x);
          }
          sameXData.forEach(function(d) {
            $$.main.selectAll("." + CLASS.shapes + $$.getTargetSelectorSuffix(d.id)).selectAll("." + CLASS.shape + "-" + d.index).each(function() {
              if (config.data_selection_grouped || $$.isWithinShape(this, d)) {
                $$.toggleShape(this, d, d.index);
              }
            });
          });
          if (closest) {
            var shape = $$.main.selectAll("." + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).select("." + CLASS.shape + "-" + closest.index);
            config.data_onclick.call($$.api, closest, shape.node());
          }
        } : null).call(config.interaction_enabled && config.data_selection_draggable && $$.drag ? d3.drag().on("drag", function() {
          $$.drag(d3.mouse(this));
        }).on("start", function() {
          $$.dragstart(d3.mouse(this));
        }).on("end", function() {
          $$.dragend();
        }) : function() {
        });
      };
      ChartInternal.prototype.getMousePosition = function(data) {
        var $$ = this;
        return [$$.x(data.x), $$.getYScale(data.id)(data.value)];
      };
      ChartInternal.prototype.dispatchEvent = function(type2, mouse) {
        var $$ = this, selector = "." + CLASS.eventRect, eventRect = $$.main.select(selector).node(), box = eventRect.getBoundingClientRect(), x5 = box.left + (mouse ? mouse[0] : 0), y5 = box.top + (mouse ? mouse[1] : 0), event2 = document.createEvent("MouseEvents");
        event2.initMouseEvent(type2, true, true, window, 0, x5, y5, x5, y5, false, false, false, false, 0, null);
        eventRect.dispatchEvent(event2);
      };
      ChartInternal.prototype.initLegend = function() {
        var $$ = this;
        $$.legendItemTextBox = {};
        $$.legendHasRendered = false;
        $$.legend = $$.svg.append("g").attr("transform", $$.getTranslate("legend"));
        if (!$$.config.legend_show) {
          $$.legend.style("visibility", "hidden");
          $$.hiddenLegendIds = $$.mapToIds($$.data.targets);
          return;
        }
        $$.updateLegendWithDefaults();
      };
      ChartInternal.prototype.updateLegendWithDefaults = function() {
        var $$ = this;
        $$.updateLegend($$.mapToIds($$.data.targets), {
          withTransform: false,
          withTransitionForTransform: false,
          withTransition: false
        });
      };
      ChartInternal.prototype.updateSizeForLegend = function(legendHeight, legendWidth) {
        var $$ = this, config = $$.config, insetLegendPosition = {
          top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,
          left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5
        };
        $$.margin3 = {
          top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,
          right: NaN,
          bottom: 0,
          left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0
        };
      };
      ChartInternal.prototype.transformLegend = function(withTransition) {
        var $$ = this;
        (withTransition ? $$.legend.transition() : $$.legend).attr("transform", $$.getTranslate("legend"));
      };
      ChartInternal.prototype.updateLegendStep = function(step) {
        this.legendStep = step;
      };
      ChartInternal.prototype.updateLegendItemWidth = function(w) {
        this.legendItemWidth = w;
      };
      ChartInternal.prototype.updateLegendItemHeight = function(h) {
        this.legendItemHeight = h;
      };
      ChartInternal.prototype.getLegendWidth = function() {
        var $$ = this;
        return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;
      };
      ChartInternal.prototype.getLegendHeight = function() {
        var $$ = this, h = 0;
        if ($$.config.legend_show) {
          if ($$.isLegendRight) {
            h = $$.currentHeight;
          } else {
            h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);
          }
        }
        return h;
      };
      ChartInternal.prototype.opacityForLegend = function(legendItem) {
        return legendItem.classed(CLASS.legendItemHidden) ? null : 1;
      };
      ChartInternal.prototype.opacityForUnfocusedLegend = function(legendItem) {
        return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;
      };
      ChartInternal.prototype.toggleFocusLegend = function(targetIds, focus) {
        var $$ = this;
        targetIds = $$.mapToTargetIds(targetIds);
        $$.legend.selectAll("." + CLASS.legendItem).filter(function(id2) {
          return targetIds.indexOf(id2) >= 0;
        }).classed(CLASS.legendItemFocused, focus).transition().duration(100).style("opacity", function() {
          var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;
          return opacity.call($$, $$.d3.select(this));
        });
      };
      ChartInternal.prototype.revertLegend = function() {
        var $$ = this, d3 = $$.d3;
        $$.legend.selectAll("." + CLASS.legendItem).classed(CLASS.legendItemFocused, false).transition().duration(100).style("opacity", function() {
          return $$.opacityForLegend(d3.select(this));
        });
      };
      ChartInternal.prototype.showLegend = function(targetIds) {
        var $$ = this, config = $$.config;
        if (!config.legend_show) {
          config.legend_show = true;
          $$.legend.style("visibility", "visible");
          if (!$$.legendHasRendered) {
            $$.updateLegendWithDefaults();
          }
        }
        $$.removeHiddenLegendIds(targetIds);
        $$.legend.selectAll($$.selectorLegends(targetIds)).style("visibility", "visible").transition().style("opacity", function() {
          return $$.opacityForLegend($$.d3.select(this));
        });
      };
      ChartInternal.prototype.hideLegend = function(targetIds) {
        var $$ = this, config = $$.config;
        if (config.legend_show && isEmpty(targetIds)) {
          config.legend_show = false;
          $$.legend.style("visibility", "hidden");
        }
        $$.addHiddenLegendIds(targetIds);
        $$.legend.selectAll($$.selectorLegends(targetIds)).style("opacity", 0).style("visibility", "hidden");
      };
      ChartInternal.prototype.clearLegendItemTextBoxCache = function() {
        this.legendItemTextBox = {};
      };
      ChartInternal.prototype.updateLegend = function(targetIds, options, transitions) {
        var $$ = this, config = $$.config;
        var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;
        var paddingTop = 4, paddingRight = 10, maxWidth = 0, maxHeight = 0, posMin = 10, tileWidth = config.legend_item_tile_width + 5;
        var l, totalLength = 0, offsets = {}, widths = {}, heights = {}, margins = [0], steps = {}, step = 0;
        var withTransition, withTransitionForTransform;
        var texts, rects, tiles, background;
        targetIds = targetIds.filter(function(id2) {
          return !isDefined(config.data_names[id2]) || config.data_names[id2] !== null;
        });
        options = options || {};
        withTransition = getOption(options, "withTransition", true);
        withTransitionForTransform = getOption(options, "withTransitionForTransform", true);
        function getTextBox(textElement, id2) {
          if (!$$.legendItemTextBox[id2]) {
            $$.legendItemTextBox[id2] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);
          }
          return $$.legendItemTextBox[id2];
        }
        function updatePositions(textElement, id2, index2) {
          var reset = index2 === 0, isLast = index2 === targetIds.length - 1, box = getTextBox(textElement, id2), itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) + config.legend_padding, itemHeight = box.height + paddingTop, itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth, areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(), margin, maxLength;
          function updateValues(id3, withoutStep) {
            if (!withoutStep) {
              margin = (areaLength - totalLength - itemLength) / 2;
              if (margin < posMin) {
                margin = (areaLength - itemLength) / 2;
                totalLength = 0;
                step++;
              }
            }
            steps[id3] = step;
            margins[step] = $$.isLegendInset ? 10 : margin;
            offsets[id3] = totalLength;
            totalLength += itemLength;
          }
          if (reset) {
            totalLength = 0;
            step = 0;
            maxWidth = 0;
            maxHeight = 0;
          }
          if (config.legend_show && !$$.isLegendToShow(id2)) {
            widths[id2] = heights[id2] = steps[id2] = offsets[id2] = 0;
            return;
          }
          widths[id2] = itemWidth;
          heights[id2] = itemHeight;
          if (!maxWidth || itemWidth >= maxWidth) {
            maxWidth = itemWidth;
          }
          if (!maxHeight || itemHeight >= maxHeight) {
            maxHeight = itemHeight;
          }
          maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;
          if (config.legend_equally) {
            Object.keys(widths).forEach(function(id3) {
              widths[id3] = maxWidth;
            });
            Object.keys(heights).forEach(function(id3) {
              heights[id3] = maxHeight;
            });
            margin = (areaLength - maxLength * targetIds.length) / 2;
            if (margin < posMin) {
              totalLength = 0;
              step = 0;
              targetIds.forEach(function(id3) {
                updateValues(id3);
              });
            } else {
              updateValues(id2, true);
            }
          } else {
            updateValues(id2);
          }
        }
        if ($$.isLegendInset) {
          step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;
          $$.updateLegendStep(step);
        }
        if ($$.isLegendRight) {
          xForLegend = function(id2) {
            return maxWidth * steps[id2];
          };
          yForLegend = function(id2) {
            return margins[steps[id2]] + offsets[id2];
          };
        } else if ($$.isLegendInset) {
          xForLegend = function(id2) {
            return maxWidth * steps[id2] + 10;
          };
          yForLegend = function(id2) {
            return margins[steps[id2]] + offsets[id2];
          };
        } else {
          xForLegend = function(id2) {
            return margins[steps[id2]] + offsets[id2];
          };
          yForLegend = function(id2) {
            return maxHeight * steps[id2];
          };
        }
        xForLegendText = function(id2, i) {
          return xForLegend(id2, i) + 4 + config.legend_item_tile_width;
        };
        yForLegendText = function(id2, i) {
          return yForLegend(id2, i) + 9;
        };
        xForLegendRect = function(id2, i) {
          return xForLegend(id2, i);
        };
        yForLegendRect = function(id2, i) {
          return yForLegend(id2, i) - 5;
        };
        x1ForLegendTile = function(id2, i) {
          return xForLegend(id2, i) - 2;
        };
        x2ForLegendTile = function(id2, i) {
          return xForLegend(id2, i) - 2 + config.legend_item_tile_width;
        };
        yForLegendTile = function(id2, i) {
          return yForLegend(id2, i) + 4;
        };
        l = $$.legend.selectAll("." + CLASS.legendItem).data(targetIds).enter().append("g").attr("class", function(id2) {
          return $$.generateClass(CLASS.legendItem, id2);
        }).style("visibility", function(id2) {
          return $$.isLegendToShow(id2) ? "visible" : "hidden";
        }).style("cursor", function() {
          return config.interaction_enabled ? "pointer" : "auto";
        }).on("click", config.interaction_enabled ? function(id2) {
          if (config.legend_item_onclick) {
            config.legend_item_onclick.call($$, id2);
          } else {
            if ($$.d3.event.altKey) {
              $$.api.hide();
              $$.api.show(id2);
            } else {
              $$.api.toggle(id2);
              $$.isTargetToShow(id2) ? $$.api.focus(id2) : $$.api.revert();
            }
          }
        } : null).on("mouseover", config.interaction_enabled ? function(id2) {
          if (config.legend_item_onmouseover) {
            config.legend_item_onmouseover.call($$, id2);
          } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, true);
            if (!$$.transiting && $$.isTargetToShow(id2)) {
              $$.api.focus(id2);
            }
          }
        } : null).on("mouseout", config.interaction_enabled ? function(id2) {
          if (config.legend_item_onmouseout) {
            config.legend_item_onmouseout.call($$, id2);
          } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, false);
            $$.api.revert();
          }
        } : null);
        l.append("text").text(function(id2) {
          return isDefined(config.data_names[id2]) ? config.data_names[id2] : id2;
        }).each(function(id2, i) {
          updatePositions(this, id2, i);
        }).style("pointer-events", "none").attr("x", $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200).attr("y", $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);
        l.append("rect").attr("class", CLASS.legendItemEvent).style("fill-opacity", 0).attr("x", $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200).attr("y", $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);
        l.append("line").attr("class", CLASS.legendItemTile).style("stroke", $$.color).style("pointer-events", "none").attr("x1", $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200).attr("y1", $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr("x2", $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200).attr("y2", $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr("stroke-width", config.legend_item_tile_height);
        background = $$.legend.select("." + CLASS.legendBackground + " rect");
        if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {
          background = $$.legend.insert("g", "." + CLASS.legendItem).attr("class", CLASS.legendBackground).append("rect");
        }
        texts = $$.legend.selectAll("text").data(targetIds).text(function(id2) {
          return isDefined(config.data_names[id2]) ? config.data_names[id2] : id2;
        }).each(function(id2, i) {
          updatePositions(this, id2, i);
        });
        (withTransition ? texts.transition() : texts).attr("x", xForLegendText).attr("y", yForLegendText);
        rects = $$.legend.selectAll("rect." + CLASS.legendItemEvent).data(targetIds);
        (withTransition ? rects.transition() : rects).attr("width", function(id2) {
          return widths[id2];
        }).attr("height", function(id2) {
          return heights[id2];
        }).attr("x", xForLegendRect).attr("y", yForLegendRect);
        tiles = $$.legend.selectAll("line." + CLASS.legendItemTile).data(targetIds);
        (withTransition ? tiles.transition() : tiles).style("stroke", $$.levelColor ? function(id2) {
          return $$.levelColor($$.cache[id2].values.reduce(function(total, item) {
            return total + item.value;
          }, 0));
        } : $$.color).attr("x1", x1ForLegendTile).attr("y1", yForLegendTile).attr("x2", x2ForLegendTile).attr("y2", yForLegendTile);
        if (background) {
          (withTransition ? background.transition() : background).attr("height", $$.getLegendHeight() - 12).attr("width", maxWidth * (step + 1) + 10);
        }
        $$.legend.selectAll("." + CLASS.legendItem).classed(CLASS.legendItemHidden, function(id2) {
          return !$$.isTargetToShow(id2);
        });
        $$.updateLegendItemWidth(maxWidth);
        $$.updateLegendItemHeight(maxHeight);
        $$.updateLegendStep(step);
        $$.updateSizes();
        $$.updateScales();
        $$.updateSvgSize();
        $$.transformAll(withTransitionForTransform, transitions);
        $$.legendHasRendered = true;
      };
      ChartInternal.prototype.initRegion = function() {
        var $$ = this;
        $$.region = $$.main.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.regions);
      };
      ChartInternal.prototype.updateRegion = function(duration) {
        var $$ = this, config = $$.config;
        $$.region.style("visibility", $$.hasArcType() ? "hidden" : "visible");
        var mainRegion = $$.main.select("." + CLASS.regions).selectAll("." + CLASS.region).data(config.regions);
        var g = mainRegion.enter().append("g");
        g.append("rect").attr("x", $$.regionX.bind($$)).attr("y", $$.regionY.bind($$)).attr("width", $$.regionWidth.bind($$)).attr("height", $$.regionHeight.bind($$)).style("fill-opacity", function(d) {
          return isValue(d.opacity) ? d.opacity : 0.1;
        });
        g.append("text").text($$.labelRegion.bind($$));
        $$.mainRegion = g.merge(mainRegion).attr("class", $$.classRegion.bind($$));
        mainRegion.exit().transition().duration(duration).style("opacity", 0).remove();
      };
      ChartInternal.prototype.redrawRegion = function(withTransition, transition2) {
        var $$ = this, regions = $$.mainRegion, regionLabels = $$.mainRegion.selectAll("text");
        return [
          (withTransition ? regions.transition(transition2) : regions).attr("x", $$.regionX.bind($$)).attr("y", $$.regionY.bind($$)).attr("width", $$.regionWidth.bind($$)).attr("height", $$.regionHeight.bind($$)).style("fill-opacity", function(d) {
            return isValue(d.opacity) ? d.opacity : 0.1;
          }),
          (withTransition ? regionLabels.transition(transition2) : regionLabels).attr("x", $$.labelOffsetX.bind($$)).attr("y", $$.labelOffsetY.bind($$)).attr("transform", $$.labelTransform.bind($$)).attr("style", "text-anchor: left;")
        ];
      };
      ChartInternal.prototype.regionX = function(d) {
        var $$ = this, config = $$.config, xPos, yScale = d.axis === "y" ? $$.y : $$.y2;
        if (d.axis === "y" || d.axis === "y2") {
          xPos = config.axis_rotated ? "start" in d ? yScale(d.start) : 0 : 0;
        } else {
          xPos = config.axis_rotated ? 0 : "start" in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0;
        }
        return xPos;
      };
      ChartInternal.prototype.regionY = function(d) {
        var $$ = this, config = $$.config, yPos, yScale = d.axis === "y" ? $$.y : $$.y2;
        if (d.axis === "y" || d.axis === "y2") {
          yPos = config.axis_rotated ? 0 : "end" in d ? yScale(d.end) : 0;
        } else {
          yPos = config.axis_rotated ? "start" in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0 : 0;
        }
        return yPos;
      };
      ChartInternal.prototype.regionWidth = function(d) {
        var $$ = this, config = $$.config, start2 = $$.regionX(d), end, yScale = d.axis === "y" ? $$.y : $$.y2;
        if (d.axis === "y" || d.axis === "y2") {
          end = config.axis_rotated ? "end" in d ? yScale(d.end) : $$.width : $$.width;
        } else {
          end = config.axis_rotated ? $$.width : "end" in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width;
        }
        return end < start2 ? 0 : end - start2;
      };
      ChartInternal.prototype.regionHeight = function(d) {
        var $$ = this, config = $$.config, start2 = this.regionY(d), end, yScale = d.axis === "y" ? $$.y : $$.y2;
        if (d.axis === "y" || d.axis === "y2") {
          end = config.axis_rotated ? $$.height : "start" in d ? yScale(d.start) : $$.height;
        } else {
          end = config.axis_rotated ? "end" in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height : $$.height;
        }
        return end < start2 ? 0 : end - start2;
      };
      ChartInternal.prototype.isRegionOnX = function(d) {
        return !d.axis || d.axis === "x";
      };
      ChartInternal.prototype.labelRegion = function(d) {
        return "label" in d ? d.label : "";
      };
      ChartInternal.prototype.labelTransform = function(d) {
        return "vertical" in d && d.vertical ? "rotate(90)" : "";
      };
      ChartInternal.prototype.labelOffsetX = function(d) {
        var paddingX = "paddingX" in d ? d.paddingX : 3;
        var paddingY = "paddingY" in d ? d.paddingY : 3;
        return "vertical" in d && d.vertical ? this.regionY(d) + paddingY : this.regionX(d) + paddingX;
      };
      ChartInternal.prototype.labelOffsetY = function(d) {
        var paddingX = "paddingX" in d ? d.paddingX : 3;
        var paddingY = "paddingY" in d ? d.paddingY : 3;
        return "vertical" in d && d.vertical ? -(this.regionX(d) + paddingX) : this.regionY(d) + 10 + paddingY;
      };
      function c3LogScale(d3, linearScale, logScale) {
        var PROJECTION = [0.01, 10];
        if (!linearScale) {
          linearScale = d3.scaleLinear();
          linearScale.range(PROJECTION);
        }
        if (!logScale) {
          logScale = d3.scaleLog();
          logScale.domain(PROJECTION);
          logScale.nice();
        }
        function logspace(a2, b, len) {
          var arr, end, tmp, d;
          if (arguments.length < 3) {
            len = 10;
          } else {
            if (len === 0) {
              return [];
            }
          }
          end = len - 1;
          d = (b - a2) / end;
          arr = new Array(len);
          tmp = a2;
          arr[0] = Math.pow(10, tmp);
          for (var i = 1; i < end; i++) {
            tmp += d;
            arr[i] = Math.pow(10, tmp);
          }
          arr[end] = Math.pow(10, b);
          return arr;
        }
        function scale(x5) {
          return logScale(linearScale(x5));
        }
        scale.domain = function(x5) {
          if (!arguments.length) {
            return linearScale.domain();
          }
          linearScale.domain(x5);
          return scale;
        };
        scale.range = function(x5) {
          if (!arguments.length) {
            return logScale.range();
          }
          logScale.range(x5);
          return scale;
        };
        scale.ticks = function(m) {
          return logspace(-2, 1, m || 10).map(function(v) {
            return linearScale.invert(v);
          });
        };
        scale.copy = function() {
          return c3LogScale(d3, linearScale.copy(), logScale.copy());
        };
        return scale;
      }
      ChartInternal.prototype.getScale = function(min2, max3, forTimeseries) {
        return (forTimeseries ? this.d3.scaleTime() : this.d3.scaleLinear()).range([
          min2,
          max3
        ]);
      };
      ChartInternal.prototype.getX = function(min2, max3, domain, offset) {
        var $$ = this, scale = $$.getScale(min2, max3, $$.isTimeSeries()), _scale = domain ? scale.domain(domain) : scale, key;
        if ($$.isCategorized()) {
          offset = offset || function() {
            return 0;
          };
          scale = function(d, raw) {
            var v = _scale(d) + offset(d);
            return raw ? v : Math.ceil(v);
          };
        } else {
          scale = function(d, raw) {
            var v = _scale(d);
            return raw ? v : Math.ceil(v);
          };
        }
        for (key in _scale) {
          scale[key] = _scale[key];
        }
        scale.orgDomain = function() {
          return _scale.domain();
        };
        if ($$.isCategorized()) {
          scale.domain = function(domain2) {
            if (!arguments.length) {
              domain2 = this.orgDomain();
              return [domain2[0], domain2[1] + 1];
            }
            _scale.domain(domain2);
            return scale;
          };
        }
        return scale;
      };
      ChartInternal.prototype.getY = function(type2, domain, range2) {
        var scale;
        if (type2 === "timeseries" || type2 === "time") {
          scale = this.d3.scaleTime();
        } else if (type2 === "log") {
          scale = c3LogScale(this.d3);
        } else if (type2 === "linear" || type2 === void 0) {
          scale = this.d3.scaleLinear();
        } else {
          throw new Error('Invalid Y axis type: "' + type2 + '"');
        }
        if (domain) {
          scale.domain(domain);
        }
        if (range2) {
          scale.range(range2);
        }
        return scale;
      };
      ChartInternal.prototype.getYScale = function(id2) {
        return this.axis.getId(id2) === "y2" ? this.y2 : this.y;
      };
      ChartInternal.prototype.getSubYScale = function(id2) {
        return this.axis.getId(id2) === "y2" ? this.subY2 : this.subY;
      };
      ChartInternal.prototype.updateScales = function() {
        var $$ = this, config = $$.config, forInit = !$$.x;
        $$.xMin = config.axis_rotated ? 1 : 0;
        $$.xMax = config.axis_rotated ? $$.height : $$.width;
        $$.yMin = config.axis_rotated ? 0 : $$.height;
        $$.yMax = config.axis_rotated ? $$.width : 1;
        $$.subXMin = $$.xMin;
        $$.subXMax = $$.xMax;
        $$.subYMin = config.axis_rotated ? 0 : $$.height2;
        $$.subYMax = config.axis_rotated ? $$.width2 : 1;
        $$.x = $$.getX($$.xMin, $$.xMax, forInit ? void 0 : $$.x.orgDomain(), function() {
          return $$.xAxis.tickOffset();
        });
        $$.y = $$.getY(config.axis_y_type, forInit ? config.axis_y_default : $$.y.domain(), [$$.yMin, $$.yMax]);
        $$.y2 = $$.getY(config.axis_y2_type, forInit ? config.axis_y2_default : $$.y2.domain(), [$$.yMin, $$.yMax]);
        $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function(d) {
          return d % 1 ? 0 : $$.subXAxis.tickOffset();
        });
        $$.subY = $$.getY(config.axis_y_type, forInit ? config.axis_y_default : $$.subY.domain(), [$$.subYMin, $$.subYMax]);
        $$.subY2 = $$.getY(config.axis_y2_type, forInit ? config.axis_y2_default : $$.subY2.domain(), [$$.subYMin, $$.subYMax]);
        $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();
        $$.xAxisTickValues = $$.axis.getXAxisTickValues();
        $$.yAxisTickValues = $$.axis.getYAxisTickValues();
        $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();
        $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
        $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
        $$.yAxis = $$.axis.getYAxis("y", $$.y, $$.yOrient, $$.yAxisTickValues, config.axis_y_tick_outer);
        $$.y2Axis = $$.axis.getYAxis("y2", $$.y2, $$.y2Orient, $$.y2AxisTickValues, config.axis_y2_tick_outer);
        if (!forInit) {
          if ($$.brush) {
            $$.brush.updateScale($$.subX);
          }
        }
        if ($$.updateArc) {
          $$.updateArc();
        }
      };
      ChartInternal.prototype.selectPoint = function(target, d, i) {
        var $$ = this, config = $$.config, cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$), cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$), r = $$.pointSelectR.bind($$);
        config.data_onselected.call($$.api, d, target.node());
        $$.main.select("." + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll("." + CLASS.selectedCircle + "-" + i).data([d]).enter().append("circle").attr("class", function() {
          return $$.generateClass(CLASS.selectedCircle, i);
        }).attr("cx", cx).attr("cy", cy).attr("stroke", function() {
          return $$.color(d);
        }).attr("r", function(d2) {
          return $$.pointSelectR(d2) * 1.4;
        }).transition().duration(100).attr("r", r);
      };
      ChartInternal.prototype.unselectPoint = function(target, d, i) {
        var $$ = this;
        $$.config.data_onunselected.call($$.api, d, target.node());
        $$.main.select("." + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll("." + CLASS.selectedCircle + "-" + i).transition().duration(100).attr("r", 0).remove();
      };
      ChartInternal.prototype.togglePoint = function(selected, target, d, i) {
        selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);
      };
      ChartInternal.prototype.selectPath = function(target, d) {
        var $$ = this;
        $$.config.data_onselected.call($$, d, target.node());
        if ($$.config.interaction_brighten) {
          target.transition().duration(100).style("fill", function() {
            return $$.d3.rgb($$.color(d)).brighter(0.75);
          });
        }
      };
      ChartInternal.prototype.unselectPath = function(target, d) {
        var $$ = this;
        $$.config.data_onunselected.call($$, d, target.node());
        if ($$.config.interaction_brighten) {
          target.transition().duration(100).style("fill", function() {
            return $$.color(d);
          });
        }
      };
      ChartInternal.prototype.togglePath = function(selected, target, d, i) {
        selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);
      };
      ChartInternal.prototype.getToggle = function(that, d) {
        var $$ = this, toggle;
        if (that.nodeName === "circle") {
          if ($$.isStepType(d)) {
            toggle = function() {
            };
          } else {
            toggle = $$.togglePoint;
          }
        } else if (that.nodeName === "path") {
          toggle = $$.togglePath;
        }
        return toggle;
      };
      ChartInternal.prototype.toggleShape = function(that, d, i) {
        var $$ = this, d3 = $$.d3, config = $$.config, shape = d3.select(that), isSelected = shape.classed(CLASS.SELECTED), toggle = $$.getToggle(that, d).bind($$);
        if (config.data_selection_enabled && config.data_selection_isselectable(d)) {
          if (!config.data_selection_multiple) {
            $$.main.selectAll("." + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : "")).selectAll("." + CLASS.shape).each(function(d2, i2) {
              var shape2 = d3.select(this);
              if (shape2.classed(CLASS.SELECTED)) {
                toggle(false, shape2.classed(CLASS.SELECTED, false), d2, i2);
              }
            });
          }
          shape.classed(CLASS.SELECTED, !isSelected);
          toggle(!isSelected, shape, d, i);
        }
      };
      ChartInternal.prototype.initBar = function() {
        var $$ = this;
        $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.chartBars);
      };
      ChartInternal.prototype.updateTargetsForBar = function(targets) {
        var $$ = this, config = $$.config, mainBars, mainBarEnter, classChartBar = $$.classChartBar.bind($$), classBars = $$.classBars.bind($$), classFocus = $$.classFocus.bind($$);
        mainBars = $$.main.select("." + CLASS.chartBars).selectAll("." + CLASS.chartBar).data(targets).attr("class", function(d) {
          return classChartBar(d) + classFocus(d);
        });
        mainBarEnter = mainBars.enter().append("g").attr("class", classChartBar).style("pointer-events", "none");
        mainBarEnter.append("g").attr("class", classBars).style("cursor", function(d) {
          return config.data_selection_isselectable(d) ? "pointer" : null;
        });
      };
      ChartInternal.prototype.updateBar = function(durationForExit) {
        var $$ = this, barData = $$.barData.bind($$), classBar = $$.classBar.bind($$), initialOpacity = $$.initialOpacity.bind($$), color2 = function(d) {
          return $$.color(d.id);
        };
        var mainBar = $$.main.selectAll("." + CLASS.bars).selectAll("." + CLASS.bar).data(barData);
        var mainBarEnter = mainBar.enter().append("path").attr("class", classBar).style("stroke", color2).style("fill", color2);
        $$.mainBar = mainBarEnter.merge(mainBar).style("opacity", initialOpacity);
        mainBar.exit().transition().duration(durationForExit).style("opacity", 0);
      };
      ChartInternal.prototype.redrawBar = function(drawBar, withTransition, transition2) {
        var $$ = this;
        return [
          (withTransition ? this.mainBar.transition(transition2) : this.mainBar).attr("d", drawBar).style("stroke", this.color).style("fill", this.color).style("opacity", function(d) {
            return $$.isTargetToShow(d.id) ? 1 : 0;
          })
        ];
      };
      ChartInternal.prototype.getBarW = function(axis2, barTargetsNum) {
        var $$ = this, config = $$.config, w = typeof config.bar_width === "number" ? config.bar_width : barTargetsNum ? axis2.tickInterval() * config.bar_width_ratio / barTargetsNum : 0;
        return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;
      };
      ChartInternal.prototype.getBars = function(i, id2) {
        var $$ = this;
        return (id2 ? $$.main.selectAll("." + CLASS.bars + $$.getTargetSelectorSuffix(id2)) : $$.main).selectAll("." + CLASS.bar + (isValue(i) ? "-" + i : ""));
      };
      ChartInternal.prototype.expandBars = function(i, id2, reset) {
        var $$ = this;
        if (reset) {
          $$.unexpandBars();
        }
        $$.getBars(i, id2).classed(CLASS.EXPANDED, true);
      };
      ChartInternal.prototype.unexpandBars = function(i) {
        var $$ = this;
        $$.getBars(i).classed(CLASS.EXPANDED, false);
      };
      ChartInternal.prototype.generateDrawBar = function(barIndices, isSub) {
        var $$ = this, config = $$.config, getPoints = $$.generateGetBarPoints(barIndices, isSub);
        return function(d, i) {
          var points = getPoints(d, i);
          var indexX = config.axis_rotated ? 1 : 0;
          var indexY = config.axis_rotated ? 0 : 1;
          var path2 = "M " + points[0][indexX] + "," + points[0][indexY] + " L" + points[1][indexX] + "," + points[1][indexY] + " L" + points[2][indexX] + "," + points[2][indexY] + " L" + points[3][indexX] + "," + points[3][indexY] + " z";
          return path2;
        };
      };
      ChartInternal.prototype.generateGetBarPoints = function(barIndices, isSub) {
        var $$ = this, axis2 = isSub ? $$.subXAxis : $$.xAxis, barTargetsNum = barIndices.__max__ + 1, barW = $$.getBarW(axis2, barTargetsNum), barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub), barY = $$.getShapeY(!!isSub), barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub), barSpaceOffset = barW * ($$.config.bar_space / 2), yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function(d, i) {
          var y06 = yScale.call($$, d.id)(0), offset = barOffset(d, i) || y06, posX = barX(d), posY = barY(d);
          if ($$.config.axis_rotated) {
            if (0 < d.value && posY < y06 || d.value < 0 && y06 < posY) {
              posY = y06;
            }
          }
          posY -= y06 - offset;
          return [
            [posX + barSpaceOffset, offset],
            [posX + barSpaceOffset, posY],
            [posX + barW - barSpaceOffset, posY],
            [posX + barW - barSpaceOffset, offset]
          ];
        };
      };
      ChartInternal.prototype.isWithinBar = function(mouse, barShape) {
        return isWithinBox(mouse, getBBox(barShape), 2);
      };
      ChartInternal.prototype.getShapeIndices = function(typeFilter) {
        var $$ = this, config = $$.config, indices = {}, i = 0, j, k2;
        $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function(d) {
          for (j = 0; j < config.data_groups.length; j++) {
            if (config.data_groups[j].indexOf(d.id) < 0) {
              continue;
            }
            for (k2 = 0; k2 < config.data_groups[j].length; k2++) {
              if (config.data_groups[j][k2] in indices) {
                indices[d.id] = indices[config.data_groups[j][k2]];
                break;
              }
            }
          }
          if (isUndefined(indices[d.id])) {
            indices[d.id] = i++;
          }
        });
        indices.__max__ = i - 1;
        return indices;
      };
      ChartInternal.prototype.getShapeX = function(offset, targetsNum, indices, isSub) {
        var $$ = this, scale = isSub ? $$.subX : $$.x;
        return function(d) {
          var index2 = d.id in indices ? indices[d.id] : 0;
          return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index2) : 0;
        };
      };
      ChartInternal.prototype.getShapeY = function(isSub) {
        var $$ = this;
        return function(d) {
          var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);
          return scale($$.isTargetNormalized(d.id) ? $$.getRatio("index", d, true) : d.value);
        };
      };
      ChartInternal.prototype.getShapeOffset = function(typeFilter, indices, isSub) {
        var $$ = this, targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))), targetIds = targets.map(function(t) {
          return t.id;
        });
        return function(d, i) {
          var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id), y06 = scale(0), offset = y06;
          targets.forEach(function(t) {
            var rowValues = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;
            var isTargetNormalized = $$.isTargetNormalized(d.id);
            var values = rowValues.map(function(v) {
              return isTargetNormalized ? $$.getRatio("index", v, true) : v.value;
            });
            if (t.id === d.id || indices[t.id] !== indices[d.id]) {
              return;
            }
            if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {
              if (isUndefined(rowValues[i]) || +rowValues[i].x !== +d.x) {
                i = -1;
                rowValues.forEach(function(v, j) {
                  var x12 = v.x.constructor === Date ? +v.x : v.x;
                  var x22 = d.x.constructor === Date ? +d.x : d.x;
                  if (x12 === x22) {
                    i = j;
                  }
                });
              }
              if (i in rowValues && rowValues[i].value * d.value >= 0) {
                offset += scale(values[i]) - y06;
              }
            }
          });
          return offset;
        };
      };
      ChartInternal.prototype.isWithinShape = function(that, d) {
        var $$ = this, shape = $$.d3.select(that), isWithin;
        if (!$$.isTargetToShow(d.id)) {
          isWithin = false;
        } else if (that.nodeName === "circle") {
          isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);
        } else if (that.nodeName === "path") {
          isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar($$.d3.mouse(that), that) : true;
        }
        return isWithin;
      };
      ChartInternal.prototype.getInterpolate = function(d) {
        var $$ = this, d3 = $$.d3, types = {
          linear: d3.curveLinear,
          "linear-closed": d3.curveLinearClosed,
          basis: d3.curveBasis,
          "basis-open": d3.curveBasisOpen,
          "basis-closed": d3.curveBasisClosed,
          bundle: d3.curveBundle,
          cardinal: d3.curveCardinal,
          "cardinal-open": d3.curveCardinalOpen,
          "cardinal-closed": d3.curveCardinalClosed,
          monotone: d3.curveMonotoneX,
          step: d3.curveStep,
          "step-before": d3.curveStepBefore,
          "step-after": d3.curveStepAfter
        }, type2;
        if ($$.isSplineType(d)) {
          type2 = types[$$.config.spline_interpolation_type] || types.cardinal;
        } else if ($$.isStepType(d)) {
          type2 = types[$$.config.line_step_type];
        } else {
          type2 = types.linear;
        }
        return type2;
      };
      ChartInternal.prototype.initLine = function() {
        var $$ = this;
        $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.chartLines);
      };
      ChartInternal.prototype.updateTargetsForLine = function(targets) {
        var $$ = this, config = $$.config, mainLines, mainLineEnter, classChartLine = $$.classChartLine.bind($$), classLines = $$.classLines.bind($$), classAreas = $$.classAreas.bind($$), classCircles = $$.classCircles.bind($$), classFocus = $$.classFocus.bind($$);
        mainLines = $$.main.select("." + CLASS.chartLines).selectAll("." + CLASS.chartLine).data(targets).attr("class", function(d) {
          return classChartLine(d) + classFocus(d);
        });
        mainLineEnter = mainLines.enter().append("g").attr("class", classChartLine).style("opacity", 0).style("pointer-events", "none");
        mainLineEnter.append("g").attr("class", classLines);
        mainLineEnter.append("g").attr("class", classAreas);
        mainLineEnter.append("g").attr("class", function(d) {
          return $$.generateClass(CLASS.selectedCircles, d.id);
        });
        mainLineEnter.append("g").attr("class", classCircles).style("cursor", function(d) {
          return config.data_selection_isselectable(d) ? "pointer" : null;
        });
        targets.forEach(function(t) {
          $$.main.selectAll("." + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll("." + CLASS.selectedCircle).each(function(d) {
            d.value = t.values[d.index].value;
          });
        });
      };
      ChartInternal.prototype.updateLine = function(durationForExit) {
        var $$ = this;
        var mainLine = $$.main.selectAll("." + CLASS.lines).selectAll("." + CLASS.line).data($$.lineData.bind($$));
        var mainLineEnter = mainLine.enter().append("path").attr("class", $$.classLine.bind($$)).style("stroke", $$.color);
        $$.mainLine = mainLineEnter.merge(mainLine).style("opacity", $$.initialOpacity.bind($$)).style("shape-rendering", function(d) {
          return $$.isStepType(d) ? "crispEdges" : "";
        }).attr("transform", null);
        mainLine.exit().transition().duration(durationForExit).style("opacity", 0);
      };
      ChartInternal.prototype.redrawLine = function(drawLine, withTransition, transition2) {
        return [
          (withTransition ? this.mainLine.transition(transition2) : this.mainLine).attr("d", drawLine).style("stroke", this.color).style("opacity", 1)
        ];
      };
      ChartInternal.prototype.generateDrawLine = function(lineIndices, isSub) {
        var $$ = this, config = $$.config, line = $$.d3.line(), getPoints = $$.generateGetLinePoints(lineIndices, isSub), yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale, xValue = function(d) {
          return (isSub ? $$.subxx : $$.xx).call($$, d);
        }, yValue = function(d, i) {
          return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);
        };
        line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);
        if (!config.line_connectNull) {
          line = line.defined(function(d) {
            return d.value != null;
          });
        }
        return function(d) {
          var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values, x5 = isSub ? $$.subX : $$.x, y5 = yScaleGetter.call($$, d.id), x06 = 0, y06 = 0, path2;
          if ($$.isLineType(d)) {
            if (config.data_regions[d.id]) {
              path2 = $$.lineWithRegions(values, x5, y5, config.data_regions[d.id]);
            } else {
              if ($$.isStepType(d)) {
                values = $$.convertValuesToStep(values);
              }
              path2 = line.curve($$.getInterpolate(d))(values);
            }
          } else {
            if (values[0]) {
              x06 = x5(values[0].x);
              y06 = y5(values[0].value);
            }
            path2 = config.axis_rotated ? "M " + y06 + " " + x06 : "M " + x06 + " " + y06;
          }
          return path2 ? path2 : "M 0 0";
        };
      };
      ChartInternal.prototype.generateGetLinePoints = function(lineIndices, isSub) {
        var $$ = this, config = $$.config, lineTargetsNum = lineIndices.__max__ + 1, x5 = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub), y5 = $$.getShapeY(!!isSub), lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub), yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function(d, i) {
          var y06 = yScale.call($$, d.id)(0), offset = lineOffset(d, i) || y06, posX = x5(d), posY = y5(d);
          if (config.axis_rotated) {
            if (0 < d.value && posY < y06 || d.value < 0 && y06 < posY) {
              posY = y06;
            }
          }
          return [
            [posX, posY - (y06 - offset)],
            [posX, posY - (y06 - offset)],
            [posX, posY - (y06 - offset)],
            [posX, posY - (y06 - offset)]
            // needed for compatibility
          ];
        };
      };
      ChartInternal.prototype.lineWithRegions = function(d, x5, y5, _regions) {
        var $$ = this, config = $$.config, prev = -1, i, j, s2 = "M", sWithRegion, xp, yp, dx, dy, dd, diff, diffx2, xOffset = $$.isCategorized() ? 0.5 : 0, xValue, yValue, regions = [];
        function isWithinRegions(x6, regions2) {
          var i2;
          for (i2 = 0; i2 < regions2.length; i2++) {
            if (regions2[i2].start < x6 && x6 <= regions2[i2].end) {
              return true;
            }
          }
          return false;
        }
        if (isDefined(_regions)) {
          for (i = 0; i < _regions.length; i++) {
            regions[i] = {};
            if (isUndefined(_regions[i].start)) {
              regions[i].start = d[0].x;
            } else {
              regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;
            }
            if (isUndefined(_regions[i].end)) {
              regions[i].end = d[d.length - 1].x;
            } else {
              regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;
            }
          }
        }
        xValue = config.axis_rotated ? function(d2) {
          return y5(d2.value);
        } : function(d2) {
          return x5(d2.x);
        };
        yValue = config.axis_rotated ? function(d2) {
          return x5(d2.x);
        } : function(d2) {
          return y5(d2.value);
        };
        function generateM(points) {
          return "M" + points[0][0] + " " + points[0][1] + " " + points[1][0] + " " + points[1][1];
        }
        if ($$.isTimeSeries()) {
          sWithRegion = function(d0, d1, j2, diff2) {
            var x06 = d0.x.getTime(), x_diff = d1.x - d0.x, xv0 = new Date(x06 + x_diff * j2), xv1 = new Date(x06 + x_diff * (j2 + diff2)), points;
            if (config.axis_rotated) {
              points = [
                [y5(yp(j2)), x5(xv0)],
                [y5(yp(j2 + diff2)), x5(xv1)]
              ];
            } else {
              points = [
                [x5(xv0), y5(yp(j2))],
                [x5(xv1), y5(yp(j2 + diff2))]
              ];
            }
            return generateM(points);
          };
        } else {
          sWithRegion = function(d0, d1, j2, diff2) {
            var points;
            if (config.axis_rotated) {
              points = [
                [y5(yp(j2), true), x5(xp(j2))],
                [y5(yp(j2 + diff2), true), x5(xp(j2 + diff2))]
              ];
            } else {
              points = [
                [x5(xp(j2), true), y5(yp(j2))],
                [x5(xp(j2 + diff2), true), y5(yp(j2 + diff2))]
              ];
            }
            return generateM(points);
          };
        }
        for (i = 0; i < d.length; i++) {
          if (isUndefined(regions) || !isWithinRegions(d[i].x, regions)) {
            s2 += " " + xValue(d[i]) + " " + yValue(d[i]);
          } else {
            xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());
            yp = $$.getScale(d[i - 1].value, d[i].value);
            dx = x5(d[i].x) - x5(d[i - 1].x);
            dy = y5(d[i].value) - y5(d[i - 1].value);
            dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
            diff = 2 / dd;
            diffx2 = diff * 2;
            for (j = diff; j <= 1; j += diffx2) {
              s2 += sWithRegion(d[i - 1], d[i], j, diff);
            }
          }
          prev = d[i].x;
        }
        return s2;
      };
      ChartInternal.prototype.updateArea = function(durationForExit) {
        var $$ = this, d3 = $$.d3;
        var mainArea = $$.main.selectAll("." + CLASS.areas).selectAll("." + CLASS.area).data($$.lineData.bind($$));
        var mainAreaEnter = mainArea.enter().append("path").attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function() {
          $$.orgAreaOpacity = +d3.select(this).style("opacity");
          return 0;
        });
        $$.mainArea = mainAreaEnter.merge(mainArea).style("opacity", $$.orgAreaOpacity);
        mainArea.exit().transition().duration(durationForExit).style("opacity", 0);
      };
      ChartInternal.prototype.redrawArea = function(drawArea, withTransition, transition2) {
        return [
          (withTransition ? this.mainArea.transition(transition2) : this.mainArea).attr("d", drawArea).style("fill", this.color).style("opacity", this.orgAreaOpacity)
        ];
      };
      ChartInternal.prototype.generateDrawArea = function(areaIndices, isSub) {
        var $$ = this, config = $$.config, area = $$.d3.area(), getPoints = $$.generateGetAreaPoints(areaIndices, isSub), yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale, xValue = function(d) {
          return (isSub ? $$.subxx : $$.xx).call($$, d);
        }, value0 = function(d, i) {
          return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));
        }, value1 = function(d, i) {
          return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);
        };
        area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(config.area_above ? 0 : value0).y1(value1);
        if (!config.line_connectNull) {
          area = area.defined(function(d) {
            return d.value !== null;
          });
        }
        return function(d) {
          var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values, x06 = 0, y06 = 0, path2;
          if ($$.isAreaType(d)) {
            if ($$.isStepType(d)) {
              values = $$.convertValuesToStep(values);
            }
            path2 = area.curve($$.getInterpolate(d))(values);
          } else {
            if (values[0]) {
              x06 = $$.x(values[0].x);
              y06 = $$.getYScale(d.id)(values[0].value);
            }
            path2 = config.axis_rotated ? "M " + y06 + " " + x06 : "M " + x06 + " " + y06;
          }
          return path2 ? path2 : "M 0 0";
        };
      };
      ChartInternal.prototype.getAreaBaseValue = function() {
        return 0;
      };
      ChartInternal.prototype.generateGetAreaPoints = function(areaIndices, isSub) {
        var $$ = this, config = $$.config, areaTargetsNum = areaIndices.__max__ + 1, x5 = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub), y5 = $$.getShapeY(!!isSub), areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub), yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function(d, i) {
          var y06 = yScale.call($$, d.id)(0), offset = areaOffset(d, i) || y06, posX = x5(d), posY = y5(d);
          if (config.axis_rotated) {
            if (0 < d.value && posY < y06 || d.value < 0 && y06 < posY) {
              posY = y06;
            }
          }
          return [
            [posX, offset],
            [posX, posY - (y06 - offset)],
            [posX, posY - (y06 - offset)],
            [posX, offset]
            // needed for compatibility
          ];
        };
      };
      ChartInternal.prototype.updateCircle = function(cx, cy) {
        var $$ = this;
        var mainCircle = $$.main.selectAll("." + CLASS.circles).selectAll("." + CLASS.circle).data($$.lineOrScatterOrStanfordData.bind($$));
        var mainCircleEnter = mainCircle.enter().append("circle").attr("shape-rendering", $$.isStanfordGraphType() ? "crispEdges" : "").attr("class", $$.classCircle.bind($$)).attr("cx", cx).attr("cy", cy).attr("r", $$.pointR.bind($$)).style("color", $$.isStanfordGraphType() ? $$.getStanfordPointColor.bind($$) : $$.color);
        $$.mainCircle = mainCircleEnter.merge(mainCircle).style("opacity", $$.isStanfordGraphType() ? 1 : $$.initialOpacityForCircle.bind($$));
        mainCircle.exit().style("opacity", 0);
      };
      ChartInternal.prototype.redrawCircle = function(cx, cy, withTransition, transition2) {
        var $$ = this, selectedCircles = $$.main.selectAll("." + CLASS.selectedCircle);
        return [
          (withTransition ? $$.mainCircle.transition(transition2) : $$.mainCircle).style("opacity", this.opacityForCircle.bind($$)).style("color", $$.isStanfordGraphType() ? $$.getStanfordPointColor.bind($$) : $$.color).attr("cx", cx).attr("cy", cy),
          (withTransition ? selectedCircles.transition(transition2) : selectedCircles).attr("cx", cx).attr("cy", cy)
        ];
      };
      ChartInternal.prototype.circleX = function(d) {
        return d.x || d.x === 0 ? this.x(d.x) : null;
      };
      ChartInternal.prototype.updateCircleY = function() {
        var $$ = this, lineIndices, getPoints;
        if ($$.config.data_groups.length > 0) {
          lineIndices = $$.getShapeIndices($$.isLineType), getPoints = $$.generateGetLinePoints(lineIndices);
          $$.circleY = function(d, i) {
            return getPoints(d, i)[0][1];
          };
        } else {
          $$.circleY = function(d) {
            return $$.getYScale(d.id)(d.value);
          };
        }
      };
      ChartInternal.prototype.getCircles = function(i, id2) {
        var $$ = this;
        return (id2 ? $$.main.selectAll("." + CLASS.circles + $$.getTargetSelectorSuffix(id2)) : $$.main).selectAll("." + CLASS.circle + (isValue(i) ? "-" + i : ""));
      };
      ChartInternal.prototype.expandCircles = function(i, id2, reset) {
        var $$ = this, r = $$.pointExpandedR.bind($$);
        if (reset) {
          $$.unexpandCircles();
        }
        $$.getCircles(i, id2).classed(CLASS.EXPANDED, true).attr("r", r);
      };
      ChartInternal.prototype.unexpandCircles = function(i) {
        var $$ = this, r = $$.pointR.bind($$);
        $$.getCircles(i).filter(function() {
          return $$.d3.select(this).classed(CLASS.EXPANDED);
        }).classed(CLASS.EXPANDED, false).attr("r", r);
      };
      ChartInternal.prototype.pointR = function(d) {
        var $$ = this, config = $$.config;
        return $$.isStepType(d) ? 0 : isFunction(config.point_r) ? config.point_r(d) : config.point_r;
      };
      ChartInternal.prototype.pointExpandedR = function(d) {
        var $$ = this, config = $$.config;
        if (config.point_focus_expand_enabled) {
          return isFunction(config.point_focus_expand_r) ? config.point_focus_expand_r(d) : config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75;
        } else {
          return $$.pointR(d);
        }
      };
      ChartInternal.prototype.pointSelectR = function(d) {
        var $$ = this, config = $$.config;
        return isFunction(config.point_select_r) ? config.point_select_r(d) : config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;
      };
      ChartInternal.prototype.isWithinCircle = function(that, r) {
        var d3 = this.d3, mouse = d3.mouse(that), d3_this = d3.select(that), cx = +d3_this.attr("cx"), cy = +d3_this.attr("cy");
        return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;
      };
      ChartInternal.prototype.isWithinStep = function(that, y5) {
        return Math.abs(y5 - this.d3.mouse(that)[1]) < 30;
      };
      ChartInternal.prototype.getCurrentWidth = function() {
        var $$ = this, config = $$.config;
        return config.size_width ? config.size_width : $$.getParentWidth();
      };
      ChartInternal.prototype.getCurrentHeight = function() {
        var $$ = this, config = $$.config, h = config.size_height ? config.size_height : $$.getParentHeight();
        return h > 0 ? h : 320 / ($$.hasType("gauge") && !config.gauge_fullCircle ? 2 : 1);
      };
      ChartInternal.prototype.getCurrentPaddingTop = function() {
        var $$ = this, config = $$.config, padding = isValue(config.padding_top) ? config.padding_top : 0;
        if ($$.title && $$.title.node()) {
          padding += $$.getTitlePadding();
        }
        return padding;
      };
      ChartInternal.prototype.getCurrentPaddingBottom = function() {
        var config = this.config;
        return isValue(config.padding_bottom) ? config.padding_bottom : 0;
      };
      ChartInternal.prototype.getCurrentPaddingLeft = function(withoutRecompute) {
        var $$ = this, config = $$.config;
        if (isValue(config.padding_left)) {
          return config.padding_left;
        } else if (config.axis_rotated) {
          return !config.axis_x_show || config.axis_x_inner ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId("x", withoutRecompute)), 40);
        } else if (!config.axis_y_show || config.axis_y_inner) {
          return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;
        } else {
          return ceil10($$.getAxisWidthByAxisId("y", withoutRecompute));
        }
      };
      ChartInternal.prototype.getCurrentPaddingRight = function() {
        var $$ = this, config = $$.config, padding = 0, defaultPadding = 10, legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;
        if (isValue(config.padding_right)) {
          padding = config.padding_right + 1;
        } else if (config.axis_rotated) {
          padding = defaultPadding + legendWidthOnRight;
        } else if (!config.axis_y2_show || config.axis_y2_inner) {
          padding = 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);
        } else {
          padding = ceil10($$.getAxisWidthByAxisId("y2")) + legendWidthOnRight;
        }
        if ($$.colorScale && $$.colorScale.node()) {
          padding += $$.getColorScalePadding();
        }
        return padding;
      };
      ChartInternal.prototype.getParentRectValue = function(key) {
        var parent = this.selectChart.node(), v;
        while (parent && parent.tagName !== "BODY") {
          try {
            v = parent.getBoundingClientRect()[key];
          } catch (e) {
            if (key === "width") {
              v = parent.offsetWidth;
            }
          }
          if (v) {
            break;
          }
          parent = parent.parentNode;
        }
        return v;
      };
      ChartInternal.prototype.getParentWidth = function() {
        return this.getParentRectValue("width");
      };
      ChartInternal.prototype.getParentHeight = function() {
        var h = this.selectChart.style("height");
        return h.indexOf("px") > 0 ? +h.replace("px", "") : 0;
      };
      ChartInternal.prototype.getSvgLeft = function(withoutRecompute) {
        var $$ = this, config = $$.config, hasLeftAxisRect = config.axis_rotated || !config.axis_rotated && !config.axis_y_inner, leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY, leftAxis = $$.main.select("." + leftAxisClass).node(), svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : { right: 0 }, chartRect = $$.selectChart.node().getBoundingClientRect(), hasArc = $$.hasArcType(), svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));
        return svgLeft > 0 ? svgLeft : 0;
      };
      ChartInternal.prototype.getAxisWidthByAxisId = function(id2, withoutRecompute) {
        var $$ = this, position = $$.axis.getLabelPositionById(id2);
        return $$.axis.getMaxTickWidth(id2, withoutRecompute) + (position.isInner ? 20 : 40);
      };
      ChartInternal.prototype.getHorizontalAxisHeight = function(axisId, isSubchart) {
        var $$ = this, config = $$.config, h = 30;
        if (axisId === "x" && !(isDefined(isSubchart) && isSubchart ? config.subchart_axis_x_show : config.axis_x_show)) {
          return 8;
        }
        if (axisId === "x" && config.axis_x_height) {
          return config.axis_x_height;
        }
        if (axisId === "y" && !config.axis_y_show) {
          return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1;
        }
        if (axisId === "y2" && !config.axis_y2_show) {
          return $$.rotated_padding_top;
        }
        if (axisId === "x" && !config.axis_rotated && config.axis_x_tick_rotate) {
          h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - Math.abs(config.axis_x_tick_rotate)) / 180);
        }
        if (axisId === "y" && config.axis_rotated && config.axis_y_tick_rotate) {
          h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - Math.abs(config.axis_y_tick_rotate)) / 180);
        }
        return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === "y2" ? -10 : 0);
      };
      ChartInternal.prototype.initBrush = function(scale) {
        var $$ = this, d3 = $$.d3;
        $$.brush = ($$.config.axis_rotated ? d3.brushY() : d3.brushX()).on("brush", function() {
          var event2 = d3.event.sourceEvent;
          if (event2 && event2.type === "zoom") {
            return;
          }
          $$.redrawForBrush();
        }).on("end", function() {
          var event2 = d3.event.sourceEvent;
          if (event2 && event2.type === "zoom") {
            return;
          }
          if ($$.brush.empty() && event2 && event2.type !== "end") {
            $$.brush.clear();
          }
        });
        $$.brush.updateExtent = function() {
          var range2 = this.scale.range(), extent;
          if ($$.config.axis_rotated) {
            extent = [
              [0, range2[0]],
              [$$.width2, range2[1]]
            ];
          } else {
            extent = [
              [range2[0], 0],
              [range2[1], $$.height2]
            ];
          }
          this.extent(extent);
          return this;
        };
        $$.brush.updateScale = function(scale2) {
          this.scale = scale2;
          return this;
        };
        $$.brush.update = function(scale2) {
          this.updateScale(scale2 || $$.subX).updateExtent();
          $$.context.select("." + CLASS.brush).call(this);
        };
        $$.brush.clear = function() {
          $$.context.select("." + CLASS.brush).call($$.brush.move, null);
        };
        $$.brush.selection = function() {
          return d3.brushSelection($$.context.select("." + CLASS.brush).node());
        };
        $$.brush.selectionAsValue = function(selectionAsValue, withTransition) {
          var selection2, brush2;
          if (selectionAsValue) {
            if ($$.context) {
              selection2 = [
                this.scale(selectionAsValue[0]),
                this.scale(selectionAsValue[1])
              ];
              brush2 = $$.context.select("." + CLASS.brush);
              if (withTransition) {
                brush2 = brush2.transition();
              }
              $$.brush.move(brush2, selection2);
            }
            return [];
          }
          selection2 = $$.brush.selection() || [0, 0];
          return [this.scale.invert(selection2[0]), this.scale.invert(selection2[1])];
        };
        $$.brush.empty = function() {
          var selection2 = $$.brush.selection();
          return !selection2 || selection2[0] === selection2[1];
        };
        return $$.brush.updateScale(scale);
      };
      ChartInternal.prototype.initSubchart = function() {
        var $$ = this, config = $$.config, context = $$.context = $$.svg.append("g").attr("transform", $$.getTranslate("context"));
        context.style("visibility", "visible");
        context.append("g").attr("clip-path", $$.clipPathForSubchart).attr("class", CLASS.chart);
        context.select("." + CLASS.chart).append("g").attr("class", CLASS.chartBars);
        context.select("." + CLASS.chart).append("g").attr("class", CLASS.chartLines);
        context.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.brush);
        $$.axes.subx = context.append("g").attr("class", CLASS.axisX).attr("transform", $$.getTranslate("subx")).attr("clip-path", config.axis_rotated ? "" : $$.clipPathForXAxis).style("visibility", config.subchart_axis_x_show ? "visible" : "hidden");
      };
      ChartInternal.prototype.initSubchartBrush = function() {
        var $$ = this;
        $$.initBrush($$.subX).updateExtent();
        $$.context.select("." + CLASS.brush).call($$.brush);
      };
      ChartInternal.prototype.updateTargetsForSubchart = function(targets) {
        var $$ = this, context = $$.context, config = $$.config, contextLineEnter, contextLine, contextBarEnter, contextBar, classChartBar = $$.classChartBar.bind($$), classBars = $$.classBars.bind($$), classChartLine = $$.classChartLine.bind($$), classLines = $$.classLines.bind($$), classAreas = $$.classAreas.bind($$);
        contextBar = context.select("." + CLASS.chartBars).selectAll("." + CLASS.chartBar).data(targets);
        contextBarEnter = contextBar.enter().append("g").style("opacity", 0);
        contextBarEnter.merge(contextBar).attr("class", classChartBar);
        contextBarEnter.append("g").attr("class", classBars);
        contextLine = context.select("." + CLASS.chartLines).selectAll("." + CLASS.chartLine).data(targets);
        contextLineEnter = contextLine.enter().append("g").style("opacity", 0);
        contextLineEnter.merge(contextLine).attr("class", classChartLine);
        contextLineEnter.append("g").attr("class", classLines);
        contextLineEnter.append("g").attr("class", classAreas);
        context.selectAll("." + CLASS.brush + " rect").attr(config.axis_rotated ? "width" : "height", config.axis_rotated ? $$.width2 : $$.height2);
      };
      ChartInternal.prototype.updateBarForSubchart = function(durationForExit) {
        var $$ = this;
        var contextBar = $$.context.selectAll("." + CLASS.bars).selectAll("." + CLASS.bar).data($$.barData.bind($$));
        var contextBarEnter = contextBar.enter().append("path").attr("class", $$.classBar.bind($$)).style("stroke", "none").style("fill", $$.color);
        contextBar.exit().transition().duration(durationForExit).style("opacity", 0).remove();
        $$.contextBar = contextBarEnter.merge(contextBar).style("opacity", $$.initialOpacity.bind($$));
      };
      ChartInternal.prototype.redrawBarForSubchart = function(drawBarOnSub, withTransition, duration) {
        (withTransition ? this.contextBar.transition(Math.random().toString()).duration(duration) : this.contextBar).attr("d", drawBarOnSub).style("opacity", 1);
      };
      ChartInternal.prototype.updateLineForSubchart = function(durationForExit) {
        var $$ = this;
        var contextLine = $$.context.selectAll("." + CLASS.lines).selectAll("." + CLASS.line).data($$.lineData.bind($$));
        var contextLineEnter = contextLine.enter().append("path").attr("class", $$.classLine.bind($$)).style("stroke", $$.color);
        contextLine.exit().transition().duration(durationForExit).style("opacity", 0).remove();
        $$.contextLine = contextLineEnter.merge(contextLine).style("opacity", $$.initialOpacity.bind($$));
      };
      ChartInternal.prototype.redrawLineForSubchart = function(drawLineOnSub, withTransition, duration) {
        (withTransition ? this.contextLine.transition(Math.random().toString()).duration(duration) : this.contextLine).attr("d", drawLineOnSub).style("opacity", 1);
      };
      ChartInternal.prototype.updateAreaForSubchart = function(durationForExit) {
        var $$ = this, d3 = $$.d3;
        var contextArea = $$.context.selectAll("." + CLASS.areas).selectAll("." + CLASS.area).data($$.lineData.bind($$));
        var contextAreaEnter = contextArea.enter().append("path").attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function() {
          $$.orgAreaOpacity = +d3.select(this).style("opacity");
          return 0;
        });
        contextArea.exit().transition().duration(durationForExit).style("opacity", 0).remove();
        $$.contextArea = contextAreaEnter.merge(contextArea).style("opacity", 0);
      };
      ChartInternal.prototype.redrawAreaForSubchart = function(drawAreaOnSub, withTransition, duration) {
        (withTransition ? this.contextArea.transition(Math.random().toString()).duration(duration) : this.contextArea).attr("d", drawAreaOnSub).style("fill", this.color).style("opacity", this.orgAreaOpacity);
      };
      ChartInternal.prototype.redrawSubchart = function(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {
        var $$ = this, d3 = $$.d3, drawAreaOnSub, drawBarOnSub, drawLineOnSub;
        if (d3.event && d3.event.type === "zoom") {
          $$.brush.selectionAsValue($$.x.orgDomain());
        }
        if (withSubchart) {
          if (!$$.brush.empty()) {
            $$.brush.selectionAsValue($$.x.orgDomain());
          }
          drawAreaOnSub = $$.generateDrawArea(areaIndices, true);
          drawBarOnSub = $$.generateDrawBar(barIndices, true);
          drawLineOnSub = $$.generateDrawLine(lineIndices, true);
          $$.updateBarForSubchart(duration);
          $$.updateLineForSubchart(duration);
          $$.updateAreaForSubchart(duration);
          $$.redrawBarForSubchart(drawBarOnSub, duration, duration);
          $$.redrawLineForSubchart(drawLineOnSub, duration, duration);
          $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);
        }
      };
      ChartInternal.prototype.redrawForBrush = function() {
        var $$ = this, x5 = $$.x, d3 = $$.d3, s2;
        $$.redraw({
          withTransition: false,
          withY: $$.config.zoom_rescale,
          withSubchart: false,
          withUpdateXDomain: true,
          withEventRect: false,
          withDimension: false
        });
        s2 = d3.event.selection || $$.brush.scale.range();
        $$.main.select("." + CLASS.eventRect).call($$.zoom.transform, d3.zoomIdentity.scale($$.width / (s2[1] - s2[0])).translate(-s2[0], 0));
        $$.config.subchart_onbrush.call($$.api, x5.orgDomain());
      };
      ChartInternal.prototype.transformContext = function(withTransition, transitions) {
        var $$ = this, subXAxis;
        if (transitions && transitions.axisSubX) {
          subXAxis = transitions.axisSubX;
        } else {
          subXAxis = $$.context.select("." + CLASS.axisX);
          if (withTransition) {
            subXAxis = subXAxis.transition();
          }
        }
        $$.context.attr("transform", $$.getTranslate("context"));
        subXAxis.attr("transform", $$.getTranslate("subx"));
      };
      ChartInternal.prototype.getDefaultSelection = function() {
        var $$ = this, config = $$.config, selection2 = isFunction(config.axis_x_selection) ? config.axis_x_selection($$.getXDomain($$.data.targets)) : config.axis_x_selection;
        if ($$.isTimeSeries()) {
          selection2 = [$$.parseDate(selection2[0]), $$.parseDate(selection2[1])];
        }
        return selection2;
      };
      ChartInternal.prototype.removeSubchart = function() {
        var $$ = this;
        $$.brush = null;
        $$.context.remove();
        $$.context = null;
      };
      ChartInternal.prototype.initText = function() {
        var $$ = this;
        $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.chartTexts);
        $$.mainText = $$.d3.selectAll([]);
      };
      ChartInternal.prototype.updateTargetsForText = function(targets) {
        var $$ = this, classChartText = $$.classChartText.bind($$), classTexts = $$.classTexts.bind($$), classFocus = $$.classFocus.bind($$);
        var mainText = $$.main.select("." + CLASS.chartTexts).selectAll("." + CLASS.chartText).data(targets);
        var mainTextEnter = mainText.enter().append("g").attr("class", classChartText).style("opacity", 0).style("pointer-events", "none");
        mainTextEnter.append("g").attr("class", classTexts);
        mainTextEnter.merge(mainText).attr("class", function(d) {
          return classChartText(d) + classFocus(d);
        });
      };
      ChartInternal.prototype.updateText = function(xForText, yForText, durationForExit) {
        var $$ = this, config = $$.config, barOrLineData = $$.barOrLineData.bind($$), classText = $$.classText.bind($$);
        var mainText = $$.main.selectAll("." + CLASS.texts).selectAll("." + CLASS.text).data(barOrLineData);
        var mainTextEnter = mainText.enter().append("text").attr("class", classText).attr("text-anchor", function(d) {
          return config.axis_rotated ? d.value < 0 ? "end" : "start" : "middle";
        }).style("stroke", "none").attr("x", xForText).attr("y", yForText).style("fill", function(d) {
          return $$.color(d);
        }).style("fill-opacity", 0);
        $$.mainText = mainTextEnter.merge(mainText).text(function(d, i, j) {
          return $$.dataLabelFormat(d.id)(d.value, d.id, i, j);
        });
        mainText.exit().transition().duration(durationForExit).style("fill-opacity", 0).remove();
      };
      ChartInternal.prototype.redrawText = function(xForText, yForText, forFlow, withTransition, transition2) {
        return [
          (withTransition ? this.mainText.transition(transition2) : this.mainText).attr("x", xForText).attr("y", yForText).style("fill", this.color).style("fill-opacity", forFlow ? 0 : this.opacityForText.bind(this))
        ];
      };
      ChartInternal.prototype.getTextRect = function(text, cls, element) {
        var dummy = this.d3.select("body").append("div").classed("c3", true), svg2 = dummy.append("svg").style("visibility", "hidden").style("position", "fixed").style("top", 0).style("left", 0), font = this.d3.select(element).style("font"), rect;
        svg2.selectAll(".dummy").data([text]).enter().append("text").classed(cls ? cls : "", true).style("font", font).text(text).each(function() {
          rect = getBBox(this);
        });
        dummy.remove();
        return rect;
      };
      ChartInternal.prototype.generateXYForText = function(areaIndices, barIndices, lineIndices, forX) {
        var $$ = this, getAreaPoints = $$.generateGetAreaPoints(areaIndices, false), getBarPoints = $$.generateGetBarPoints(barIndices, false), getLinePoints = $$.generateGetLinePoints(lineIndices, false), getter = forX ? $$.getXForText : $$.getYForText;
        return function(d, i) {
          var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;
          return getter.call($$, getPoints(d, i), d, this);
        };
      };
      ChartInternal.prototype.getXForText = function(points, d, textElement) {
        var $$ = this, box = getBBox(textElement), xPos, padding;
        if ($$.config.axis_rotated) {
          padding = $$.isBarType(d) ? 4 : 6;
          xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);
        } else {
          xPos = $$.hasType("bar") ? (points[2][0] + points[0][0]) / 2 : points[0][0];
        }
        if (d.value === null) {
          if (xPos > $$.width) {
            xPos = $$.width - box.width;
          } else if (xPos < 0) {
            xPos = 4;
          }
        }
        return xPos;
      };
      ChartInternal.prototype.getYForText = function(points, d, textElement) {
        var $$ = this, box = getBBox(textElement), yPos;
        if ($$.config.axis_rotated) {
          yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;
        } else {
          yPos = points[2][1];
          if (d.value < 0 || d.value === 0 && !$$.hasPositiveValue) {
            yPos += box.height;
            if ($$.isBarType(d) && $$.isSafari()) {
              yPos -= 3;
            } else if (!$$.isBarType(d) && $$.isChrome()) {
              yPos += 3;
            }
          } else {
            yPos += $$.isBarType(d) ? -3 : -6;
          }
        }
        if (d.value === null && !$$.config.axis_rotated) {
          if (yPos < box.height) {
            yPos = box.height;
          } else if (yPos > this.height) {
            yPos = this.height - 4;
          }
        }
        return yPos;
      };
      ChartInternal.prototype.initTitle = function() {
        var $$ = this;
        $$.title = $$.svg.append("text").text($$.config.title_text).attr("class", $$.CLASS.title);
      };
      ChartInternal.prototype.redrawTitle = function() {
        var $$ = this;
        $$.title.attr("x", $$.xForTitle.bind($$)).attr("y", $$.yForTitle.bind($$));
      };
      ChartInternal.prototype.xForTitle = function() {
        var $$ = this, config = $$.config, position = config.title_position || "left", x5;
        if (position.indexOf("right") >= 0) {
          x5 = $$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width - config.title_padding.right;
        } else if (position.indexOf("center") >= 0) {
          x5 = Math.max(($$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) / 2, 0);
        } else {
          x5 = config.title_padding.left;
        }
        return x5;
      };
      ChartInternal.prototype.yForTitle = function() {
        var $$ = this;
        return $$.config.title_padding.top + $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).height;
      };
      ChartInternal.prototype.getTitlePadding = function() {
        var $$ = this;
        return $$.yForTitle() + $$.config.title_padding.bottom;
      };
      function powerOfTen(d) {
        return d / Math.pow(10, Math.ceil(Math.log(d) / Math.LN10 - 1e-12)) === 1;
      }
      ChartInternal.prototype.drawColorScale = function() {
        var $$ = this, d3 = $$.d3, config = $$.config, target = $$.data.targets[0], barWidth, barHeight, axis2, points, legendAxis, axisScale, inverseScale, height;
        barWidth = !isNaN(config.stanford_scaleWidth) ? config.stanford_scaleWidth : 20;
        barHeight = 5;
        if (barHeight < 0 || barWidth < 0) {
          throw Error("Colorscale's barheight and barwidth must be greater than 0.");
        }
        height = $$.height - config.stanford_padding.bottom - config.stanford_padding.top;
        points = d3.range(config.stanford_padding.bottom, height, barHeight);
        inverseScale = d3.scaleSequential(target.colors).domain([points[points.length - 1], points[0]]);
        if ($$.colorScale) {
          $$.colorScale.remove();
        }
        $$.colorScale = $$.svg.append("g").attr("width", 50).attr("height", height).attr("class", CLASS.colorScale);
        $$.colorScale.append("g").attr("transform", "translate(0, " + config.stanford_padding.top + ")").selectAll("bars").data(points).enter().append("rect").attr("y", function(d, i) {
          return i * barHeight;
        }).attr("x", 0).attr("width", barWidth).attr("height", barHeight).attr("fill", function(d) {
          return inverseScale(d);
        });
        axisScale = d3.scaleLog().domain([target.minEpochs, target.maxEpochs]).range([
          points[0] + config.stanford_padding.top + points[points.length - 1] + barHeight - 1,
          points[0] + config.stanford_padding.top
        ]);
        legendAxis = d3.axisRight(axisScale);
        if (config.stanford_scaleFormat === "pow10") {
          legendAxis.tickValues([1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7]);
        } else if (isFunction(config.stanford_scaleFormat)) {
          legendAxis.tickFormat(config.stanford_scaleFormat);
        } else {
          legendAxis.tickFormat(d3.format("d"));
        }
        if (isFunction(config.stanford_scaleValues)) {
          legendAxis.tickValues(config.stanford_scaleValues(target.minEpochs, target.maxEpochs));
        }
        axis2 = $$.colorScale.append("g").attr("class", "legend axis").attr("transform", "translate(" + barWidth + ",0)").call(legendAxis);
        if (config.stanford_scaleFormat === "pow10") {
          axis2.selectAll(".tick text").text(null).filter(powerOfTen).text(10).append("tspan").attr("dy", "-.7em").text(function(d) {
            return Math.round(Math.log(d) / Math.LN10);
          });
        }
        $$.colorScale.attr("transform", "translate(" + ($$.currentWidth - $$.xForColorScale()) + ", 0)");
      };
      ChartInternal.prototype.xForColorScale = function() {
        var $$ = this;
        return $$.config.stanford_padding.right + getBBox($$.colorScale.node()).width;
      };
      ChartInternal.prototype.getColorScalePadding = function() {
        var $$ = this;
        return $$.xForColorScale() + $$.config.stanford_padding.left + 20;
      };
      ChartInternal.prototype.isStanfordGraphType = function() {
        var $$ = this;
        return $$.config.data_type === "stanford";
      };
      ChartInternal.prototype.initStanfordData = function() {
        var $$ = this, d3 = $$.d3, config = $$.config, target = $$.data.targets[0], epochs, maxEpochs, minEpochs;
        target.values.sort(compareEpochs);
        epochs = target.values.map(function(a2) {
          return a2.epochs;
        });
        minEpochs = !isNaN(config.stanford_scaleMin) ? config.stanford_scaleMin : d3.min(epochs);
        maxEpochs = !isNaN(config.stanford_scaleMax) ? config.stanford_scaleMax : d3.max(epochs);
        if (minEpochs > maxEpochs) {
          throw Error("Number of minEpochs has to be smaller than maxEpochs");
        }
        target.colors = isFunction(config.stanford_colors) ? config.stanford_colors : d3.interpolateHslLong(d3.hsl(250, 1, 0.5), d3.hsl(0, 1, 0.5));
        target.colorscale = d3.scaleSequentialLog(target.colors).domain([minEpochs, maxEpochs]);
        target.minEpochs = minEpochs;
        target.maxEpochs = maxEpochs;
      };
      ChartInternal.prototype.getStanfordPointColor = function(d) {
        var $$ = this, target = $$.data.targets[0];
        return target.colorscale(d.epochs);
      };
      ChartInternal.prototype.getCentroid = function(points) {
        var area = getRegionArea(points);
        var x5 = 0, y5 = 0, i, j, f, point1, point22;
        for (i = 0, j = points.length - 1; i < points.length; j = i, i += 1) {
          point1 = points[i];
          point22 = points[j];
          f = point1.x * point22.y - point22.x * point1.y;
          x5 += (point1.x + point22.x) * f;
          y5 += (point1.y + point22.y) * f;
        }
        f = area * 6;
        return {
          x: x5 / f,
          y: y5 / f
        };
      };
      ChartInternal.prototype.getStanfordTooltipTitle = function(d) {
        var $$ = this, labelX = $$.axis.getLabelText("x"), labelY = $$.axis.getLabelText("y");
        return "\n      <tr><th>" + (labelX ? sanitise(labelX) : "x") + "</th><th class='value'>" + d.x + "</th></tr>\n      <tr><th>" + (labelY ? sanitise(labelY) : "y") + "</th><th class='value'>" + d.value + "</th></tr>\n    ";
      };
      ChartInternal.prototype.countEpochsInRegion = function(region) {
        var $$ = this, target = $$.data.targets[0], total, count2;
        total = target.values.reduce(function(accumulator, currentValue) {
          return accumulator + Number(currentValue.epochs);
        }, 0);
        count2 = target.values.reduce(function(accumulator, currentValue) {
          if (pointInRegion(currentValue, region)) {
            return accumulator + Number(currentValue.epochs);
          }
          return accumulator;
        }, 0);
        return {
          value: count2,
          percentage: count2 !== 0 ? (count2 / total * 100).toFixed(1) : 0
        };
      };
      var getRegionArea = function(points) {
        var area = 0, i, j, point1, point22;
        for (i = 0, j = points.length - 1; i < points.length; j = i, i += 1) {
          point1 = points[i];
          point22 = points[j];
          area += point1.x * point22.y;
          area -= point1.y * point22.x;
        }
        area /= 2;
        return area;
      };
      var pointInRegion = function(point6, region) {
        var xi, yi, yj, xj, intersect2, x5 = point6.x, y5 = point6.value, inside = false;
        for (var i = 0, j = region.length - 1; i < region.length; j = i++) {
          xi = region[i].x;
          yi = region[i].y;
          xj = region[j].x;
          yj = region[j].y;
          intersect2 = yi > y5 !== yj > y5 && x5 < (xj - xi) * (y5 - yi) / (yj - yi) + xi;
          if (intersect2) {
            inside = !inside;
          }
        }
        return inside;
      };
      var compareEpochs = function(a2, b) {
        if (a2.epochs < b.epochs) {
          return -1;
        }
        if (a2.epochs > b.epochs) {
          return 1;
        }
        return 0;
      };
      ChartInternal.prototype.initStanfordElements = function() {
        var $$ = this;
        $$.stanfordElements = $$.main.select("." + CLASS.chart).append("g").attr("class", CLASS.stanfordElements);
        $$.stanfordElements.append("g").attr("class", CLASS.stanfordLines);
        $$.stanfordElements.append("g").attr("class", CLASS.stanfordTexts);
        $$.stanfordElements.append("g").attr("class", CLASS.stanfordRegions);
      };
      ChartInternal.prototype.updateStanfordElements = function(duration) {
        var $$ = this, main = $$.main, config = $$.config, stanfordLine, stanfordLineEnter, stanfordRegion, stanfordRegionEnter, stanfordText, stanfordTextEnter, xvCustom = $$.xvCustom.bind($$), yvCustom = $$.yvCustom.bind($$), countPointsInRegion = $$.countEpochsInRegion.bind($$);
        stanfordLine = main.select("." + CLASS.stanfordLines).style("shape-rendering", "geometricprecision").selectAll("." + CLASS.stanfordLine).data(config.stanford_lines);
        stanfordLineEnter = stanfordLine.enter().append("g").attr("class", function(d) {
          return CLASS.stanfordLine + (d["class"] ? " " + d["class"] : "");
        });
        stanfordLineEnter.append("line").attr("x1", function(d) {
          return config.axis_rotated ? yvCustom(d, "value_y1") : xvCustom(d, "value_x1");
        }).attr("x2", function(d) {
          return config.axis_rotated ? yvCustom(d, "value_y2") : xvCustom(d, "value_x2");
        }).attr("y1", function(d) {
          return config.axis_rotated ? xvCustom(d, "value_x1") : yvCustom(d, "value_y1");
        }).attr("y2", function(d) {
          return config.axis_rotated ? xvCustom(d, "value_x2") : yvCustom(d, "value_y2");
        }).style("opacity", 0);
        $$.stanfordLines = stanfordLineEnter.merge(stanfordLine);
        $$.stanfordLines.select("line").transition().duration(duration).attr("x1", function(d) {
          return config.axis_rotated ? yvCustom(d, "value_y1") : xvCustom(d, "value_x1");
        }).attr("x2", function(d) {
          return config.axis_rotated ? yvCustom(d, "value_y2") : xvCustom(d, "value_x2");
        }).attr("y1", function(d) {
          return config.axis_rotated ? xvCustom(d, "value_x1") : yvCustom(d, "value_y1");
        }).attr("y2", function(d) {
          return config.axis_rotated ? xvCustom(d, "value_x2") : yvCustom(d, "value_y2");
        }).style("opacity", 1);
        stanfordLine.exit().transition().duration(duration).style("opacity", 0).remove();
        stanfordText = main.select("." + CLASS.stanfordTexts).selectAll("." + CLASS.stanfordText).data(config.stanford_texts);
        stanfordTextEnter = stanfordText.enter().append("g").attr("class", function(d) {
          return CLASS.stanfordText + (d["class"] ? " " + d["class"] : "");
        });
        stanfordTextEnter.append("text").attr("x", function(d) {
          return config.axis_rotated ? yvCustom(d, "y") : xvCustom(d, "x");
        }).attr("y", function(d) {
          return config.axis_rotated ? xvCustom(d, "x") : yvCustom(d, "y");
        }).style("opacity", 0);
        $$.stanfordTexts = stanfordTextEnter.merge(stanfordText);
        $$.stanfordTexts.select("text").transition().duration(duration).attr("x", function(d) {
          return config.axis_rotated ? yvCustom(d, "y") : xvCustom(d, "x");
        }).attr("y", function(d) {
          return config.axis_rotated ? xvCustom(d, "x") : yvCustom(d, "y");
        }).text(function(d) {
          return d.content;
        }).style("opacity", 1);
        stanfordText.exit().transition().duration(duration).style("opacity", 0).remove();
        stanfordRegion = main.select("." + CLASS.stanfordRegions).selectAll("." + CLASS.stanfordRegion).data(config.stanford_regions);
        stanfordRegionEnter = stanfordRegion.enter().append("g").attr("class", function(d) {
          return CLASS.stanfordRegion + (d["class"] ? " " + d["class"] : "");
        });
        stanfordRegionEnter.append("polygon").attr("points", function(d) {
          return d.points.map(function(value) {
            return [
              config.axis_rotated ? yvCustom(value, "y") : xvCustom(value, "x"),
              config.axis_rotated ? xvCustom(value, "x") : yvCustom(value, "y")
            ].join(",");
          }).join(" ");
        }).style("opacity", 0);
        stanfordRegionEnter.append("text").attr("x", function(d) {
          return $$.getCentroid(d.points).x;
        }).attr("y", function(d) {
          return $$.getCentroid(d.points).y;
        }).style("opacity", 0);
        $$.stanfordRegions = stanfordRegionEnter.merge(stanfordRegion);
        $$.stanfordRegions.select("polygon").transition().duration(duration).attr("points", function(d) {
          return d.points.map(function(value) {
            return [
              config.axis_rotated ? yvCustom(value, "y") : xvCustom(value, "x"),
              config.axis_rotated ? xvCustom(value, "x") : yvCustom(value, "y")
            ].join(",");
          }).join(" ");
        }).style("opacity", function(d) {
          return d.opacity ? d.opacity : 0.2;
        });
        $$.stanfordRegions.select("text").transition().duration(duration).attr("x", function(d) {
          return config.axis_rotated ? yvCustom($$.getCentroid(d.points), "y") : xvCustom($$.getCentroid(d.points), "x");
        }).attr("y", function(d) {
          return config.axis_rotated ? xvCustom($$.getCentroid(d.points), "x") : yvCustom($$.getCentroid(d.points), "y");
        }).text(function(d) {
          if (d.text) {
            var value, percentage, temp2;
            if ($$.isStanfordGraphType()) {
              temp2 = countPointsInRegion(d.points);
              value = temp2.value;
              percentage = temp2.percentage;
            }
            return d.text(value, percentage);
          }
          return "";
        }).attr("text-anchor", "middle").attr("dominant-baseline", "middle").style("opacity", 1);
        stanfordRegion.exit().transition().duration(duration).style("opacity", 0).remove();
      };
      ChartInternal.prototype.initTooltip = function() {
        var $$ = this, config = $$.config, i;
        $$.tooltip = $$.selectChart.style("position", "relative").append("div").attr("class", CLASS.tooltipContainer).style("position", "absolute").style("pointer-events", "none").style("display", "none");
        if (config.tooltip_init_show) {
          if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {
            config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);
            for (i = 0; i < $$.data.targets[0].values.length; i++) {
              if ($$.data.targets[0].values[i].x - config.tooltip_init_x === 0) {
                break;
              }
            }
            config.tooltip_init_x = i;
          }
          $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function(d) {
            return $$.addName(d.values[config.tooltip_init_x]);
          }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));
          $$.tooltip.style("top", config.tooltip_init_position.top).style("left", config.tooltip_init_position.left).style("display", "block");
        }
      };
      ChartInternal.prototype.getTooltipSortFunction = function() {
        var $$ = this, config = $$.config;
        if (config.data_groups.length === 0 || config.tooltip_order !== void 0) {
          var order = config.tooltip_order;
          if (order === void 0) {
            order = config.data_order;
          }
          var valueOf = function(obj) {
            return obj ? obj.value : null;
          };
          if (isString(order) && order.toLowerCase() === "asc") {
            return function(a2, b) {
              return valueOf(a2) - valueOf(b);
            };
          } else if (isString(order) && order.toLowerCase() === "desc") {
            return function(a2, b) {
              return valueOf(b) - valueOf(a2);
            };
          } else if (isFunction(order)) {
            var sortFunction = order;
            if (config.tooltip_order === void 0) {
              sortFunction = function(a2, b) {
                return order(a2 ? {
                  id: a2.id,
                  values: [a2]
                } : null, b ? {
                  id: b.id,
                  values: [b]
                } : null);
              };
            }
            return sortFunction;
          } else if (isArray(order)) {
            return function(a2, b) {
              return order.indexOf(a2.id) - order.indexOf(b.id);
            };
          }
        } else {
          var ids = $$.orderTargets($$.data.targets).map(function(i) {
            return i.id;
          });
          if ($$.isOrderAsc() || $$.isOrderDesc()) {
            ids = ids.reverse();
          }
          return function(a2, b) {
            return ids.indexOf(a2.id) - ids.indexOf(b.id);
          };
        }
      };
      ChartInternal.prototype.getTooltipContent = function(d, defaultTitleFormat, defaultValueFormat, color2) {
        var $$ = this, config = $$.config, titleFormat = config.tooltip_format_title || defaultTitleFormat, nameFormat = config.tooltip_format_name || function(name2) {
          return name2;
        }, text, i, title, value, name, bgcolor;
        var valueFormat = config.tooltip_format_value;
        if (!valueFormat) {
          valueFormat = $$.isTargetNormalized(d.id) ? function(v, ratio) {
            return (ratio * 100).toFixed(2) + "%";
          } : defaultValueFormat;
        }
        var tooltipSortFunction = this.getTooltipSortFunction();
        if (tooltipSortFunction) {
          d.sort(tooltipSortFunction);
        }
        for (i = 0; i < d.length; i++) {
          if (!(d[i] && (d[i].value || d[i].value === 0))) {
            continue;
          }
          if ($$.isStanfordGraphType()) {
            if (!text) {
              title = $$.getStanfordTooltipTitle(d[i]);
              text = "<table class='" + $$.CLASS.tooltip + "'>" + title;
            }
            bgcolor = $$.getStanfordPointColor(d[i]);
            name = sanitise(config.data_epochs);
            value = d[i].epochs;
          } else {
            if (!text) {
              title = sanitise(titleFormat ? titleFormat(d[i].x, d[i].index) : d[i].x);
              text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
            }
            value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));
            if (value !== void 0) {
              if (d[i].name === null) {
                continue;
              }
              name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));
              bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color2(d[i].id);
            }
          }
          if (value !== void 0) {
            text += "<tr class='" + $$.CLASS.tooltipName + "-" + $$.getTargetSelectorSuffix(d[i].id) + "'>";
            text += "<td class='name'><span style='background-color:" + bgcolor + "'></span>" + name + "</td>";
            text += "<td class='value'>" + value + "</td>";
            text += "</tr>";
          }
        }
        return text + "</table>";
      };
      ChartInternal.prototype.tooltipPosition = function(dataToShow, tWidth, tHeight, element) {
        var $$ = this, config = $$.config, d3 = $$.d3;
        var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;
        var forArc = $$.hasArcType(), mouse = d3.mouse(element);
        if (forArc) {
          tooltipLeft = ($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2 + mouse[0];
          tooltipTop = ($$.hasType("gauge") ? $$.height : $$.height / 2) + mouse[1] + 20;
        } else {
          svgLeft = $$.getSvgLeft(true);
          if (config.axis_rotated) {
            tooltipLeft = svgLeft + mouse[0] + 100;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = $$.x(dataToShow[0].x) + 20;
          } else {
            tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = mouse[1] + 15;
          }
          if (tooltipRight > chartRight) {
            tooltipLeft -= tooltipRight - chartRight + 20;
          }
          if (tooltipTop + tHeight > $$.currentHeight) {
            tooltipTop -= tHeight + 30;
          }
        }
        if (tooltipTop < 0) {
          tooltipTop = 0;
        }
        return {
          top: tooltipTop,
          left: tooltipLeft
        };
      };
      ChartInternal.prototype.showTooltip = function(selectedData, element) {
        var $$ = this, config = $$.config;
        var tWidth, tHeight, position;
        var forArc = $$.hasArcType(), dataToShow = selectedData.filter(function(d) {
          return d && isValue(d.value);
        }), positionFunction = config.tooltip_position || ChartInternal.prototype.tooltipPosition;
        if (dataToShow.length === 0 || !config.tooltip_show) {
          $$.hideTooltip();
          return;
        }
        $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style("display", "block");
        tWidth = $$.tooltip.property("offsetWidth");
        tHeight = $$.tooltip.property("offsetHeight");
        position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);
        $$.tooltip.style("top", position.top + "px").style("left", position.left + "px");
      };
      ChartInternal.prototype.hideTooltip = function() {
        this.tooltip.style("display", "none");
      };
      ChartInternal.prototype.setTargetType = function(targetIds, type2) {
        var $$ = this, config = $$.config;
        $$.mapToTargetIds(targetIds).forEach(function(id2) {
          $$.withoutFadeIn[id2] = type2 === config.data_types[id2];
          config.data_types[id2] = type2;
        });
        if (!targetIds) {
          config.data_type = type2;
        }
      };
      ChartInternal.prototype.hasType = function(type2, targets) {
        var $$ = this, types = $$.config.data_types, has = false;
        targets = targets || $$.data.targets;
        if (targets && targets.length) {
          targets.forEach(function(target) {
            var t = types[target.id];
            if (t && t.indexOf(type2) >= 0 || !t && type2 === "line") {
              has = true;
            }
          });
        } else if (Object.keys(types).length) {
          Object.keys(types).forEach(function(id2) {
            if (types[id2] === type2) {
              has = true;
            }
          });
        } else {
          has = $$.config.data_type === type2;
        }
        return has;
      };
      ChartInternal.prototype.hasArcType = function(targets) {
        return this.hasType("pie", targets) || this.hasType("donut", targets) || this.hasType("gauge", targets);
      };
      ChartInternal.prototype.isLineType = function(d) {
        var config = this.config, id2 = isString(d) ? d : d.id;
        return !config.data_types[id2] || ["line", "spline", "area", "area-spline", "step", "area-step"].indexOf(config.data_types[id2]) >= 0;
      };
      ChartInternal.prototype.isStepType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return ["step", "area-step"].indexOf(this.config.data_types[id2]) >= 0;
      };
      ChartInternal.prototype.isSplineType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return ["spline", "area-spline"].indexOf(this.config.data_types[id2]) >= 0;
      };
      ChartInternal.prototype.isAreaType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return ["area", "area-spline", "area-step"].indexOf(this.config.data_types[id2]) >= 0;
      };
      ChartInternal.prototype.isBarType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "bar";
      };
      ChartInternal.prototype.isScatterType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "scatter";
      };
      ChartInternal.prototype.isStanfordType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "stanford";
      };
      ChartInternal.prototype.isPieType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "pie";
      };
      ChartInternal.prototype.isGaugeType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "gauge";
      };
      ChartInternal.prototype.isDonutType = function(d) {
        var id2 = isString(d) ? d : d.id;
        return this.config.data_types[id2] === "donut";
      };
      ChartInternal.prototype.isArcType = function(d) {
        return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);
      };
      ChartInternal.prototype.lineData = function(d) {
        return this.isLineType(d) ? [d] : [];
      };
      ChartInternal.prototype.arcData = function(d) {
        return this.isArcType(d.data) ? [d] : [];
      };
      ChartInternal.prototype.barData = function(d) {
        return this.isBarType(d) ? d.values : [];
      };
      ChartInternal.prototype.lineOrScatterOrStanfordData = function(d) {
        return this.isLineType(d) || this.isScatterType(d) || this.isStanfordType(d) ? d.values : [];
      };
      ChartInternal.prototype.barOrLineData = function(d) {
        return this.isBarType(d) || this.isLineType(d) ? d.values : [];
      };
      ChartInternal.prototype.isSafari = function() {
        var ua = window.navigator.userAgent;
        return ua.indexOf("Safari") >= 0 && ua.indexOf("Chrome") < 0;
      };
      ChartInternal.prototype.isChrome = function() {
        var ua = window.navigator.userAgent;
        return ua.indexOf("Chrome") >= 0;
      };
      ChartInternal.prototype.initZoom = function() {
        var $$ = this, d3 = $$.d3, config = $$.config, startEvent;
        $$.zoom = d3.zoom().on("start", function() {
          if (config.zoom_type !== "scroll") {
            return;
          }
          var e = d3.event.sourceEvent;
          if (e && e.type === "brush") {
            return;
          }
          startEvent = e;
          config.zoom_onzoomstart.call($$.api, e);
        }).on("zoom", function() {
          if (config.zoom_type !== "scroll") {
            return;
          }
          var e = d3.event.sourceEvent;
          if (e && e.type === "brush") {
            return;
          }
          $$.redrawForZoom();
          config.zoom_onzoom.call($$.api, $$.x.orgDomain());
        }).on("end", function() {
          if (config.zoom_type !== "scroll") {
            return;
          }
          var e = d3.event.sourceEvent;
          if (e && e.type === "brush") {
            return;
          }
          if (e && startEvent.clientX === e.clientX && startEvent.clientY === e.clientY) {
            return;
          }
          config.zoom_onzoomend.call($$.api, $$.x.orgDomain());
        });
        $$.zoom.updateDomain = function() {
          if (d3.event && d3.event.transform) {
            if (config.axis_rotated && config.zoom_type === "scroll" && d3.event.sourceEvent.type === "mousemove") {
              $$.x.domain(d3.event.transform.rescaleY($$.subX).domain());
            } else {
              $$.x.domain(d3.event.transform.rescaleX($$.subX).domain());
            }
          }
          return this;
        };
        $$.zoom.updateExtent = function() {
          this.scaleExtent([1, Infinity]).translateExtent([
            [0, 0],
            [$$.width, $$.height]
          ]).extent([
            [0, 0],
            [$$.width, $$.height]
          ]);
          return this;
        };
        $$.zoom.update = function() {
          return this.updateExtent().updateDomain();
        };
        return $$.zoom.updateExtent();
      };
      ChartInternal.prototype.zoomTransform = function(range2) {
        var $$ = this, s2 = [$$.x(range2[0]), $$.x(range2[1])];
        return $$.d3.zoomIdentity.scale($$.width / (s2[1] - s2[0])).translate(-s2[0], 0);
      };
      ChartInternal.prototype.initDragZoom = function() {
        var $$ = this;
        var d3 = $$.d3;
        var config = $$.config;
        var context = $$.context = $$.svg;
        var brushXPos = $$.margin.left + 20.5;
        var brushYPos = $$.margin.top + 0.5;
        if (!(config.zoom_type === "drag" && config.zoom_enabled)) {
          return;
        }
        var getZoomedDomain = function(selection2) {
          return selection2 && selection2.map(function(x5) {
            return $$.x.invert(x5);
          });
        };
        var brush2 = $$.dragZoomBrush = d3.brushX().on("start", function() {
          $$.api.unzoom();
          $$.svg.select("." + CLASS.dragZoom).classed("disabled", false);
          config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);
        }).on("brush", function() {
          config.zoom_onzoom.call($$.api, getZoomedDomain(d3.event.selection));
        }).on("end", function() {
          if (d3.event.selection == null) {
            return;
          }
          var zoomedDomain = getZoomedDomain(d3.event.selection);
          if (!config.zoom_disableDefaultBehavior) {
            $$.api.zoom(zoomedDomain);
          }
          $$.svg.select("." + CLASS.dragZoom).classed("disabled", true);
          config.zoom_onzoomend.call($$.api, zoomedDomain);
        });
        context.append("g").classed(CLASS.dragZoom, true).attr("clip-path", $$.clipPath).attr("transform", "translate(" + brushXPos + "," + brushYPos + ")").call(brush2);
      };
      ChartInternal.prototype.getZoomDomain = function() {
        var $$ = this, config = $$.config, d3 = $$.d3, min2 = d3.min([$$.orgXDomain[0], config.zoom_x_min]), max3 = d3.max([$$.orgXDomain[1], config.zoom_x_max]);
        return [min2, max3];
      };
      ChartInternal.prototype.redrawForZoom = function() {
        var $$ = this, d3 = $$.d3, config = $$.config, zoom = $$.zoom, x5 = $$.x;
        if (!config.zoom_enabled) {
          return;
        }
        if ($$.filterTargetsToShow($$.data.targets).length === 0) {
          return;
        }
        zoom.update();
        if (config.zoom_disableDefaultBehavior) {
          return;
        }
        if ($$.isCategorized() && x5.orgDomain()[0] === $$.orgXDomain[0]) {
          x5.domain([$$.orgXDomain[0] - 1e-10, x5.orgDomain()[1]]);
        }
        $$.redraw({
          withTransition: false,
          withY: config.zoom_rescale,
          withSubchart: false,
          withEventRect: false,
          withDimension: false
        });
        if (d3.event.sourceEvent && d3.event.sourceEvent.type === "mousemove") {
          $$.cancelClick = true;
        }
      };
      return c32;
    });
  }
});
export default require_c3();
/*! Bundled license information:

c3/c3.js:
  (* @license C3.js v0.7.20 | (c) C3 Team and other contributors | http://c3js.org/ *)
*/
//# sourceMappingURL=c3.js.map
